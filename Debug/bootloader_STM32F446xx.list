
bootloader_STM32F446xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000422c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e0  080043fc  080043fc  000143fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049dc  080049dc  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  080049dc  080049dc  000149dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049e4  080049e4  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049e4  080049e4  000149e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049e8  080049e8  000149e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080049ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  20000064  08004a50  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  08004a50  00020348  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009c07  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d9b  00000000  00000000  00029cde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000950  00000000  00000000  0002ba80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000718  00000000  00000000  0002c3d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002158f  00000000  00000000  0002cae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bbfa  00000000  00000000  0004e077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8a9c  00000000  00000000  00059c71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002a04  00000000  00000000  00122710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  00125114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080043e4 	.word	0x080043e4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	080043e4 	.word	0x080043e4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c0:	f001 f938 	bl	8001834 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c4:	f000 f824 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c8:	f000 f8f8 	bl	80007bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005cc:	f000 f8a2 	bl	8000714 <MX_USART2_UART_Init>
  MX_CRC_Init();
 80005d0:	f000 f88c 	bl	80006ec <MX_CRC_Init>
  MX_USART3_UART_Init();
 80005d4:	f000 f8c8 	bl	8000768 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  if ( HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 80005d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005dc:	4809      	ldr	r0, [pc, #36]	; (8000604 <main+0x48>)
 80005de:	f001 ffdf 	bl	80025a0 <HAL_GPIO_ReadPin>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d105      	bne.n	80005f4 <main+0x38>
  {
	  printmsg("BL_DEBUG_MSG: Button is pressed .. going to BL mode\n\r");
 80005e8:	4807      	ldr	r0, [pc, #28]	; (8000608 <main+0x4c>)
 80005ea:	f000 fa1b 	bl	8000a24 <printmsg>
	  bootloader_uart_read_data();
 80005ee:	f000 f953 	bl	8000898 <bootloader_uart_read_data>
 80005f2:	e004      	b.n	80005fe <main+0x42>
  }
  else
  {
	  printmsg("BL_DEBUG_MS: Button is not pressed .. executing user app\n\r");
 80005f4:	4805      	ldr	r0, [pc, #20]	; (800060c <main+0x50>)
 80005f6:	f000 fa15 	bl	8000a24 <printmsg>
	  bootloader_jump_to_user_app();
 80005fa:	f000 f9e7 	bl	80009cc <bootloader_jump_to_user_app>
 80005fe:	2300      	movs	r3, #0
  }
  /* USER CODE END 2 */


}
 8000600:	4618      	mov	r0, r3
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40020800 	.word	0x40020800
 8000608:	080043fc 	.word	0x080043fc
 800060c:	08004434 	.word	0x08004434

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b094      	sub	sp, #80	; 0x50
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 031c 	add.w	r3, r7, #28
 800061a:	2234      	movs	r2, #52	; 0x34
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f003 fa5c 	bl	8003adc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 0308 	add.w	r3, r7, #8
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000634:	2300      	movs	r3, #0
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	4b2a      	ldr	r3, [pc, #168]	; (80006e4 <SystemClock_Config+0xd4>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063c:	4a29      	ldr	r2, [pc, #164]	; (80006e4 <SystemClock_Config+0xd4>)
 800063e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000642:	6413      	str	r3, [r2, #64]	; 0x40
 8000644:	4b27      	ldr	r3, [pc, #156]	; (80006e4 <SystemClock_Config+0xd4>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000650:	2300      	movs	r3, #0
 8000652:	603b      	str	r3, [r7, #0]
 8000654:	4b24      	ldr	r3, [pc, #144]	; (80006e8 <SystemClock_Config+0xd8>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800065c:	4a22      	ldr	r2, [pc, #136]	; (80006e8 <SystemClock_Config+0xd8>)
 800065e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000662:	6013      	str	r3, [r2, #0]
 8000664:	4b20      	ldr	r3, [pc, #128]	; (80006e8 <SystemClock_Config+0xd8>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800066c:	603b      	str	r3, [r7, #0]
 800066e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000670:	2302      	movs	r3, #2
 8000672:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000674:	2301      	movs	r3, #1
 8000676:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000678:	2310      	movs	r3, #16
 800067a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067c:	2302      	movs	r3, #2
 800067e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000680:	2300      	movs	r3, #0
 8000682:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000684:	2310      	movs	r3, #16
 8000686:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000688:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800068c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800068e:	2304      	movs	r3, #4
 8000690:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000692:	2302      	movs	r3, #2
 8000694:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000696:	2302      	movs	r3, #2
 8000698:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069a:	f107 031c 	add.w	r3, r7, #28
 800069e:	4618      	mov	r0, r3
 80006a0:	f002 fafa 	bl	8002c98 <HAL_RCC_OscConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006aa:	f000 ff5a 	bl	8001562 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ae:	230f      	movs	r3, #15
 80006b0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b2:	2302      	movs	r3, #2
 80006b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006c4:	f107 0308 	add.w	r3, r7, #8
 80006c8:	2102      	movs	r1, #2
 80006ca:	4618      	mov	r0, r3
 80006cc:	f001 ff9a 	bl	8002604 <HAL_RCC_ClockConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006d6:	f000 ff44 	bl	8001562 <Error_Handler>
  }
}
 80006da:	bf00      	nop
 80006dc:	3750      	adds	r7, #80	; 0x50
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40007000 	.word	0x40007000

080006ec <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <MX_CRC_Init+0x20>)
 80006f2:	4a07      	ldr	r2, [pc, #28]	; (8000710 <MX_CRC_Init+0x24>)
 80006f4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006f6:	4805      	ldr	r0, [pc, #20]	; (800070c <MX_CRC_Init+0x20>)
 80006f8:	f001 f9f3 	bl	8001ae2 <HAL_CRC_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000702:	f000 ff2e 	bl	8001562 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	20000080 	.word	0x20000080
 8000710:	40023000 	.word	0x40023000

08000714 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000718:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 800071a:	4a12      	ldr	r2, [pc, #72]	; (8000764 <MX_USART2_UART_Init+0x50>)
 800071c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800071e:	4b10      	ldr	r3, [pc, #64]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 8000720:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000724:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000732:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000738:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 800073a:	220c      	movs	r2, #12
 800073c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073e:	4b08      	ldr	r3, [pc, #32]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 8000746:	2200      	movs	r2, #0
 8000748:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 800074c:	f002 fd42 	bl	80031d4 <HAL_UART_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000756:	f000 ff04 	bl	8001562 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000088 	.word	0x20000088
 8000764:	40004400 	.word	0x40004400

08000768 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MX_USART3_UART_Init+0x4c>)
 800076e:	4a12      	ldr	r2, [pc, #72]	; (80007b8 <MX_USART3_UART_Init+0x50>)
 8000770:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <MX_USART3_UART_Init+0x4c>)
 8000774:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000778:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <MX_USART3_UART_Init+0x4c>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <MX_USART3_UART_Init+0x4c>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000786:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <MX_USART3_UART_Init+0x4c>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800078c:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_USART3_UART_Init+0x4c>)
 800078e:	220c      	movs	r2, #12
 8000790:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000792:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <MX_USART3_UART_Init+0x4c>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_USART3_UART_Init+0x4c>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800079e:	4805      	ldr	r0, [pc, #20]	; (80007b4 <MX_USART3_UART_Init+0x4c>)
 80007a0:	f002 fd18 	bl	80031d4 <HAL_UART_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80007aa:	f000 feda 	bl	8001562 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	200000cc 	.word	0x200000cc
 80007b8:	40004800 	.word	0x40004800

080007bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08a      	sub	sp, #40	; 0x28
 80007c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
 80007d6:	4b2d      	ldr	r3, [pc, #180]	; (800088c <MX_GPIO_Init+0xd0>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a2c      	ldr	r2, [pc, #176]	; (800088c <MX_GPIO_Init+0xd0>)
 80007dc:	f043 0304 	orr.w	r3, r3, #4
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b2a      	ldr	r3, [pc, #168]	; (800088c <MX_GPIO_Init+0xd0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0304 	and.w	r3, r3, #4
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	4b26      	ldr	r3, [pc, #152]	; (800088c <MX_GPIO_Init+0xd0>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a25      	ldr	r2, [pc, #148]	; (800088c <MX_GPIO_Init+0xd0>)
 80007f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b23      	ldr	r3, [pc, #140]	; (800088c <MX_GPIO_Init+0xd0>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	4b1f      	ldr	r3, [pc, #124]	; (800088c <MX_GPIO_Init+0xd0>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a1e      	ldr	r2, [pc, #120]	; (800088c <MX_GPIO_Init+0xd0>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b1c      	ldr	r3, [pc, #112]	; (800088c <MX_GPIO_Init+0xd0>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	4b18      	ldr	r3, [pc, #96]	; (800088c <MX_GPIO_Init+0xd0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a17      	ldr	r2, [pc, #92]	; (800088c <MX_GPIO_Init+0xd0>)
 8000830:	f043 0302 	orr.w	r3, r3, #2
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b15      	ldr	r3, [pc, #84]	; (800088c <MX_GPIO_Init+0xd0>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	2120      	movs	r1, #32
 8000846:	4812      	ldr	r0, [pc, #72]	; (8000890 <MX_GPIO_Init+0xd4>)
 8000848:	f001 fec2 	bl	80025d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800084c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000850:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000852:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000856:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	4619      	mov	r1, r3
 8000862:	480c      	ldr	r0, [pc, #48]	; (8000894 <MX_GPIO_Init+0xd8>)
 8000864:	f001 fd08 	bl	8002278 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000868:	2320      	movs	r3, #32
 800086a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086c:	2301      	movs	r3, #1
 800086e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000874:	2300      	movs	r3, #0
 8000876:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	4619      	mov	r1, r3
 800087e:	4804      	ldr	r0, [pc, #16]	; (8000890 <MX_GPIO_Init+0xd4>)
 8000880:	f001 fcfa 	bl	8002278 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000884:	bf00      	nop
 8000886:	3728      	adds	r7, #40	; 0x28
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40023800 	.word	0x40023800
 8000890:	40020000 	.word	0x40020000
 8000894:	40020800 	.word	0x40020800

08000898 <bootloader_uart_read_data>:

/* USER CODE BEGIN 4 */
void bootloader_uart_read_data()
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
	uint8_t rcv_len = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	70fb      	strb	r3, [r7, #3]

	while(1)
	{
		memset(bl_rx_buffer,0,200);
 80008a2:	22c8      	movs	r2, #200	; 0xc8
 80008a4:	2100      	movs	r1, #0
 80008a6:	4843      	ldr	r0, [pc, #268]	; (80009b4 <bootloader_uart_read_data+0x11c>)
 80008a8:	f003 f918 	bl	8003adc <memset>
		//here we will read and decode the commands coming from host
		//first read only one byte from the host, which is the "length" field of the command
		HAL_UART_Receive(C_UART, bl_rx_buffer, 1, HAL_MAX_DELAY);
 80008ac:	f04f 33ff 	mov.w	r3, #4294967295
 80008b0:	2201      	movs	r2, #1
 80008b2:	4940      	ldr	r1, [pc, #256]	; (80009b4 <bootloader_uart_read_data+0x11c>)
 80008b4:	4840      	ldr	r0, [pc, #256]	; (80009b8 <bootloader_uart_read_data+0x120>)
 80008b6:	f002 fd6c 	bl	8003392 <HAL_UART_Receive>
		rcv_len = bl_rx_buffer[0];
 80008ba:	4b3e      	ldr	r3, [pc, #248]	; (80009b4 <bootloader_uart_read_data+0x11c>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	70fb      	strb	r3, [r7, #3]
		HAL_UART_Receive(C_UART, &bl_rx_buffer[1], rcv_len, HAL_MAX_DELAY);
 80008c0:	78fb      	ldrb	r3, [r7, #3]
 80008c2:	b29a      	uxth	r2, r3
 80008c4:	f04f 33ff 	mov.w	r3, #4294967295
 80008c8:	493c      	ldr	r1, [pc, #240]	; (80009bc <bootloader_uart_read_data+0x124>)
 80008ca:	483b      	ldr	r0, [pc, #236]	; (80009b8 <bootloader_uart_read_data+0x120>)
 80008cc:	f002 fd61 	bl	8003392 <HAL_UART_Receive>
        for (size_t i = 0; i < rcv_len; i++) {
 80008d0:	2300      	movs	r3, #0
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	e013      	b.n	80008fe <bootloader_uart_read_data+0x66>
          printmsg("0x%02X ", bl_rx_buffer[i]);
 80008d6:	4a37      	ldr	r2, [pc, #220]	; (80009b4 <bootloader_uart_read_data+0x11c>)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	4413      	add	r3, r2
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	4619      	mov	r1, r3
 80008e0:	4837      	ldr	r0, [pc, #220]	; (80009c0 <bootloader_uart_read_data+0x128>)
 80008e2:	f000 f89f 	bl	8000a24 <printmsg>
          if ((i + 1) % 16 == 0) printmsg("\n"); // 16 byte'da bir yeni satır
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	3301      	adds	r3, #1
 80008ea:	f003 030f 	and.w	r3, r3, #15
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d102      	bne.n	80008f8 <bootloader_uart_read_data+0x60>
 80008f2:	4834      	ldr	r0, [pc, #208]	; (80009c4 <bootloader_uart_read_data+0x12c>)
 80008f4:	f000 f896 	bl	8000a24 <printmsg>
        for (size_t i = 0; i < rcv_len; i++) {
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	3301      	adds	r3, #1
 80008fc:	607b      	str	r3, [r7, #4]
 80008fe:	78fb      	ldrb	r3, [r7, #3]
 8000900:	687a      	ldr	r2, [r7, #4]
 8000902:	429a      	cmp	r2, r3
 8000904:	d3e7      	bcc.n	80008d6 <bootloader_uart_read_data+0x3e>
        }
		switch(bl_rx_buffer[1])
 8000906:	4b2b      	ldr	r3, [pc, #172]	; (80009b4 <bootloader_uart_read_data+0x11c>)
 8000908:	785b      	ldrb	r3, [r3, #1]
 800090a:	3b51      	subs	r3, #81	; 0x51
 800090c:	2b0b      	cmp	r3, #11
 800090e:	d84b      	bhi.n	80009a8 <bootloader_uart_read_data+0x110>
 8000910:	a201      	add	r2, pc, #4	; (adr r2, 8000918 <bootloader_uart_read_data+0x80>)
 8000912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000916:	bf00      	nop
 8000918:	08000949 	.word	0x08000949
 800091c:	08000951 	.word	0x08000951
 8000920:	08000959 	.word	0x08000959
 8000924:	08000961 	.word	0x08000961
 8000928:	08000969 	.word	0x08000969
 800092c:	08000971 	.word	0x08000971
 8000930:	08000979 	.word	0x08000979
 8000934:	08000981 	.word	0x08000981
 8000938:	08000989 	.word	0x08000989
 800093c:	08000991 	.word	0x08000991
 8000940:	08000999 	.word	0x08000999
 8000944:	080009a1 	.word	0x080009a1
		{
		case BL_GET_VER:
			bootloader_handle_getver_cmd(bl_rx_buffer);
 8000948:	481a      	ldr	r0, [pc, #104]	; (80009b4 <bootloader_uart_read_data+0x11c>)
 800094a:	f000 f891 	bl	8000a70 <bootloader_handle_getver_cmd>
			break;
 800094e:	e02f      	b.n	80009b0 <bootloader_uart_read_data+0x118>
		case BL_GET_HELP:
			bootloader_handle_gethelp_cmd(bl_rx_buffer);
 8000950:	4818      	ldr	r0, [pc, #96]	; (80009b4 <bootloader_uart_read_data+0x11c>)
 8000952:	f000 f8d5 	bl	8000b00 <bootloader_handle_gethelp_cmd>
			break;
 8000956:	e02b      	b.n	80009b0 <bootloader_uart_read_data+0x118>
		case BL_GET_CID:
			bootloader_handle_getcid_cmd(bl_rx_buffer);
 8000958:	4816      	ldr	r0, [pc, #88]	; (80009b4 <bootloader_uart_read_data+0x11c>)
 800095a:	f000 f90d 	bl	8000b78 <bootloader_handle_getcid_cmd>
			break;
 800095e:	e027      	b.n	80009b0 <bootloader_uart_read_data+0x118>
		case BL_GET_RDP_STATUS:
			bootloader_handle_getrdp_cmd(bl_rx_buffer);
 8000960:	4814      	ldr	r0, [pc, #80]	; (80009b4 <bootloader_uart_read_data+0x11c>)
 8000962:	f000 f955 	bl	8000c10 <bootloader_handle_getrdp_cmd>
			break;
 8000966:	e023      	b.n	80009b0 <bootloader_uart_read_data+0x118>
		case BL_GO_TO_ADDR:
			bootloader_handle_go_cmd(bl_rx_buffer);
 8000968:	4812      	ldr	r0, [pc, #72]	; (80009b4 <bootloader_uart_read_data+0x11c>)
 800096a:	f000 f99d 	bl	8000ca8 <bootloader_handle_go_cmd>
			break;
 800096e:	e01f      	b.n	80009b0 <bootloader_uart_read_data+0x118>
		case BL_FLASH_ERASE:
			bootloader_handle_flash_erase_cmd(bl_rx_buffer);
 8000970:	4810      	ldr	r0, [pc, #64]	; (80009b4 <bootloader_uart_read_data+0x11c>)
 8000972:	f000 fa05 	bl	8000d80 <bootloader_handle_flash_erase_cmd>
			break;
 8000976:	e01b      	b.n	80009b0 <bootloader_uart_read_data+0x118>
		case BL_MEM_WRITE:
			bootloader_handle_mem_write_cmd(bl_rx_buffer);
 8000978:	480e      	ldr	r0, [pc, #56]	; (80009b4 <bootloader_uart_read_data+0x11c>)
 800097a:	f000 fa6b 	bl	8000e54 <bootloader_handle_mem_write_cmd>
			break;
 800097e:	e017      	b.n	80009b0 <bootloader_uart_read_data+0x118>
		case BL_EN_RW_PROTECT:
			bootloader_handle_en_rw_protect(bl_rx_buffer);
 8000980:	480c      	ldr	r0, [pc, #48]	; (80009b4 <bootloader_uart_read_data+0x11c>)
 8000982:	f000 faf9 	bl	8000f78 <bootloader_handle_en_rw_protect>
			break;
 8000986:	e013      	b.n	80009b0 <bootloader_uart_read_data+0x118>
		case BL_MEM_READ:
			bootloader_handle_mem_read(bl_rx_buffer);
 8000988:	480a      	ldr	r0, [pc, #40]	; (80009b4 <bootloader_uart_read_data+0x11c>)
 800098a:	f000 fb93 	bl	80010b4 <bootloader_handle_mem_read>
			break;
 800098e:	e00f      	b.n	80009b0 <bootloader_uart_read_data+0x118>
		case BL_READ_SECTOR_STATUS:
			bootloader_handle_read_sector_protection_status(bl_rx_buffer);
 8000990:	4808      	ldr	r0, [pc, #32]	; (80009b4 <bootloader_uart_read_data+0x11c>)
 8000992:	f000 fb99 	bl	80010c8 <bootloader_handle_read_sector_protection_status>
			break;
 8000996:	e00b      	b.n	80009b0 <bootloader_uart_read_data+0x118>
		case BL_OTP_READ:
			bootloader_handle_read_otp(bl_rx_buffer);
 8000998:	4806      	ldr	r0, [pc, #24]	; (80009b4 <bootloader_uart_read_data+0x11c>)
 800099a:	f000 fbdd 	bl	8001158 <bootloader_handle_read_otp>
			break;
 800099e:	e007      	b.n	80009b0 <bootloader_uart_read_data+0x118>
		case BL_DIS_R_W_PROTECT:
			bootloader_handle_dis_rw_protect(bl_rx_buffer);
 80009a0:	4804      	ldr	r0, [pc, #16]	; (80009b4 <bootloader_uart_read_data+0x11c>)
 80009a2:	f000 fb3b 	bl	800101c <bootloader_handle_dis_rw_protect>
			break;
 80009a6:	e003      	b.n	80009b0 <bootloader_uart_read_data+0x118>
		default:
			printmsg("BL_DEBUG_MSG: Invalid command code received from host\n");
 80009a8:	4807      	ldr	r0, [pc, #28]	; (80009c8 <bootloader_uart_read_data+0x130>)
 80009aa:	f000 f83b 	bl	8000a24 <printmsg>
			break;
 80009ae:	bf00      	nop
		memset(bl_rx_buffer,0,200);
 80009b0:	e777      	b.n	80008a2 <bootloader_uart_read_data+0xa>
 80009b2:	bf00      	nop
 80009b4:	20000110 	.word	0x20000110
 80009b8:	20000088 	.word	0x20000088
 80009bc:	20000111 	.word	0x20000111
 80009c0:	08004470 	.word	0x08004470
 80009c4:	08004478 	.word	0x08004478
 80009c8:	0800447c 	.word	0x0800447c

080009cc <bootloader_jump_to_user_app>:
		}
	}
}

void bootloader_jump_to_user_app()
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
	//just a function pointer to hold the address of the reset handler of the user app.
	void (*app_reset_handler)(void);

	printmsg("BL_DEBUG_MSG:bootloader_jump_to_user_app\n\r");
 80009d2:	480f      	ldr	r0, [pc, #60]	; (8000a10 <bootloader_jump_to_user_app+0x44>)
 80009d4:	f000 f826 	bl	8000a24 <printmsg>

	// 1. configure the MSP by reading the value from the base address of the sector 2
	uint32_t msp_value = *(volatile uint32_t *)FLASH_SECTOR2_BASE_ADDRESS;
 80009d8:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <bootloader_jump_to_user_app+0x48>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	60fb      	str	r3, [r7, #12]
	printmsg("BL_DEBUG_MSG:MSP value : %#x\n\r",msp_value);
 80009de:	68f9      	ldr	r1, [r7, #12]
 80009e0:	480d      	ldr	r0, [pc, #52]	; (8000a18 <bootloader_jump_to_user_app+0x4c>)
 80009e2:	f000 f81f 	bl	8000a24 <printmsg>
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	f383 8808 	msr	MSP, r3
}
 80009f0:	bf00      	nop
	//SCB->VTOR = FLASH_SECTOR1_BASE_ADDRESS;
	/*
	 *  2. Now fetch the reset handler address of the user application
	 *  from the locatioon FLASH_SECTOR2_BASE_ADDRESS+4
	 */
	uint32_t resethandler_address = *(volatile uint32_t *)(FLASH_SECTOR2_BASE_ADDRESS + 4);
 80009f2:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <bootloader_jump_to_user_app+0x50>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	60bb      	str	r3, [r7, #8]

	app_reset_handler = (void*) resethandler_address;
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	607b      	str	r3, [r7, #4]

	printmsg("BL_DEBUG_MSG: app reset handler addr : %#x\n\r",app_reset_handler);
 80009fc:	6879      	ldr	r1, [r7, #4]
 80009fe:	4808      	ldr	r0, [pc, #32]	; (8000a20 <bootloader_jump_to_user_app+0x54>)
 8000a00:	f000 f810 	bl	8000a24 <printmsg>

	// 3. jump to reset handler of the application
	app_reset_handler();
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4798      	blx	r3
}
 8000a08:	bf00      	nop
 8000a0a:	3710      	adds	r7, #16
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	080044b4 	.word	0x080044b4
 8000a14:	08008000 	.word	0x08008000
 8000a18:	080044e0 	.word	0x080044e0
 8000a1c:	08008004 	.word	0x08008004
 8000a20:	08004500 	.word	0x08004500

08000a24 <printmsg>:

void printmsg(char *format,...)
{
 8000a24:	b40f      	push	{r0, r1, r2, r3}
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b096      	sub	sp, #88	; 0x58
 8000a2a:	af00      	add	r7, sp, #0
#ifdef BL_DEBUG_MSG_EN
	char str[80];

	va_list args;
	va_start(args, format);
 8000a2c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a30:	607b      	str	r3, [r7, #4]
	vsprintf(str, format, args);
 8000a32:	f107 0308 	add.w	r3, r7, #8
 8000a36:	687a      	ldr	r2, [r7, #4]
 8000a38:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f003 f844 	bl	8003ac8 <vsiprintf>
	HAL_UART_Transmit(D_UART, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8000a40:	f107 0308 	add.w	r3, r7, #8
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff fbe3 	bl	8000210 <strlen>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	b29a      	uxth	r2, r3
 8000a4e:	f107 0108 	add.w	r1, r7, #8
 8000a52:	f04f 33ff 	mov.w	r3, #4294967295
 8000a56:	4805      	ldr	r0, [pc, #20]	; (8000a6c <printmsg+0x48>)
 8000a58:	f002 fc09 	bl	800326e <HAL_UART_Transmit>
	va_end(args);
#endif
}
 8000a5c:	bf00      	nop
 8000a5e:	3758      	adds	r7, #88	; 0x58
 8000a60:	46bd      	mov	sp, r7
 8000a62:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a66:	b004      	add	sp, #16
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	200000cc 	.word	0x200000cc

08000a70 <bootloader_handle_getver_cmd>:

/************************* Implementation of Bootloader Command Handle functions ********/

/* Helper function to handle BL_GET_VER command */
void bootloader_handle_getver_cmd(uint8_t *bl_rx_buffer)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
	uint8_t bl_version;

	// 1) verify the checksum
	printmsg("BL_DEBUG_MSG:bootloader_handle_getver_cmd\n\r");
 8000a78:	481d      	ldr	r0, [pc, #116]	; (8000af0 <bootloader_handle_getver_cmd+0x80>)
 8000a7a:	f7ff ffd3 	bl	8000a24 <printmsg>

	//Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	3301      	adds	r3, #1
 8000a84:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *( (uint32_t *)(bl_rx_buffer+command_packet_len - 4) );
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	3b04      	subs	r3, #4
 8000a8a:	687a      	ldr	r2, [r7, #4]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	3b04      	subs	r3, #4
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	4619      	mov	r1, r3
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f000 fb80 	bl	80011a0 <bootloader_verify_crc>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d11a      	bne.n	8000adc <bootloader_handle_getver_cmd+0x6c>
	{
		printmsg("BL_DEBUG_MSG:checksum success !!\n\r");
 8000aa6:	4813      	ldr	r0, [pc, #76]	; (8000af4 <bootloader_handle_getver_cmd+0x84>)
 8000aa8:	f7ff ffbc 	bl	8000a24 <printmsg>
		//checksum is correct..
		bootloader_send_ack(bl_rx_buffer[0], 1);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f000 fb5a 	bl	800116c <bootloader_send_ack>
		bl_version = get_bootloader_version();
 8000ab8:	f000 fbb8 	bl	800122c <get_bootloader_version>
 8000abc:	4603      	mov	r3, r0
 8000abe:	73fb      	strb	r3, [r7, #15]
		printmsg("BL_DEBUG_MSG:BL_VER : %d %#x\n\r",bl_version,bl_version);
 8000ac0:	7bfb      	ldrb	r3, [r7, #15]
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	7bfb      	ldrb	r3, [r7, #15]
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	480b      	ldr	r0, [pc, #44]	; (8000af8 <bootloader_handle_getver_cmd+0x88>)
 8000aca:	f7ff ffab 	bl	8000a24 <printmsg>
		bootloader_uart_write_data(&bl_version,1);
 8000ace:	f107 030f 	add.w	r3, r7, #15
 8000ad2:	2101      	movs	r1, #1
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f000 fbb1 	bl	800123c <bootloader_uart_write_data>
	{
		printmsg("BL_DEBUG_MSG:checksum fail !!\n\r");
		//checksum is wrong send nack
		bootloader_send_nack();
	}
}
 8000ada:	e004      	b.n	8000ae6 <bootloader_handle_getver_cmd+0x76>
		printmsg("BL_DEBUG_MSG:checksum fail !!\n\r");
 8000adc:	4807      	ldr	r0, [pc, #28]	; (8000afc <bootloader_handle_getver_cmd+0x8c>)
 8000ade:	f7ff ffa1 	bl	8000a24 <printmsg>
		bootloader_send_nack();
 8000ae2:	f000 fb91 	bl	8001208 <bootloader_send_nack>
}
 8000ae6:	bf00      	nop
 8000ae8:	3718      	adds	r7, #24
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	08004530 	.word	0x08004530
 8000af4:	0800455c 	.word	0x0800455c
 8000af8:	08004580 	.word	0x08004580
 8000afc:	080045a0 	.word	0x080045a0

08000b00 <bootloader_handle_gethelp_cmd>:

/* Helper function to handle BL_GET_HELP command
 * Bootloader sends out all suported command codes
 * */
void bootloader_handle_gethelp_cmd(uint8_t *pBuffer)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
	// 1) verify the checksum
	printmsg("BL_DEBUG_MSG:bootloader_handle_gethelp_cmd\n\r");
 8000b08:	4816      	ldr	r0, [pc, #88]	; (8000b64 <bootloader_handle_gethelp_cmd+0x64>)
 8000b0a:	f7ff ff8b 	bl	8000a24 <printmsg>

	//Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1;
 8000b0e:	4b16      	ldr	r3, [pc, #88]	; (8000b68 <bootloader_handle_gethelp_cmd+0x68>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	3301      	adds	r3, #1
 8000b14:	60fb      	str	r3, [r7, #12]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *( (uint32_t *)(bl_rx_buffer+command_packet_len - 4) );
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	3b04      	subs	r3, #4
 8000b1a:	4a13      	ldr	r2, [pc, #76]	; (8000b68 <bootloader_handle_gethelp_cmd+0x68>)
 8000b1c:	4413      	add	r3, r2
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	60bb      	str	r3, [r7, #8]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	3b04      	subs	r3, #4
 8000b26:	68ba      	ldr	r2, [r7, #8]
 8000b28:	4619      	mov	r1, r3
 8000b2a:	480f      	ldr	r0, [pc, #60]	; (8000b68 <bootloader_handle_gethelp_cmd+0x68>)
 8000b2c:	f000 fb38 	bl	80011a0 <bootloader_verify_crc>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d10d      	bne.n	8000b52 <bootloader_handle_gethelp_cmd+0x52>
	{
		printmsg("BL_DEBUG_MSG:checksum success !!\n\r");
 8000b36:	480d      	ldr	r0, [pc, #52]	; (8000b6c <bootloader_handle_gethelp_cmd+0x6c>)
 8000b38:	f7ff ff74 	bl	8000a24 <printmsg>
		//checksum is correct..
		bootloader_send_ack(pBuffer[0], sizeof(supported_commands));
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2108      	movs	r1, #8
 8000b42:	4618      	mov	r0, r3
 8000b44:	f000 fb12 	bl	800116c <bootloader_send_ack>
		bootloader_uart_write_data(supported_commands,sizeof(supported_commands));
 8000b48:	2108      	movs	r1, #8
 8000b4a:	4809      	ldr	r0, [pc, #36]	; (8000b70 <bootloader_handle_gethelp_cmd+0x70>)
 8000b4c:	f000 fb76 	bl	800123c <bootloader_uart_write_data>
	{
		printmsg("BL_DEBUG_MSG:checksum fail !!\n\r");
		//checksum is wrong send nack
		bootloader_send_nack();
	}
}
 8000b50:	e004      	b.n	8000b5c <bootloader_handle_gethelp_cmd+0x5c>
		printmsg("BL_DEBUG_MSG:checksum fail !!\n\r");
 8000b52:	4808      	ldr	r0, [pc, #32]	; (8000b74 <bootloader_handle_gethelp_cmd+0x74>)
 8000b54:	f7ff ff66 	bl	8000a24 <printmsg>
		bootloader_send_nack();
 8000b58:	f000 fb56 	bl	8001208 <bootloader_send_nack>
}
 8000b5c:	bf00      	nop
 8000b5e:	3710      	adds	r7, #16
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	080045c0 	.word	0x080045c0
 8000b68:	20000110 	.word	0x20000110
 8000b6c:	0800455c 	.word	0x0800455c
 8000b70:	20000000 	.word	0x20000000
 8000b74:	080045a0 	.word	0x080045a0

08000b78 <bootloader_handle_getcid_cmd>:

/* Helper function to handle BL_GET_CID command */
void bootloader_handle_getcid_cmd(uint8_t *pBuffer)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
	uint16_t bl_cid_num = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	81fb      	strh	r3, [r7, #14]
	printmsg("BL_DEBUG_MSG:bootloader_handle_getcid_cmd\n\r");
 8000b84:	481d      	ldr	r0, [pc, #116]	; (8000bfc <bootloader_handle_getcid_cmd+0x84>)
 8000b86:	f7ff ff4d 	bl	8000a24 <printmsg>

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000b8a:	4b1d      	ldr	r3, [pc, #116]	; (8000c00 <bootloader_handle_getcid_cmd+0x88>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	3b04      	subs	r3, #4
 8000b96:	4a1a      	ldr	r2, [pc, #104]	; (8000c00 <bootloader_handle_getcid_cmd+0x88>)
 8000b98:	4413      	add	r3, r2
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	3b04      	subs	r3, #4
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4816      	ldr	r0, [pc, #88]	; (8000c00 <bootloader_handle_getcid_cmd+0x88>)
 8000ba8:	f000 fafa 	bl	80011a0 <bootloader_verify_crc>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d11a      	bne.n	8000be8 <bootloader_handle_getcid_cmd+0x70>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n\r");
 8000bb2:	4814      	ldr	r0, [pc, #80]	; (8000c04 <bootloader_handle_getcid_cmd+0x8c>)
 8000bb4:	f7ff ff36 	bl	8000a24 <printmsg>
        bootloader_send_ack(pBuffer[0],2);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2102      	movs	r1, #2
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f000 fad4 	bl	800116c <bootloader_send_ack>
        bl_cid_num = get_mcu_chip_id();
 8000bc4:	f000 fb4e 	bl	8001264 <get_mcu_chip_id>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	81fb      	strh	r3, [r7, #14]
        printmsg("BL_DEBUG_MSG:MCU id : %d %#x !!\n\r",bl_cid_num, bl_cid_num);
 8000bcc:	89fb      	ldrh	r3, [r7, #14]
 8000bce:	4619      	mov	r1, r3
 8000bd0:	89fb      	ldrh	r3, [r7, #14]
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	480c      	ldr	r0, [pc, #48]	; (8000c08 <bootloader_handle_getcid_cmd+0x90>)
 8000bd6:	f7ff ff25 	bl	8000a24 <printmsg>
        bootloader_uart_write_data((uint8_t *)&bl_cid_num,2);
 8000bda:	f107 030e 	add.w	r3, r7, #14
 8000bde:	2102      	movs	r1, #2
 8000be0:	4618      	mov	r0, r3
 8000be2:	f000 fb2b 	bl	800123c <bootloader_uart_write_data>
	}else
	{
        printmsg("BL_DEBUG_MSG:checksum fail !!\n\r");
        bootloader_send_nack();
	}
}
 8000be6:	e004      	b.n	8000bf2 <bootloader_handle_getcid_cmd+0x7a>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n\r");
 8000be8:	4808      	ldr	r0, [pc, #32]	; (8000c0c <bootloader_handle_getcid_cmd+0x94>)
 8000bea:	f7ff ff1b 	bl	8000a24 <printmsg>
        bootloader_send_nack();
 8000bee:	f000 fb0b 	bl	8001208 <bootloader_send_nack>
}
 8000bf2:	bf00      	nop
 8000bf4:	3718      	adds	r7, #24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	080045f0 	.word	0x080045f0
 8000c00:	20000110 	.word	0x20000110
 8000c04:	0800455c 	.word	0x0800455c
 8000c08:	0800461c 	.word	0x0800461c
 8000c0c:	080045a0 	.word	0x080045a0

08000c10 <bootloader_handle_getrdp_cmd>:

/* Helper function to handle BL_GET_RDP_STATUS command */
void bootloader_handle_getrdp_cmd(uint8_t *pBuffer)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
    uint8_t rdp_level = 0x00;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	73fb      	strb	r3, [r7, #15]
    printmsg("BL_DEBUG_MSG:bootloader_handle_getrdp_cmd\n\r");
 8000c1c:	481d      	ldr	r0, [pc, #116]	; (8000c94 <bootloader_handle_getrdp_cmd+0x84>)
 8000c1e:	f7ff ff01 	bl	8000a24 <printmsg>

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000c22:	4b1d      	ldr	r3, [pc, #116]	; (8000c98 <bootloader_handle_getrdp_cmd+0x88>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	3301      	adds	r3, #1
 8000c28:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	3b04      	subs	r3, #4
 8000c2e:	4a1a      	ldr	r2, [pc, #104]	; (8000c98 <bootloader_handle_getrdp_cmd+0x88>)
 8000c30:	4413      	add	r3, r2
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	3b04      	subs	r3, #4
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4816      	ldr	r0, [pc, #88]	; (8000c98 <bootloader_handle_getrdp_cmd+0x88>)
 8000c40:	f000 faae 	bl	80011a0 <bootloader_verify_crc>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d11a      	bne.n	8000c80 <bootloader_handle_getrdp_cmd+0x70>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n\r");
 8000c4a:	4814      	ldr	r0, [pc, #80]	; (8000c9c <bootloader_handle_getrdp_cmd+0x8c>)
 8000c4c:	f7ff feea 	bl	8000a24 <printmsg>
        bootloader_send_ack(pBuffer[0],1);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2101      	movs	r1, #1
 8000c56:	4618      	mov	r0, r3
 8000c58:	f000 fa88 	bl	800116c <bootloader_send_ack>
        rdp_level = get_flash_rdp_level();
 8000c5c:	f000 fb14 	bl	8001288 <get_flash_rdp_level>
 8000c60:	4603      	mov	r3, r0
 8000c62:	73fb      	strb	r3, [r7, #15]
        printmsg("BL_DEBUG_MSG:RDP level: %d %#x\n\r",rdp_level,rdp_level);
 8000c64:	7bfb      	ldrb	r3, [r7, #15]
 8000c66:	4619      	mov	r1, r3
 8000c68:	7bfb      	ldrb	r3, [r7, #15]
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	480c      	ldr	r0, [pc, #48]	; (8000ca0 <bootloader_handle_getrdp_cmd+0x90>)
 8000c6e:	f7ff fed9 	bl	8000a24 <printmsg>
        bootloader_uart_write_data(&rdp_level,1);
 8000c72:	f107 030f 	add.w	r3, r7, #15
 8000c76:	2101      	movs	r1, #1
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f000 fadf 	bl	800123c <bootloader_uart_write_data>
	}else
	{
        printmsg("BL_DEBUG_MSG:checksum fail !!\n\r");
        bootloader_send_nack();
	}
}
 8000c7e:	e004      	b.n	8000c8a <bootloader_handle_getrdp_cmd+0x7a>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n\r");
 8000c80:	4808      	ldr	r0, [pc, #32]	; (8000ca4 <bootloader_handle_getrdp_cmd+0x94>)
 8000c82:	f7ff fecf 	bl	8000a24 <printmsg>
        bootloader_send_nack();
 8000c86:	f000 fabf 	bl	8001208 <bootloader_send_nack>
}
 8000c8a:	bf00      	nop
 8000c8c:	3718      	adds	r7, #24
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	08004640 	.word	0x08004640
 8000c98:	20000110 	.word	0x20000110
 8000c9c:	0800455c 	.word	0x0800455c
 8000ca0:	0800466c 	.word	0x0800466c
 8000ca4:	080045a0 	.word	0x080045a0

08000ca8 <bootloader_handle_go_cmd>:

/* Helper function to handle BL_GO_TO_ADDR command */
void bootloader_handle_go_cmd(uint8_t *pBuffer)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b088      	sub	sp, #32
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
    uint32_t go_address=0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	61fb      	str	r3, [r7, #28]
    uint8_t addr_valid = ADDR_VALID;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	73fb      	strb	r3, [r7, #15]
    uint8_t addr_invalid = ADDR_INVALID;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	73bb      	strb	r3, [r7, #14]

    printmsg("BL_DEBUG_MSG:bootloader_handle_go_cmd\n\r");
 8000cbc:	4828      	ldr	r0, [pc, #160]	; (8000d60 <bootloader_handle_go_cmd+0xb8>)
 8000cbe:	f7ff feb1 	bl	8000a24 <printmsg>

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000cc2:	4b28      	ldr	r3, [pc, #160]	; (8000d64 <bootloader_handle_go_cmd+0xbc>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	61bb      	str	r3, [r7, #24]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000cca:	69bb      	ldr	r3, [r7, #24]
 8000ccc:	3b04      	subs	r3, #4
 8000cce:	4a25      	ldr	r2, [pc, #148]	; (8000d64 <bootloader_handle_go_cmd+0xbc>)
 8000cd0:	4413      	add	r3, r2
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	617b      	str	r3, [r7, #20]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000cd6:	69bb      	ldr	r3, [r7, #24]
 8000cd8:	3b04      	subs	r3, #4
 8000cda:	697a      	ldr	r2, [r7, #20]
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4821      	ldr	r0, [pc, #132]	; (8000d64 <bootloader_handle_go_cmd+0xbc>)
 8000ce0:	f000 fa5e 	bl	80011a0 <bootloader_verify_crc>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d130      	bne.n	8000d4c <bootloader_handle_go_cmd+0xa4>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n\r");
 8000cea:	481f      	ldr	r0, [pc, #124]	; (8000d68 <bootloader_handle_go_cmd+0xc0>)
 8000cec:	f7ff fe9a 	bl	8000a24 <printmsg>

        bootloader_send_ack(pBuffer[0],1);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	2101      	movs	r1, #1
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f000 fa38 	bl	800116c <bootloader_send_ack>

        //extract the go address
        go_address = *((uint32_t *)&bl_rx_buffer[2] );
 8000cfc:	4b1b      	ldr	r3, [pc, #108]	; (8000d6c <bootloader_handle_go_cmd+0xc4>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	61fb      	str	r3, [r7, #28]
        printmsg("BL_DEBUG_MSG:GO addr: %#x\n\r",go_address);
 8000d02:	69f9      	ldr	r1, [r7, #28]
 8000d04:	481a      	ldr	r0, [pc, #104]	; (8000d70 <bootloader_handle_go_cmd+0xc8>)
 8000d06:	f7ff fe8d 	bl	8000a24 <printmsg>

        if( verify_address(go_address) == ADDR_VALID )
 8000d0a:	69f8      	ldr	r0, [r7, #28]
 8000d0c:	f000 fad0 	bl	80012b0 <verify_address>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d110      	bne.n	8000d38 <bootloader_handle_go_cmd+0x90>
        {
            //tell host that address is fine
            bootloader_uart_write_data(&addr_valid,1);
 8000d16:	f107 030f 	add.w	r3, r7, #15
 8000d1a:	2101      	movs	r1, #1
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f000 fa8d 	bl	800123c <bootloader_uart_write_data>
            Its not the duty of bootloader. so just trust and jump */

            /* Not doing the below line will result in hardfault exception for ARM cortex M */
            //watch : https://www.youtube.com/watch?v=VX_12SjnNhY

            go_address+=1; //make T bit =1
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	3301      	adds	r3, #1
 8000d26:	61fb      	str	r3, [r7, #28]

            void (*lets_jump)(void) = (void *)go_address;
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	613b      	str	r3, [r7, #16]

            printmsg("BL_DEBUG_MSG: jumping to go address! \n");
 8000d2c:	4811      	ldr	r0, [pc, #68]	; (8000d74 <bootloader_handle_go_cmd+0xcc>)
 8000d2e:	f7ff fe79 	bl	8000a24 <printmsg>

            lets_jump();
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	4798      	blx	r3
	}else
	{
        printmsg("BL_DEBUG_MSG:checksum fail !!\n\r");
        bootloader_send_nack();
	}
}
 8000d36:	e00e      	b.n	8000d56 <bootloader_handle_go_cmd+0xae>
            printmsg("BL_DEBUG_MSG:GO addr invalid ! \n\r");
 8000d38:	480f      	ldr	r0, [pc, #60]	; (8000d78 <bootloader_handle_go_cmd+0xd0>)
 8000d3a:	f7ff fe73 	bl	8000a24 <printmsg>
            bootloader_uart_write_data(&addr_invalid,1);
 8000d3e:	f107 030e 	add.w	r3, r7, #14
 8000d42:	2101      	movs	r1, #1
 8000d44:	4618      	mov	r0, r3
 8000d46:	f000 fa79 	bl	800123c <bootloader_uart_write_data>
}
 8000d4a:	e004      	b.n	8000d56 <bootloader_handle_go_cmd+0xae>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n\r");
 8000d4c:	480b      	ldr	r0, [pc, #44]	; (8000d7c <bootloader_handle_go_cmd+0xd4>)
 8000d4e:	f7ff fe69 	bl	8000a24 <printmsg>
        bootloader_send_nack();
 8000d52:	f000 fa59 	bl	8001208 <bootloader_send_nack>
}
 8000d56:	bf00      	nop
 8000d58:	3720      	adds	r7, #32
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	08004690 	.word	0x08004690
 8000d64:	20000110 	.word	0x20000110
 8000d68:	0800455c 	.word	0x0800455c
 8000d6c:	20000112 	.word	0x20000112
 8000d70:	080046b8 	.word	0x080046b8
 8000d74:	080046d4 	.word	0x080046d4
 8000d78:	080046fc 	.word	0x080046fc
 8000d7c:	080045a0 	.word	0x080045a0

08000d80 <bootloader_handle_flash_erase_cmd>:

/* Helper function to handle BL_FLASH_ERASE command */
void bootloader_handle_flash_erase_cmd(uint8_t *pBuffer)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
    uint8_t erase_status = 0x00;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	73fb      	strb	r3, [r7, #15]
    printmsg("BL_DEBUG_MSG:bootloader_handle_flash_erase_cmd\n\r");
 8000d8c:	482a      	ldr	r0, [pc, #168]	; (8000e38 <bootloader_handle_flash_erase_cmd+0xb8>)
 8000d8e:	f7ff fe49 	bl	8000a24 <printmsg>

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000d92:	4b2a      	ldr	r3, [pc, #168]	; (8000e3c <bootloader_handle_flash_erase_cmd+0xbc>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	3301      	adds	r3, #1
 8000d98:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	3b04      	subs	r3, #4
 8000d9e:	4a27      	ldr	r2, [pc, #156]	; (8000e3c <bootloader_handle_flash_erase_cmd+0xbc>)
 8000da0:	4413      	add	r3, r2
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	3b04      	subs	r3, #4
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	4619      	mov	r1, r3
 8000dae:	4823      	ldr	r0, [pc, #140]	; (8000e3c <bootloader_handle_flash_erase_cmd+0xbc>)
 8000db0:	f000 f9f6 	bl	80011a0 <bootloader_verify_crc>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d135      	bne.n	8000e26 <bootloader_handle_flash_erase_cmd+0xa6>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n\r");
 8000dba:	4821      	ldr	r0, [pc, #132]	; (8000e40 <bootloader_handle_flash_erase_cmd+0xc0>)
 8000dbc:	f7ff fe32 	bl	8000a24 <printmsg>
        bootloader_send_ack(pBuffer[0],1);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f000 f9d0 	bl	800116c <bootloader_send_ack>
        printmsg("BL_DEBUG_MSG:initial_sector : %d  no_ofsectors: %d\n\r",pBuffer[2],pBuffer[3]);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3302      	adds	r3, #2
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	3303      	adds	r3, #3
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	461a      	mov	r2, r3
 8000ddc:	4819      	ldr	r0, [pc, #100]	; (8000e44 <bootloader_handle_flash_erase_cmd+0xc4>)
 8000dde:	f7ff fe21 	bl	8000a24 <printmsg>

        HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,1);
 8000de2:	2201      	movs	r2, #1
 8000de4:	2120      	movs	r1, #32
 8000de6:	4818      	ldr	r0, [pc, #96]	; (8000e48 <bootloader_handle_flash_erase_cmd+0xc8>)
 8000de8:	f001 fbf2 	bl	80025d0 <HAL_GPIO_WritePin>
        erase_status = execute_flash_erase(pBuffer[2] , pBuffer[3]);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3302      	adds	r3, #2
 8000df0:	781a      	ldrb	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	3303      	adds	r3, #3
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4610      	mov	r0, r2
 8000dfc:	f000 fa96 	bl	800132c <execute_flash_erase>
 8000e00:	4603      	mov	r3, r0
 8000e02:	73fb      	strb	r3, [r7, #15]
        HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,0);
 8000e04:	2200      	movs	r2, #0
 8000e06:	2120      	movs	r1, #32
 8000e08:	480f      	ldr	r0, [pc, #60]	; (8000e48 <bootloader_handle_flash_erase_cmd+0xc8>)
 8000e0a:	f001 fbe1 	bl	80025d0 <HAL_GPIO_WritePin>

        printmsg("BL_DEBUG_MSG: flash erase status: %#x\n\r",erase_status);
 8000e0e:	7bfb      	ldrb	r3, [r7, #15]
 8000e10:	4619      	mov	r1, r3
 8000e12:	480e      	ldr	r0, [pc, #56]	; (8000e4c <bootloader_handle_flash_erase_cmd+0xcc>)
 8000e14:	f7ff fe06 	bl	8000a24 <printmsg>

        bootloader_uart_write_data(&erase_status,1);
 8000e18:	f107 030f 	add.w	r3, r7, #15
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 fa0c 	bl	800123c <bootloader_uart_write_data>
	}else
	{
        printmsg("BL_DEBUG_MSG:checksum fail !!\n\r");
        bootloader_send_nack();
	}
}
 8000e24:	e004      	b.n	8000e30 <bootloader_handle_flash_erase_cmd+0xb0>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n\r");
 8000e26:	480a      	ldr	r0, [pc, #40]	; (8000e50 <bootloader_handle_flash_erase_cmd+0xd0>)
 8000e28:	f7ff fdfc 	bl	8000a24 <printmsg>
        bootloader_send_nack();
 8000e2c:	f000 f9ec 	bl	8001208 <bootloader_send_nack>
}
 8000e30:	bf00      	nop
 8000e32:	3718      	adds	r7, #24
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	08004720 	.word	0x08004720
 8000e3c:	20000110 	.word	0x20000110
 8000e40:	0800455c 	.word	0x0800455c
 8000e44:	08004754 	.word	0x08004754
 8000e48:	40020000 	.word	0x40020000
 8000e4c:	0800478c 	.word	0x0800478c
 8000e50:	080045a0 	.word	0x080045a0

08000e54 <bootloader_handle_mem_write_cmd>:

/* Helper function to handle BL_MEM_WRITE command */
void bootloader_handle_mem_write_cmd(uint8_t *pBuffer)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b088      	sub	sp, #32
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
	uint8_t addr_valid = ADDR_VALID;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	77fb      	strb	r3, [r7, #31]
	uint8_t write_status = 0x00;
 8000e60:	2300      	movs	r3, #0
 8000e62:	73fb      	strb	r3, [r7, #15]
	uint8_t chksum =0, len=0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	77bb      	strb	r3, [r7, #30]
 8000e68:	2300      	movs	r3, #0
 8000e6a:	777b      	strb	r3, [r7, #29]
	len = pBuffer[0];
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	777b      	strb	r3, [r7, #29]
	uint8_t payload_len = pBuffer[6];
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	799b      	ldrb	r3, [r3, #6]
 8000e76:	773b      	strb	r3, [r7, #28]

	uint32_t mem_address = *((uint32_t *) ( &pBuffer[2]) );
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000e7e:	61bb      	str	r3, [r7, #24]

	chksum = pBuffer[len];
 8000e80:	7f7b      	ldrb	r3, [r7, #29]
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	4413      	add	r3, r2
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	77bb      	strb	r3, [r7, #30]

    printmsg("BL_DEBUG_MSG:bootloader_handle_mem_write_cmd\n");
 8000e8a:	4832      	ldr	r0, [pc, #200]	; (8000f54 <bootloader_handle_mem_write_cmd+0x100>)
 8000e8c:	f7ff fdca 	bl	8000a24 <printmsg>

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000e90:	4b31      	ldr	r3, [pc, #196]	; (8000f58 <bootloader_handle_mem_write_cmd+0x104>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	3301      	adds	r3, #1
 8000e96:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	3b04      	subs	r3, #4
 8000e9c:	4a2e      	ldr	r2, [pc, #184]	; (8000f58 <bootloader_handle_mem_write_cmd+0x104>)
 8000e9e:	4413      	add	r3, r2
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	613b      	str	r3, [r7, #16]


	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	3b04      	subs	r3, #4
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	4619      	mov	r1, r3
 8000eac:	482a      	ldr	r0, [pc, #168]	; (8000f58 <bootloader_handle_mem_write_cmd+0x104>)
 8000eae:	f000 f977 	bl	80011a0 <bootloader_verify_crc>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d144      	bne.n	8000f42 <bootloader_handle_mem_write_cmd+0xee>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n\r");
 8000eb8:	4828      	ldr	r0, [pc, #160]	; (8000f5c <bootloader_handle_mem_write_cmd+0x108>)
 8000eba:	f7ff fdb3 	bl	8000a24 <printmsg>

        bootloader_send_ack(pBuffer[0],1);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f000 f951 	bl	800116c <bootloader_send_ack>

        printmsg("BL_DEBUG_MSG: mem write address : %#x\n\r",mem_address);
 8000eca:	69b9      	ldr	r1, [r7, #24]
 8000ecc:	4824      	ldr	r0, [pc, #144]	; (8000f60 <bootloader_handle_mem_write_cmd+0x10c>)
 8000ece:	f7ff fda9 	bl	8000a24 <printmsg>

		if( verify_address(mem_address) == ADDR_VALID )
 8000ed2:	69b8      	ldr	r0, [r7, #24]
 8000ed4:	f000 f9ec 	bl	80012b0 <verify_address>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d125      	bne.n	8000f2a <bootloader_handle_mem_write_cmd+0xd6>
		{

            printmsg("BL_DEBUG_MSG: valid mem write address\n\r");
 8000ede:	4821      	ldr	r0, [pc, #132]	; (8000f64 <bootloader_handle_mem_write_cmd+0x110>)
 8000ee0:	f7ff fda0 	bl	8000a24 <printmsg>

            //glow the led to indicate bootloader is currently writing to memory
            HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	2120      	movs	r1, #32
 8000ee8:	481f      	ldr	r0, [pc, #124]	; (8000f68 <bootloader_handle_mem_write_cmd+0x114>)
 8000eea:	f001 fb71 	bl	80025d0 <HAL_GPIO_WritePin>

            //execute mem write
            write_status = execute_mem_write(&pBuffer[7],mem_address, payload_len);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	3307      	adds	r3, #7
 8000ef2:	7f3a      	ldrb	r2, [r7, #28]
 8000ef4:	69b9      	ldr	r1, [r7, #24]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 fa5f 	bl	80013ba <execute_mem_write>
 8000efc:	4603      	mov	r3, r0
 8000efe:	73fb      	strb	r3, [r7, #15]
            HAL_UART_Transmit(D_UART, &pBuffer[7], payload_len, HAL_MAX_DELAY);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	1dd9      	adds	r1, r3, #7
 8000f04:	7f3b      	ldrb	r3, [r7, #28]
 8000f06:	b29a      	uxth	r2, r3
 8000f08:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0c:	4817      	ldr	r0, [pc, #92]	; (8000f6c <bootloader_handle_mem_write_cmd+0x118>)
 8000f0e:	f002 f9ae 	bl	800326e <HAL_UART_Transmit>
            //turn off the led to indicate memory write is over
            HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2120      	movs	r1, #32
 8000f16:	4814      	ldr	r0, [pc, #80]	; (8000f68 <bootloader_handle_mem_write_cmd+0x114>)
 8000f18:	f001 fb5a 	bl	80025d0 <HAL_GPIO_WritePin>

            //inform host about the status
            bootloader_uart_write_data(&write_status,1);
 8000f1c:	f107 030f 	add.w	r3, r7, #15
 8000f20:	2101      	movs	r1, #1
 8000f22:	4618      	mov	r0, r3
 8000f24:	f000 f98a 	bl	800123c <bootloader_uart_write_data>
	}else
	{
        printmsg("BL_DEBUG_MSG:checksum fail !!\n\r");
        bootloader_send_nack();
	}
}
 8000f28:	e010      	b.n	8000f4c <bootloader_handle_mem_write_cmd+0xf8>
            printmsg("BL_DEBUG_MSG: invalid mem write address\n\r");
 8000f2a:	4811      	ldr	r0, [pc, #68]	; (8000f70 <bootloader_handle_mem_write_cmd+0x11c>)
 8000f2c:	f7ff fd7a 	bl	8000a24 <printmsg>
            write_status = ADDR_INVALID;
 8000f30:	2301      	movs	r3, #1
 8000f32:	73fb      	strb	r3, [r7, #15]
            bootloader_uart_write_data(&write_status,1);
 8000f34:	f107 030f 	add.w	r3, r7, #15
 8000f38:	2101      	movs	r1, #1
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f000 f97e 	bl	800123c <bootloader_uart_write_data>
}
 8000f40:	e004      	b.n	8000f4c <bootloader_handle_mem_write_cmd+0xf8>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n\r");
 8000f42:	480c      	ldr	r0, [pc, #48]	; (8000f74 <bootloader_handle_mem_write_cmd+0x120>)
 8000f44:	f7ff fd6e 	bl	8000a24 <printmsg>
        bootloader_send_nack();
 8000f48:	f000 f95e 	bl	8001208 <bootloader_send_nack>
}
 8000f4c:	bf00      	nop
 8000f4e:	3720      	adds	r7, #32
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	080047b4 	.word	0x080047b4
 8000f58:	20000110 	.word	0x20000110
 8000f5c:	0800455c 	.word	0x0800455c
 8000f60:	080047e4 	.word	0x080047e4
 8000f64:	0800480c 	.word	0x0800480c
 8000f68:	40020000 	.word	0x40020000
 8000f6c:	200000cc 	.word	0x200000cc
 8000f70:	08004834 	.word	0x08004834
 8000f74:	080045a0 	.word	0x080045a0

08000f78 <bootloader_handle_en_rw_protect>:

/* Helper function to handle BL_ENDIS_RW_PROTECT command */
void bootloader_handle_en_rw_protect(uint8_t *pBuffer)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x00;
 8000f80:	2300      	movs	r3, #0
 8000f82:	73fb      	strb	r3, [r7, #15]
    printmsg("BL_DEBUG_MSG:bootloader_handle_endis_rw_protect\n");
 8000f84:	4820      	ldr	r0, [pc, #128]	; (8001008 <bootloader_handle_en_rw_protect+0x90>)
 8000f86:	f7ff fd4d 	bl	8000a24 <printmsg>

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000f8a:	4b20      	ldr	r3, [pc, #128]	; (800100c <bootloader_handle_en_rw_protect+0x94>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	3b04      	subs	r3, #4
 8000f96:	4a1d      	ldr	r2, [pc, #116]	; (800100c <bootloader_handle_en_rw_protect+0x94>)
 8000f98:	4413      	add	r3, r2
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	3b04      	subs	r3, #4
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4819      	ldr	r0, [pc, #100]	; (800100c <bootloader_handle_en_rw_protect+0x94>)
 8000fa8:	f000 f8fa 	bl	80011a0 <bootloader_verify_crc>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d120      	bne.n	8000ff4 <bootloader_handle_en_rw_protect+0x7c>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000fb2:	4817      	ldr	r0, [pc, #92]	; (8001010 <bootloader_handle_en_rw_protect+0x98>)
 8000fb4:	f7ff fd36 	bl	8000a24 <printmsg>
        bootloader_send_ack(pBuffer[0],1);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f000 f8d4 	bl	800116c <bootloader_send_ack>

        status = configure_flash_sector_rw_protection(pBuffer[2] , pBuffer[3],0);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3302      	adds	r3, #2
 8000fc8:	7818      	ldrb	r0, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	3303      	adds	r3, #3
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	f000 fa1e 	bl	8001414 <configure_flash_sector_rw_protection>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	73fb      	strb	r3, [r7, #15]

        printmsg("BL_DEBUG_MSG: flash erase status: %#x\n",status);
 8000fdc:	7bfb      	ldrb	r3, [r7, #15]
 8000fde:	4619      	mov	r1, r3
 8000fe0:	480c      	ldr	r0, [pc, #48]	; (8001014 <bootloader_handle_en_rw_protect+0x9c>)
 8000fe2:	f7ff fd1f 	bl	8000a24 <printmsg>

        bootloader_uart_write_data(&status,1);
 8000fe6:	f107 030f 	add.w	r3, r7, #15
 8000fea:	2101      	movs	r1, #1
 8000fec:	4618      	mov	r0, r3
 8000fee:	f000 f925 	bl	800123c <bootloader_uart_write_data>
	}else
	{
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
	}
}
 8000ff2:	e004      	b.n	8000ffe <bootloader_handle_en_rw_protect+0x86>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000ff4:	4808      	ldr	r0, [pc, #32]	; (8001018 <bootloader_handle_en_rw_protect+0xa0>)
 8000ff6:	f7ff fd15 	bl	8000a24 <printmsg>
        bootloader_send_nack();
 8000ffa:	f000 f905 	bl	8001208 <bootloader_send_nack>
}
 8000ffe:	bf00      	nop
 8001000:	3718      	adds	r7, #24
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	08004860 	.word	0x08004860
 800100c:	20000110 	.word	0x20000110
 8001010:	08004894 	.word	0x08004894
 8001014:	080048b8 	.word	0x080048b8
 8001018:	080048e0 	.word	0x080048e0

0800101c <bootloader_handle_dis_rw_protect>:

/*Helper function to handle BL_EN_RW_PROTECT  command */
void bootloader_handle_dis_rw_protect(uint8_t *pBuffer)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x00;
 8001024:	2300      	movs	r3, #0
 8001026:	73fb      	strb	r3, [r7, #15]
    printmsg("BL_DEBUG_MSG:bootloader_handle_dis_rw_protect\n");
 8001028:	481d      	ldr	r0, [pc, #116]	; (80010a0 <bootloader_handle_dis_rw_protect+0x84>)
 800102a:	f7ff fcfb 	bl	8000a24 <printmsg>

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 800102e:	4b1d      	ldr	r3, [pc, #116]	; (80010a4 <bootloader_handle_dis_rw_protect+0x88>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	3301      	adds	r3, #1
 8001034:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	3b04      	subs	r3, #4
 800103a:	4a1a      	ldr	r2, [pc, #104]	; (80010a4 <bootloader_handle_dis_rw_protect+0x88>)
 800103c:	4413      	add	r3, r2
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	3b04      	subs	r3, #4
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	4619      	mov	r1, r3
 800104a:	4816      	ldr	r0, [pc, #88]	; (80010a4 <bootloader_handle_dis_rw_protect+0x88>)
 800104c:	f000 f8a8 	bl	80011a0 <bootloader_verify_crc>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d11b      	bne.n	800108e <bootloader_handle_dis_rw_protect+0x72>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8001056:	4814      	ldr	r0, [pc, #80]	; (80010a8 <bootloader_handle_dis_rw_protect+0x8c>)
 8001058:	f7ff fce4 	bl	8000a24 <printmsg>
        bootloader_send_ack(pBuffer[0],1);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2101      	movs	r1, #1
 8001062:	4618      	mov	r0, r3
 8001064:	f000 f882 	bl	800116c <bootloader_send_ack>

        status = configure_flash_sector_rw_protection(0,0,1);
 8001068:	2201      	movs	r2, #1
 800106a:	2100      	movs	r1, #0
 800106c:	2000      	movs	r0, #0
 800106e:	f000 f9d1 	bl	8001414 <configure_flash_sector_rw_protection>
 8001072:	4603      	mov	r3, r0
 8001074:	73fb      	strb	r3, [r7, #15]

        printmsg("BL_DEBUG_MSG: flash erase status: %#x\n",status);
 8001076:	7bfb      	ldrb	r3, [r7, #15]
 8001078:	4619      	mov	r1, r3
 800107a:	480c      	ldr	r0, [pc, #48]	; (80010ac <bootloader_handle_dis_rw_protect+0x90>)
 800107c:	f7ff fcd2 	bl	8000a24 <printmsg>

        bootloader_uart_write_data(&status,1);
 8001080:	f107 030f 	add.w	r3, r7, #15
 8001084:	2101      	movs	r1, #1
 8001086:	4618      	mov	r0, r3
 8001088:	f000 f8d8 	bl	800123c <bootloader_uart_write_data>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
	}


}
 800108c:	e004      	b.n	8001098 <bootloader_handle_dis_rw_protect+0x7c>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 800108e:	4808      	ldr	r0, [pc, #32]	; (80010b0 <bootloader_handle_dis_rw_protect+0x94>)
 8001090:	f7ff fcc8 	bl	8000a24 <printmsg>
        bootloader_send_nack();
 8001094:	f000 f8b8 	bl	8001208 <bootloader_send_nack>
}
 8001098:	bf00      	nop
 800109a:	3718      	adds	r7, #24
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	08004900 	.word	0x08004900
 80010a4:	20000110 	.word	0x20000110
 80010a8:	08004894 	.word	0x08004894
 80010ac:	080048b8 	.word	0x080048b8
 80010b0:	080048e0 	.word	0x080048e0

080010b4 <bootloader_handle_mem_read>:

/* Helper function to handle BL_MEM_READ command */
void bootloader_handle_mem_read(uint8_t *pBuffer)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]

}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <bootloader_handle_read_sector_protection_status>:

/* Helper function to handle BL_READ_SECTOR_STATUS command */
void bootloader_handle_read_sector_protection_status(uint8_t *pBuffer)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
	 uint16_t status;
	printmsg("BL_DEBUG_MSG:bootloader_handle_read_sector_protection_status\n");
 80010d0:	481c      	ldr	r0, [pc, #112]	; (8001144 <bootloader_handle_read_sector_protection_status+0x7c>)
 80010d2:	f7ff fca7 	bl	8000a24 <printmsg>

   //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 80010d6:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <bootloader_handle_read_sector_protection_status+0x80>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	3301      	adds	r3, #1
 80010dc:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	3b04      	subs	r3, #4
 80010e2:	4a19      	ldr	r2, [pc, #100]	; (8001148 <bootloader_handle_read_sector_protection_status+0x80>)
 80010e4:	4413      	add	r3, r2
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	3b04      	subs	r3, #4
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	4619      	mov	r1, r3
 80010f2:	4815      	ldr	r0, [pc, #84]	; (8001148 <bootloader_handle_read_sector_protection_status+0x80>)
 80010f4:	f000 f854 	bl	80011a0 <bootloader_verify_crc>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d118      	bne.n	8001130 <bootloader_handle_read_sector_protection_status+0x68>
	{
       printmsg("BL_DEBUG_MSG:checksum success !!\n");
 80010fe:	4813      	ldr	r0, [pc, #76]	; (800114c <bootloader_handle_read_sector_protection_status+0x84>)
 8001100:	f7ff fc90 	bl	8000a24 <printmsg>
       bootloader_send_ack(pBuffer[0],2);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2102      	movs	r1, #2
 800110a:	4618      	mov	r0, r3
 800110c:	f000 f82e 	bl	800116c <bootloader_send_ack>
       status=read_OB_rw_protection_status();
 8001110:	f000 fa16 	bl	8001540 <read_OB_rw_protection_status>
 8001114:	4603      	mov	r3, r0
 8001116:	81fb      	strh	r3, [r7, #14]
       printmsg("BL_DEBUG_MSG: nWRP status: %#x\n",status);
 8001118:	89fb      	ldrh	r3, [r7, #14]
 800111a:	4619      	mov	r1, r3
 800111c:	480c      	ldr	r0, [pc, #48]	; (8001150 <bootloader_handle_read_sector_protection_status+0x88>)
 800111e:	f7ff fc81 	bl	8000a24 <printmsg>
       bootloader_uart_write_data((uint8_t*)&status,2);
 8001122:	f107 030e 	add.w	r3, r7, #14
 8001126:	2102      	movs	r1, #2
 8001128:	4618      	mov	r0, r3
 800112a:	f000 f887 	bl	800123c <bootloader_uart_write_data>
	}else
	{
       printmsg("BL_DEBUG_MSG:checksum fail !!\n");
       bootloader_send_nack();
	}
}
 800112e:	e004      	b.n	800113a <bootloader_handle_read_sector_protection_status+0x72>
       printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8001130:	4808      	ldr	r0, [pc, #32]	; (8001154 <bootloader_handle_read_sector_protection_status+0x8c>)
 8001132:	f7ff fc77 	bl	8000a24 <printmsg>
       bootloader_send_nack();
 8001136:	f000 f867 	bl	8001208 <bootloader_send_nack>
}
 800113a:	bf00      	nop
 800113c:	3718      	adds	r7, #24
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	08004930 	.word	0x08004930
 8001148:	20000110 	.word	0x20000110
 800114c:	08004894 	.word	0x08004894
 8001150:	08004970 	.word	0x08004970
 8001154:	080048e0 	.word	0x080048e0

08001158 <bootloader_handle_read_otp>:

/* Helper function to handle BL_OTP_READ command */
void bootloader_handle_read_otp(uint8_t *pBuffer)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]

}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <bootloader_send_ack>:

void bootloader_send_ack(uint8_t command_code, uint8_t follow_len)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	460a      	mov	r2, r1
 8001176:	71fb      	strb	r3, [r7, #7]
 8001178:	4613      	mov	r3, r2
 800117a:	71bb      	strb	r3, [r7, #6]
	//here we send 2 byte.. first byte is ack and the second byte is len value
	uint8_t ack_buf[2];
	ack_buf[0] = BL_ACK;
 800117c:	23a5      	movs	r3, #165	; 0xa5
 800117e:	733b      	strb	r3, [r7, #12]
	ack_buf[1] = follow_len;
 8001180:	79bb      	ldrb	r3, [r7, #6]
 8001182:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(C_UART,ack_buf,2,HAL_MAX_DELAY);
 8001184:	f107 010c 	add.w	r1, r7, #12
 8001188:	f04f 33ff 	mov.w	r3, #4294967295
 800118c:	2202      	movs	r2, #2
 800118e:	4803      	ldr	r0, [pc, #12]	; (800119c <bootloader_send_ack+0x30>)
 8001190:	f002 f86d 	bl	800326e <HAL_UART_Transmit>
}
 8001194:	bf00      	nop
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20000088 	.word	0x20000088

080011a0 <bootloader_verify_crc>:

//This verifies the CRC of the given buffer in pData
uint8_t bootloader_verify_crc(uint8_t *pData, uint32_t len, uint32_t crc_host)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b088      	sub	sp, #32
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
	uint32_t uwCRCValue = 0xff;
 80011ac:	23ff      	movs	r3, #255	; 0xff
 80011ae:	61fb      	str	r3, [r7, #28]

	for (uint32_t i=0; i<len ; i++)
 80011b0:	2300      	movs	r3, #0
 80011b2:	61bb      	str	r3, [r7, #24]
 80011b4:	e00f      	b.n	80011d6 <bootloader_verify_crc+0x36>
	{
		uint32_t i_data = pData[i];
 80011b6:	68fa      	ldr	r2, [r7, #12]
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	4413      	add	r3, r2
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	617b      	str	r3, [r7, #20]
		uwCRCValue = HAL_CRC_Accumulate(&hcrc, &i_data, 1);
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	2201      	movs	r2, #1
 80011c6:	4619      	mov	r1, r3
 80011c8:	480e      	ldr	r0, [pc, #56]	; (8001204 <bootloader_verify_crc+0x64>)
 80011ca:	f000 fca6 	bl	8001b1a <HAL_CRC_Accumulate>
 80011ce:	61f8      	str	r0, [r7, #28]
	for (uint32_t i=0; i<len ; i++)
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	3301      	adds	r3, #1
 80011d4:	61bb      	str	r3, [r7, #24]
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	429a      	cmp	r2, r3
 80011dc:	d3eb      	bcc.n	80011b6 <bootloader_verify_crc+0x16>
	}

	 /* Reset CRC Calculation Unit */
	__HAL_CRC_DR_RESET(&hcrc);
 80011de:	4b09      	ldr	r3, [pc, #36]	; (8001204 <bootloader_verify_crc+0x64>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	689a      	ldr	r2, [r3, #8]
 80011e4:	4b07      	ldr	r3, [pc, #28]	; (8001204 <bootloader_verify_crc+0x64>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f042 0201 	orr.w	r2, r2, #1
 80011ec:	609a      	str	r2, [r3, #8]

	if (uwCRCValue == crc_host)
 80011ee:	69fa      	ldr	r2, [r7, #28]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d101      	bne.n	80011fa <bootloader_verify_crc+0x5a>
	{
		return VERIFY_CRC_SUCCESS;
 80011f6:	2300      	movs	r3, #0
 80011f8:	e000      	b.n	80011fc <bootloader_verify_crc+0x5c>
	}
	return VERIFY_CRC_FAIL;
 80011fa:	2301      	movs	r3, #1
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3720      	adds	r7, #32
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20000080 	.word	0x20000080

08001208 <bootloader_send_nack>:

void bootloader_send_nack(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
	uint8_t nack = BL_NACK;
 800120e:	237f      	movs	r3, #127	; 0x7f
 8001210:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(C_UART,&nack,1,HAL_MAX_DELAY);
 8001212:	1df9      	adds	r1, r7, #7
 8001214:	f04f 33ff 	mov.w	r3, #4294967295
 8001218:	2201      	movs	r2, #1
 800121a:	4803      	ldr	r0, [pc, #12]	; (8001228 <bootloader_send_nack+0x20>)
 800121c:	f002 f827 	bl	800326e <HAL_UART_Transmit>
}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	20000088 	.word	0x20000088

0800122c <get_bootloader_version>:

uint8_t get_bootloader_version(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
	return (uint8_t)BL_VERSION;
 8001230:	2320      	movs	r3, #32
}
 8001232:	4618      	mov	r0, r3
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <bootloader_uart_write_data>:

/* This function writes data in to C_UART */
void bootloader_uart_write_data(uint8_t *pBuffer, uint32_t len)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
	//you can replace the below ST's USART driver API call with your MCUs driver
	HAL_UART_Transmit(C_UART,pBuffer,len,HAL_MAX_DELAY);
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	b29a      	uxth	r2, r3
 800124a:	f04f 33ff 	mov.w	r3, #4294967295
 800124e:	6879      	ldr	r1, [r7, #4]
 8001250:	4803      	ldr	r0, [pc, #12]	; (8001260 <bootloader_uart_write_data+0x24>)
 8001252:	f002 f80c 	bl	800326e <HAL_UART_Transmit>
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20000088 	.word	0x20000088

08001264 <get_mcu_chip_id>:

//Read the chip identifier or device Identifier
uint16_t get_mcu_chip_id(void)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
	and the die revision. It is part of the DBG_MCU component and is mapped on the
	external PPB bus (see Section 33.16 on page 1304). This code is accessible using the
	JTAG debug pCat.2ort (4 to 5 pins) or the SW debug port (two pins) or by the user software.
	It is even accessible while the MCU is under system reset. */
	uint16_t cid;
	cid = (uint16_t)(DBGMCU->IDCODE) & 0x0FFF;
 800126a:	4b06      	ldr	r3, [pc, #24]	; (8001284 <get_mcu_chip_id+0x20>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	b29b      	uxth	r3, r3
 8001270:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001274:	80fb      	strh	r3, [r7, #6]
	return  cid;
 8001276:	88fb      	ldrh	r3, [r7, #6]

}
 8001278:	4618      	mov	r0, r3
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	e0042000 	.word	0xe0042000

08001288 <get_flash_rdp_level>:

/*This function reads the RDP ( Read protection option byte) value
 *For more info refer "Table 9. Description of the option bytes" in stm32f446xx RM
 */
uint8_t get_flash_rdp_level(void)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0

	uint8_t rdp_status=0;
 800128e:	2300      	movs	r3, #0
 8001290:	71fb      	strb	r3, [r7, #7]
	FLASH_OBProgramInitTypeDef  ob_handle;
	HAL_FLASHEx_OBGetConfig(&ob_handle);
	rdp_status = (uint8_t)ob_handle.RDPLevel;
#else

	 volatile uint32_t *pOB_addr = (uint32_t*) 0x1FFFC000;
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <get_flash_rdp_level+0x24>)
 8001294:	603b      	str	r3, [r7, #0]
	 rdp_status =  (uint8_t)(*pOB_addr >> 8) ;
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	0a1b      	lsrs	r3, r3, #8
 800129c:	71fb      	strb	r3, [r7, #7]
#endif

	return rdp_status;
 800129e:	79fb      	ldrb	r3, [r7, #7]

}
 80012a0:	4618      	mov	r0, r3
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	1fffc000 	.word	0x1fffc000

080012b0 <verify_address>:

//verify the address sent by the host .
uint8_t verify_address(uint32_t go_address)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
	//can we jump to backup sram memory ? yes
	//can we jump to peripheral memory ? its possible , but dont allow. so no
	//can we jump to external memory ? yes.

//incomplete -poorly written .. optimize it
	if ( go_address >= SRAM1_BASE && go_address <= SRAM1_END)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80012be:	d305      	bcc.n	80012cc <verify_address+0x1c>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4a15      	ldr	r2, [pc, #84]	; (8001318 <verify_address+0x68>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d801      	bhi.n	80012cc <verify_address+0x1c>
	{
		return ADDR_VALID;
 80012c8:	2300      	movs	r3, #0
 80012ca:	e01e      	b.n	800130a <verify_address+0x5a>
	}
	else if ( go_address >= SRAM2_BASE && go_address <= SRAM2_END)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4a12      	ldr	r2, [pc, #72]	; (8001318 <verify_address+0x68>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d305      	bcc.n	80012e0 <verify_address+0x30>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4a11      	ldr	r2, [pc, #68]	; (800131c <verify_address+0x6c>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d801      	bhi.n	80012e0 <verify_address+0x30>
	{
		return ADDR_VALID;
 80012dc:	2300      	movs	r3, #0
 80012de:	e014      	b.n	800130a <verify_address+0x5a>
	}
	else if ( go_address >= FLASH_BASE && go_address <= FLASH_END)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80012e6:	d305      	bcc.n	80012f4 <verify_address+0x44>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4a0d      	ldr	r2, [pc, #52]	; (8001320 <verify_address+0x70>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d801      	bhi.n	80012f4 <verify_address+0x44>
	{
		return ADDR_VALID;
 80012f0:	2300      	movs	r3, #0
 80012f2:	e00a      	b.n	800130a <verify_address+0x5a>
	}
	else if ( go_address >= BKPSRAM_BASE && go_address <= BKPSRAM_END)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4a0b      	ldr	r2, [pc, #44]	; (8001324 <verify_address+0x74>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d305      	bcc.n	8001308 <verify_address+0x58>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4a0a      	ldr	r2, [pc, #40]	; (8001328 <verify_address+0x78>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d801      	bhi.n	8001308 <verify_address+0x58>
	{
		return ADDR_VALID;
 8001304:	2300      	movs	r3, #0
 8001306:	e000      	b.n	800130a <verify_address+0x5a>
	}
	else
		return ADDR_INVALID;
 8001308:	2301      	movs	r3, #1
}
 800130a:	4618      	mov	r0, r3
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	2001c000 	.word	0x2001c000
 800131c:	20020000 	.word	0x20020000
 8001320:	0807ffff 	.word	0x0807ffff
 8001324:	40024000 	.word	0x40024000
 8001328:	40025000 	.word	0x40025000

0800132c <execute_flash_erase>:

uint8_t execute_flash_erase(uint8_t sector_number , uint8_t number_of_sector)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08a      	sub	sp, #40	; 0x28
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	460a      	mov	r2, r1
 8001336:	71fb      	strb	r3, [r7, #7]
 8001338:	4613      	mov	r3, r2
 800133a:	71bb      	strb	r3, [r7, #6]
	FLASH_EraseInitTypeDef flashErase_handle;
	uint32_t sectorError;
	HAL_StatusTypeDef status;


	if( number_of_sector > 8 )
 800133c:	79bb      	ldrb	r3, [r7, #6]
 800133e:	2b08      	cmp	r3, #8
 8001340:	d901      	bls.n	8001346 <execute_flash_erase+0x1a>
		return INVALID_SECTOR;
 8001342:	2304      	movs	r3, #4
 8001344:	e035      	b.n	80013b2 <execute_flash_erase+0x86>

	if( (sector_number == 0xff ) || (sector_number <= 7) )
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	2bff      	cmp	r3, #255	; 0xff
 800134a:	d002      	beq.n	8001352 <execute_flash_erase+0x26>
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	2b07      	cmp	r3, #7
 8001350:	d82e      	bhi.n	80013b0 <execute_flash_erase+0x84>
	{
		if(sector_number == (uint8_t) 0xff)
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	2bff      	cmp	r3, #255	; 0xff
 8001356:	d102      	bne.n	800135e <execute_flash_erase+0x32>
		{
			flashErase_handle.TypeErase = FLASH_TYPEERASE_MASSERASE;
 8001358:	2301      	movs	r3, #1
 800135a:	613b      	str	r3, [r7, #16]
 800135c:	e012      	b.n	8001384 <execute_flash_erase+0x58>
		}else
		{
		    /*Here we are just calculating how many sectors needs to erased */
			uint8_t remanining_sector = 8 - sector_number;
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	f1c3 0308 	rsb	r3, r3, #8
 8001364:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
           if( number_of_sector > remanining_sector)
 8001368:	79ba      	ldrb	r2, [r7, #6]
 800136a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800136e:	429a      	cmp	r2, r3
 8001370:	d902      	bls.n	8001378 <execute_flash_erase+0x4c>
           {
           	number_of_sector = remanining_sector;
 8001372:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001376:	71bb      	strb	r3, [r7, #6]
           }
			flashErase_handle.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001378:	2300      	movs	r3, #0
 800137a:	613b      	str	r3, [r7, #16]
			flashErase_handle.Sector = sector_number; // this is the initial sector
 800137c:	79fb      	ldrb	r3, [r7, #7]
 800137e:	61bb      	str	r3, [r7, #24]
			flashErase_handle.NbSectors = number_of_sector;
 8001380:	79bb      	ldrb	r3, [r7, #6]
 8001382:	61fb      	str	r3, [r7, #28]
		}
		flashErase_handle.Banks = FLASH_BANK_1;
 8001384:	2301      	movs	r3, #1
 8001386:	617b      	str	r3, [r7, #20]

		/*Get access to touch the flash registers */
		HAL_FLASH_Unlock();
 8001388:	f000 fc46 	bl	8001c18 <HAL_FLASH_Unlock>
		flashErase_handle.VoltageRange = FLASH_VOLTAGE_RANGE_3;  // our mcu will work on this voltage range
 800138c:	2302      	movs	r3, #2
 800138e:	623b      	str	r3, [r7, #32]
		status = (uint8_t) HAL_FLASHEx_Erase(&flashErase_handle, &sectorError);
 8001390:	f107 020c 	add.w	r2, r7, #12
 8001394:	f107 0310 	add.w	r3, r7, #16
 8001398:	4611      	mov	r1, r2
 800139a:	4618      	mov	r0, r3
 800139c:	f000 fdda 	bl	8001f54 <HAL_FLASHEx_Erase>
 80013a0:	4603      	mov	r3, r0
 80013a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		HAL_FLASH_Lock();
 80013a6:	f000 fc59 	bl	8001c5c <HAL_FLASH_Lock>

		return status;
 80013aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80013ae:	e000      	b.n	80013b2 <execute_flash_erase+0x86>
	}


	return INVALID_SECTOR;
 80013b0:	2304      	movs	r3, #4
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3728      	adds	r7, #40	; 0x28
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <execute_mem_write>:

/*This function writes the contents of pBuffer to  "mem_address" byte by byte */
//Note1 : Currently this function supports writing to Flash only .
//Note2 : This functions does not check whether "mem_address" is a valid address of the flash range.
uint8_t execute_mem_write(uint8_t *pBuffer, uint32_t mem_address, uint32_t len)
{
 80013ba:	b5b0      	push	{r4, r5, r7, lr}
 80013bc:	b086      	sub	sp, #24
 80013be:	af00      	add	r7, sp, #0
 80013c0:	60f8      	str	r0, [r7, #12]
 80013c2:	60b9      	str	r1, [r7, #8]
 80013c4:	607a      	str	r2, [r7, #4]
    uint8_t status=HAL_OK;
 80013c6:	2300      	movs	r3, #0
 80013c8:	75fb      	strb	r3, [r7, #23]

    //We have to unlock flash module to get control of registers
    HAL_FLASH_Unlock();
 80013ca:	f000 fc25 	bl	8001c18 <HAL_FLASH_Unlock>

    for(uint32_t i = 0 ; i <len ; i++)
 80013ce:	2300      	movs	r3, #0
 80013d0:	613b      	str	r3, [r7, #16]
 80013d2:	e014      	b.n	80013fe <execute_mem_write+0x44>
    {
        //Here we program the flash byte by byte
        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,mem_address+i,pBuffer[i] );
 80013d4:	68ba      	ldr	r2, [r7, #8]
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	18d1      	adds	r1, r2, r3
 80013da:	68fa      	ldr	r2, [r7, #12]
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	4413      	add	r3, r2
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	2200      	movs	r2, #0
 80013e6:	461c      	mov	r4, r3
 80013e8:	4615      	mov	r5, r2
 80013ea:	4622      	mov	r2, r4
 80013ec:	462b      	mov	r3, r5
 80013ee:	2000      	movs	r0, #0
 80013f0:	f000 fbbe 	bl	8001b70 <HAL_FLASH_Program>
 80013f4:	4603      	mov	r3, r0
 80013f6:	75fb      	strb	r3, [r7, #23]
    for(uint32_t i = 0 ; i <len ; i++)
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	3301      	adds	r3, #1
 80013fc:	613b      	str	r3, [r7, #16]
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	429a      	cmp	r2, r3
 8001404:	d3e6      	bcc.n	80013d4 <execute_mem_write+0x1a>
    }

    HAL_FLASH_Lock();
 8001406:	f000 fc29 	bl	8001c5c <HAL_FLASH_Lock>

    return status;
 800140a:	7dfb      	ldrb	r3, [r7, #23]
}
 800140c:	4618      	mov	r0, r3
 800140e:	3718      	adds	r7, #24
 8001410:	46bd      	mov	sp, r7
 8001412:	bdb0      	pop	{r4, r5, r7, pc}

08001414 <configure_flash_sector_rw_protection>:
2. Write the desired option value in the FLASH_OPTCR register.
3. Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
4. Wait for the BSY bit to be cleared.
*/
uint8_t configure_flash_sector_rw_protection(uint8_t sector_details, uint8_t protection_mode, uint8_t disable)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	71fb      	strb	r3, [r7, #7]
 800141e:	460b      	mov	r3, r1
 8001420:	71bb      	strb	r3, [r7, #6]
 8001422:	4613      	mov	r3, r2
 8001424:	717b      	strb	r3, [r7, #5]
    //protection_mode =1 , means write protect of the user flash sectors
    //protection_mode =2, means read/write protect of the user flash sectors
    //According to RM of stm32f446xx TABLE 9, We have to modify the address 0x1FFF C008 bit 15(SPRMOD)

	 //Flash option control register (OPTCR)
    volatile uint32_t *pOPTCR = (uint32_t*) 0x40023C14;
 8001426:	4b44      	ldr	r3, [pc, #272]	; (8001538 <configure_flash_sector_rw_protection+0x124>)
 8001428:	60fb      	str	r3, [r7, #12]

	  if(disable)
 800142a:	797b      	ldrb	r3, [r7, #5]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d025      	beq.n	800147c <configure_flash_sector_rw_protection+0x68>
		{

			//disable all r/w protection on sectors

			//Option byte configuration unlock
			HAL_FLASH_OB_Unlock();
 8001430:	f000 fc24 	bl	8001c7c <HAL_FLASH_OB_Unlock>

			//wait till no active operation on flash
			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 8001434:	bf00      	nop
 8001436:	4b41      	ldr	r3, [pc, #260]	; (800153c <configure_flash_sector_rw_protection+0x128>)
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1f9      	bne.n	8001436 <configure_flash_sector_rw_protection+0x22>

			//clear the 31st bit (default state)
			//please refer : Flash option control register (FLASH_OPTCR) in RM
			*pOPTCR &= ~(1 << 31);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	601a      	str	r2, [r3, #0]

			//clear the protection : make all bits belonging to sectors as 1
			*pOPTCR |= (0xFF << 16);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f443 027f 	orr.w	r2, r3, #16711680	; 0xff0000
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	601a      	str	r2, [r3, #0]

			//Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
			*pOPTCR |= ( 1 << 1);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f043 0202 	orr.w	r2, r3, #2
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	601a      	str	r2, [r3, #0]

			//wait till no active operation on flash
			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 8001466:	bf00      	nop
 8001468:	4b34      	ldr	r3, [pc, #208]	; (800153c <configure_flash_sector_rw_protection+0x128>)
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d1f9      	bne.n	8001468 <configure_flash_sector_rw_protection+0x54>

			HAL_FLASH_OB_Lock();
 8001474:	f000 fc1e 	bl	8001cb4 <HAL_FLASH_OB_Lock>

			return 0;
 8001478:	2300      	movs	r3, #0
 800147a:	e058      	b.n	800152e <configure_flash_sector_rw_protection+0x11a>

		}

	   if(protection_mode == (uint8_t) 1)
 800147c:	79bb      	ldrb	r3, [r7, #6]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d126      	bne.n	80014d0 <configure_flash_sector_rw_protection+0xbc>
    {
           //we are putting write protection on the sectors encoded in sector_details argument

			//Option byte configuration unlock
			HAL_FLASH_OB_Unlock();
 8001482:	f000 fbfb 	bl	8001c7c <HAL_FLASH_OB_Unlock>

			//wait till no active operation on flash
			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 8001486:	bf00      	nop
 8001488:	4b2c      	ldr	r3, [pc, #176]	; (800153c <configure_flash_sector_rw_protection+0x128>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d1f9      	bne.n	8001488 <configure_flash_sector_rw_protection+0x74>

			//here we are setting just write protection for the sectors
			//clear the 31st bit
			//please refer : Flash option control register (FLASH_OPTCR) in RM
			*pOPTCR &= ~(1 << 31);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	601a      	str	r2, [r3, #0]

			//put write protection on sectors
			*pOPTCR &= ~ (sector_details << 16);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	79fa      	ldrb	r2, [r7, #7]
 80014a6:	0412      	lsls	r2, r2, #16
 80014a8:	43d2      	mvns	r2, r2
 80014aa:	401a      	ands	r2, r3
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	601a      	str	r2, [r3, #0]

			//Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
			*pOPTCR |= ( 1 << 1);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f043 0202 	orr.w	r2, r3, #2
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	601a      	str	r2, [r3, #0]

			//wait till no active operation on flash
			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 80014bc:	bf00      	nop
 80014be:	4b1f      	ldr	r3, [pc, #124]	; (800153c <configure_flash_sector_rw_protection+0x128>)
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1f9      	bne.n	80014be <configure_flash_sector_rw_protection+0xaa>

			HAL_FLASH_OB_Lock();
 80014ca:	f000 fbf3 	bl	8001cb4 <HAL_FLASH_OB_Lock>
 80014ce:	e02d      	b.n	800152c <configure_flash_sector_rw_protection+0x118>
		}

		else if (protection_mode == (uint8_t) 2)
 80014d0:	79bb      	ldrb	r3, [r7, #6]
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d12a      	bne.n	800152c <configure_flash_sector_rw_protection+0x118>
    {
	  	//Option byte configuration unlock
			HAL_FLASH_OB_Unlock();
 80014d6:	f000 fbd1 	bl	8001c7c <HAL_FLASH_OB_Unlock>

			//wait till no active operation on flash
			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 80014da:	bf00      	nop
 80014dc:	4b17      	ldr	r3, [pc, #92]	; (800153c <configure_flash_sector_rw_protection+0x128>)
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d1f9      	bne.n	80014dc <configure_flash_sector_rw_protection+0xc8>

			//here wer are setting read and write protection for the sectors
			//set the 31st bit
			//please refer : Flash option control register (FLASH_OPTCR) in RM
			*pOPTCR |= (1 << 31);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	601a      	str	r2, [r3, #0]

			//put read and write protection on sectors
            *pOPTCR &= ~(0xff << 16);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	601a      	str	r2, [r3, #0]
			*pOPTCR |= (sector_details << 16);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	79fa      	ldrb	r2, [r7, #7]
 8001506:	0412      	lsls	r2, r2, #16
 8001508:	431a      	orrs	r2, r3
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	601a      	str	r2, [r3, #0]

			//Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
			*pOPTCR |= ( 1 << 1);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f043 0202 	orr.w	r2, r3, #2
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	601a      	str	r2, [r3, #0]

			//wait till no active operation on flash
			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 800151a:	bf00      	nop
 800151c:	4b07      	ldr	r3, [pc, #28]	; (800153c <configure_flash_sector_rw_protection+0x128>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d1f9      	bne.n	800151c <configure_flash_sector_rw_protection+0x108>

			HAL_FLASH_OB_Lock();
 8001528:	f000 fbc4 	bl	8001cb4 <HAL_FLASH_OB_Lock>
    }

		return 0;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40023c14 	.word	0x40023c14
 800153c:	40023c00 	.word	0x40023c00

08001540 <read_OB_rw_protection_status>:

uint16_t read_OB_rw_protection_status(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b088      	sub	sp, #32
 8001544:	af00      	add	r7, sp, #0
    //This structure is given by ST Flash driver to hold the OB(Option Byte) contents .
	FLASH_OBProgramInitTypeDef OBInit;

	//First unlock the OB(Option Byte) memory access
	HAL_FLASH_OB_Unlock();
 8001546:	f000 fb99 	bl	8001c7c <HAL_FLASH_OB_Unlock>
	//get the OB configuration details
	HAL_FLASHEx_OBGetConfig(&OBInit);
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	4618      	mov	r0, r3
 800154e:	f000 fd71 	bl	8002034 <HAL_FLASHEx_OBGetConfig>
	//Lock back .
	HAL_FLASH_Lock();
 8001552:	f000 fb83 	bl	8001c5c <HAL_FLASH_Lock>

	//We are just interested in r/w protection status of the sectors.
	return (uint16_t)OBInit.WRPSector;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	b29b      	uxth	r3, r3

}
 800155a:	4618      	mov	r0, r3
 800155c:	3720      	adds	r7, #32
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001566:	b672      	cpsid	i
}
 8001568:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800156a:	e7fe      	b.n	800156a <Error_Handler+0x8>

0800156c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	607b      	str	r3, [r7, #4]
 8001576:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <HAL_MspInit+0x4c>)
 8001578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157a:	4a0f      	ldr	r2, [pc, #60]	; (80015b8 <HAL_MspInit+0x4c>)
 800157c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001580:	6453      	str	r3, [r2, #68]	; 0x44
 8001582:	4b0d      	ldr	r3, [pc, #52]	; (80015b8 <HAL_MspInit+0x4c>)
 8001584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001586:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800158a:	607b      	str	r3, [r7, #4]
 800158c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	603b      	str	r3, [r7, #0]
 8001592:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <HAL_MspInit+0x4c>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	4a08      	ldr	r2, [pc, #32]	; (80015b8 <HAL_MspInit+0x4c>)
 8001598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800159c:	6413      	str	r3, [r2, #64]	; 0x40
 800159e:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <HAL_MspInit+0x4c>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a6:	603b      	str	r3, [r7, #0]
 80015a8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015aa:	2007      	movs	r0, #7
 80015ac:	f000 fa66 	bl	8001a7c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015b0:	bf00      	nop
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40023800 	.word	0x40023800

080015bc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a0b      	ldr	r2, [pc, #44]	; (80015f8 <HAL_CRC_MspInit+0x3c>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d10d      	bne.n	80015ea <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <HAL_CRC_MspInit+0x40>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	4a09      	ldr	r2, [pc, #36]	; (80015fc <HAL_CRC_MspInit+0x40>)
 80015d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015dc:	6313      	str	r3, [r2, #48]	; 0x30
 80015de:	4b07      	ldr	r3, [pc, #28]	; (80015fc <HAL_CRC_MspInit+0x40>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80015ea:	bf00      	nop
 80015ec:	3714      	adds	r7, #20
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	40023000 	.word	0x40023000
 80015fc:	40023800 	.word	0x40023800

08001600 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08c      	sub	sp, #48	; 0x30
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 031c 	add.w	r3, r7, #28
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a32      	ldr	r2, [pc, #200]	; (80016e8 <HAL_UART_MspInit+0xe8>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d12c      	bne.n	800167c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	61bb      	str	r3, [r7, #24]
 8001626:	4b31      	ldr	r3, [pc, #196]	; (80016ec <HAL_UART_MspInit+0xec>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	4a30      	ldr	r2, [pc, #192]	; (80016ec <HAL_UART_MspInit+0xec>)
 800162c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001630:	6413      	str	r3, [r2, #64]	; 0x40
 8001632:	4b2e      	ldr	r3, [pc, #184]	; (80016ec <HAL_UART_MspInit+0xec>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163a:	61bb      	str	r3, [r7, #24]
 800163c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	617b      	str	r3, [r7, #20]
 8001642:	4b2a      	ldr	r3, [pc, #168]	; (80016ec <HAL_UART_MspInit+0xec>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	4a29      	ldr	r2, [pc, #164]	; (80016ec <HAL_UART_MspInit+0xec>)
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	6313      	str	r3, [r2, #48]	; 0x30
 800164e:	4b27      	ldr	r3, [pc, #156]	; (80016ec <HAL_UART_MspInit+0xec>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	617b      	str	r3, [r7, #20]
 8001658:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800165a:	230c      	movs	r3, #12
 800165c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165e:	2302      	movs	r3, #2
 8001660:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001666:	2303      	movs	r3, #3
 8001668:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800166a:	2307      	movs	r3, #7
 800166c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166e:	f107 031c 	add.w	r3, r7, #28
 8001672:	4619      	mov	r1, r3
 8001674:	481e      	ldr	r0, [pc, #120]	; (80016f0 <HAL_UART_MspInit+0xf0>)
 8001676:	f000 fdff 	bl	8002278 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800167a:	e031      	b.n	80016e0 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a1c      	ldr	r2, [pc, #112]	; (80016f4 <HAL_UART_MspInit+0xf4>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d12c      	bne.n	80016e0 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	613b      	str	r3, [r7, #16]
 800168a:	4b18      	ldr	r3, [pc, #96]	; (80016ec <HAL_UART_MspInit+0xec>)
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	4a17      	ldr	r2, [pc, #92]	; (80016ec <HAL_UART_MspInit+0xec>)
 8001690:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001694:	6413      	str	r3, [r2, #64]	; 0x40
 8001696:	4b15      	ldr	r3, [pc, #84]	; (80016ec <HAL_UART_MspInit+0xec>)
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800169e:	613b      	str	r3, [r7, #16]
 80016a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	4b11      	ldr	r3, [pc, #68]	; (80016ec <HAL_UART_MspInit+0xec>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	4a10      	ldr	r2, [pc, #64]	; (80016ec <HAL_UART_MspInit+0xec>)
 80016ac:	f043 0304 	orr.w	r3, r3, #4
 80016b0:	6313      	str	r3, [r2, #48]	; 0x30
 80016b2:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <HAL_UART_MspInit+0xec>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	f003 0304 	and.w	r3, r3, #4
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80016be:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80016c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c4:	2302      	movs	r3, #2
 80016c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016cc:	2303      	movs	r3, #3
 80016ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016d0:	2307      	movs	r3, #7
 80016d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016d4:	f107 031c 	add.w	r3, r7, #28
 80016d8:	4619      	mov	r1, r3
 80016da:	4807      	ldr	r0, [pc, #28]	; (80016f8 <HAL_UART_MspInit+0xf8>)
 80016dc:	f000 fdcc 	bl	8002278 <HAL_GPIO_Init>
}
 80016e0:	bf00      	nop
 80016e2:	3730      	adds	r7, #48	; 0x30
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40004400 	.word	0x40004400
 80016ec:	40023800 	.word	0x40023800
 80016f0:	40020000 	.word	0x40020000
 80016f4:	40004800 	.word	0x40004800
 80016f8:	40020800 	.word	0x40020800

080016fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001700:	e7fe      	b.n	8001700 <NMI_Handler+0x4>

08001702 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001706:	e7fe      	b.n	8001706 <HardFault_Handler+0x4>

08001708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800170c:	e7fe      	b.n	800170c <MemManage_Handler+0x4>

0800170e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001712:	e7fe      	b.n	8001712 <BusFault_Handler+0x4>

08001714 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001718:	e7fe      	b.n	8001718 <UsageFault_Handler+0x4>

0800171a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001748:	f000 f8c6 	bl	80018d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800174c:	bf00      	nop
 800174e:	bd80      	pop	{r7, pc}

08001750 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001758:	4a14      	ldr	r2, [pc, #80]	; (80017ac <_sbrk+0x5c>)
 800175a:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <_sbrk+0x60>)
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001764:	4b13      	ldr	r3, [pc, #76]	; (80017b4 <_sbrk+0x64>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d102      	bne.n	8001772 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800176c:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <_sbrk+0x64>)
 800176e:	4a12      	ldr	r2, [pc, #72]	; (80017b8 <_sbrk+0x68>)
 8001770:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001772:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <_sbrk+0x64>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4413      	add	r3, r2
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	429a      	cmp	r2, r3
 800177e:	d207      	bcs.n	8001790 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001780:	f002 f9b4 	bl	8003aec <__errno>
 8001784:	4603      	mov	r3, r0
 8001786:	220c      	movs	r2, #12
 8001788:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800178a:	f04f 33ff 	mov.w	r3, #4294967295
 800178e:	e009      	b.n	80017a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001790:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <_sbrk+0x64>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001796:	4b07      	ldr	r3, [pc, #28]	; (80017b4 <_sbrk+0x64>)
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4413      	add	r3, r2
 800179e:	4a05      	ldr	r2, [pc, #20]	; (80017b4 <_sbrk+0x64>)
 80017a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017a2:	68fb      	ldr	r3, [r7, #12]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3718      	adds	r7, #24
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	20020000 	.word	0x20020000
 80017b0:	00000400 	.word	0x00000400
 80017b4:	200001d8 	.word	0x200001d8
 80017b8:	20000348 	.word	0x20000348

080017bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <SystemInit+0x20>)
 80017c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017c6:	4a05      	ldr	r2, [pc, #20]	; (80017dc <SystemInit+0x20>)
 80017c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001818 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017e4:	480d      	ldr	r0, [pc, #52]	; (800181c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017e6:	490e      	ldr	r1, [pc, #56]	; (8001820 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017e8:	4a0e      	ldr	r2, [pc, #56]	; (8001824 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017ec:	e002      	b.n	80017f4 <LoopCopyDataInit>

080017ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017f2:	3304      	adds	r3, #4

080017f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017f8:	d3f9      	bcc.n	80017ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017fa:	4a0b      	ldr	r2, [pc, #44]	; (8001828 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017fc:	4c0b      	ldr	r4, [pc, #44]	; (800182c <LoopFillZerobss+0x26>)
  movs r3, #0
 80017fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001800:	e001      	b.n	8001806 <LoopFillZerobss>

08001802 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001802:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001804:	3204      	adds	r2, #4

08001806 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001806:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001808:	d3fb      	bcc.n	8001802 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800180a:	f7ff ffd7 	bl	80017bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800180e:	f002 f973 	bl	8003af8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001812:	f7fe fed3 	bl	80005bc <main>
  bx  lr    
 8001816:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001818:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800181c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001820:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001824:	080049ec 	.word	0x080049ec
  ldr r2, =_sbss
 8001828:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800182c:	20000348 	.word	0x20000348

08001830 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001830:	e7fe      	b.n	8001830 <ADC_IRQHandler>
	...

08001834 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001838:	4b0e      	ldr	r3, [pc, #56]	; (8001874 <HAL_Init+0x40>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a0d      	ldr	r2, [pc, #52]	; (8001874 <HAL_Init+0x40>)
 800183e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001842:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001844:	4b0b      	ldr	r3, [pc, #44]	; (8001874 <HAL_Init+0x40>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a0a      	ldr	r2, [pc, #40]	; (8001874 <HAL_Init+0x40>)
 800184a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800184e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001850:	4b08      	ldr	r3, [pc, #32]	; (8001874 <HAL_Init+0x40>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a07      	ldr	r2, [pc, #28]	; (8001874 <HAL_Init+0x40>)
 8001856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800185a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800185c:	2003      	movs	r0, #3
 800185e:	f000 f90d 	bl	8001a7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001862:	2000      	movs	r0, #0
 8001864:	f000 f808 	bl	8001878 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001868:	f7ff fe80 	bl	800156c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40023c00 	.word	0x40023c00

08001878 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001880:	4b12      	ldr	r3, [pc, #72]	; (80018cc <HAL_InitTick+0x54>)
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <HAL_InitTick+0x58>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	4619      	mov	r1, r3
 800188a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800188e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001892:	fbb2 f3f3 	udiv	r3, r2, r3
 8001896:	4618      	mov	r0, r3
 8001898:	f000 f917 	bl	8001aca <HAL_SYSTICK_Config>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e00e      	b.n	80018c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b0f      	cmp	r3, #15
 80018aa:	d80a      	bhi.n	80018c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018ac:	2200      	movs	r2, #0
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	f04f 30ff 	mov.w	r0, #4294967295
 80018b4:	f000 f8ed 	bl	8001a92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018b8:	4a06      	ldr	r2, [pc, #24]	; (80018d4 <HAL_InitTick+0x5c>)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018be:	2300      	movs	r3, #0
 80018c0:	e000      	b.n	80018c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20000008 	.word	0x20000008
 80018d0:	20000010 	.word	0x20000010
 80018d4:	2000000c 	.word	0x2000000c

080018d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018dc:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <HAL_IncTick+0x20>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	461a      	mov	r2, r3
 80018e2:	4b06      	ldr	r3, [pc, #24]	; (80018fc <HAL_IncTick+0x24>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4413      	add	r3, r2
 80018e8:	4a04      	ldr	r2, [pc, #16]	; (80018fc <HAL_IncTick+0x24>)
 80018ea:	6013      	str	r3, [r2, #0]
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	20000010 	.word	0x20000010
 80018fc:	200001dc 	.word	0x200001dc

08001900 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  return uwTick;
 8001904:	4b03      	ldr	r3, [pc, #12]	; (8001914 <HAL_GetTick+0x14>)
 8001906:	681b      	ldr	r3, [r3, #0]
}
 8001908:	4618      	mov	r0, r3
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	200001dc 	.word	0x200001dc

08001918 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001928:	4b0c      	ldr	r3, [pc, #48]	; (800195c <__NVIC_SetPriorityGrouping+0x44>)
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800192e:	68ba      	ldr	r2, [r7, #8]
 8001930:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001934:	4013      	ands	r3, r2
 8001936:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001940:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001944:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001948:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800194a:	4a04      	ldr	r2, [pc, #16]	; (800195c <__NVIC_SetPriorityGrouping+0x44>)
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	60d3      	str	r3, [r2, #12]
}
 8001950:	bf00      	nop
 8001952:	3714      	adds	r7, #20
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	e000ed00 	.word	0xe000ed00

08001960 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001964:	4b04      	ldr	r3, [pc, #16]	; (8001978 <__NVIC_GetPriorityGrouping+0x18>)
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	0a1b      	lsrs	r3, r3, #8
 800196a:	f003 0307 	and.w	r3, r3, #7
}
 800196e:	4618      	mov	r0, r3
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	e000ed00 	.word	0xe000ed00

0800197c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	6039      	str	r1, [r7, #0]
 8001986:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198c:	2b00      	cmp	r3, #0
 800198e:	db0a      	blt.n	80019a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	b2da      	uxtb	r2, r3
 8001994:	490c      	ldr	r1, [pc, #48]	; (80019c8 <__NVIC_SetPriority+0x4c>)
 8001996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199a:	0112      	lsls	r2, r2, #4
 800199c:	b2d2      	uxtb	r2, r2
 800199e:	440b      	add	r3, r1
 80019a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019a4:	e00a      	b.n	80019bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	4908      	ldr	r1, [pc, #32]	; (80019cc <__NVIC_SetPriority+0x50>)
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	f003 030f 	and.w	r3, r3, #15
 80019b2:	3b04      	subs	r3, #4
 80019b4:	0112      	lsls	r2, r2, #4
 80019b6:	b2d2      	uxtb	r2, r2
 80019b8:	440b      	add	r3, r1
 80019ba:	761a      	strb	r2, [r3, #24]
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	e000e100 	.word	0xe000e100
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b089      	sub	sp, #36	; 0x24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	f1c3 0307 	rsb	r3, r3, #7
 80019ea:	2b04      	cmp	r3, #4
 80019ec:	bf28      	it	cs
 80019ee:	2304      	movcs	r3, #4
 80019f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	3304      	adds	r3, #4
 80019f6:	2b06      	cmp	r3, #6
 80019f8:	d902      	bls.n	8001a00 <NVIC_EncodePriority+0x30>
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	3b03      	subs	r3, #3
 80019fe:	e000      	b.n	8001a02 <NVIC_EncodePriority+0x32>
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a04:	f04f 32ff 	mov.w	r2, #4294967295
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	43da      	mvns	r2, r3
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	401a      	ands	r2, r3
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a18:	f04f 31ff 	mov.w	r1, #4294967295
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a22:	43d9      	mvns	r1, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a28:	4313      	orrs	r3, r2
         );
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3724      	adds	r7, #36	; 0x24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
	...

08001a38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a48:	d301      	bcc.n	8001a4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e00f      	b.n	8001a6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a4e:	4a0a      	ldr	r2, [pc, #40]	; (8001a78 <SysTick_Config+0x40>)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3b01      	subs	r3, #1
 8001a54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a56:	210f      	movs	r1, #15
 8001a58:	f04f 30ff 	mov.w	r0, #4294967295
 8001a5c:	f7ff ff8e 	bl	800197c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a60:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <SysTick_Config+0x40>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a66:	4b04      	ldr	r3, [pc, #16]	; (8001a78 <SysTick_Config+0x40>)
 8001a68:	2207      	movs	r2, #7
 8001a6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	e000e010 	.word	0xe000e010

08001a7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f7ff ff47 	bl	8001918 <__NVIC_SetPriorityGrouping>
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b086      	sub	sp, #24
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	4603      	mov	r3, r0
 8001a9a:	60b9      	str	r1, [r7, #8]
 8001a9c:	607a      	str	r2, [r7, #4]
 8001a9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aa4:	f7ff ff5c 	bl	8001960 <__NVIC_GetPriorityGrouping>
 8001aa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	68b9      	ldr	r1, [r7, #8]
 8001aae:	6978      	ldr	r0, [r7, #20]
 8001ab0:	f7ff ff8e 	bl	80019d0 <NVIC_EncodePriority>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aba:	4611      	mov	r1, r2
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff ff5d 	bl	800197c <__NVIC_SetPriority>
}
 8001ac2:	bf00      	nop
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7ff ffb0 	bl	8001a38 <SysTick_Config>
 8001ad8:	4603      	mov	r3, r0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b082      	sub	sp, #8
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d101      	bne.n	8001af4 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e00e      	b.n	8001b12 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	795b      	ldrb	r3, [r3, #5]
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d105      	bne.n	8001b0a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f7ff fd59 	bl	80015bc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b087      	sub	sp, #28
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	60f8      	str	r0, [r7, #12]
 8001b22:	60b9      	str	r1, [r7, #8]
 8001b24:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001b26:	2300      	movs	r3, #0
 8001b28:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2202      	movs	r2, #2
 8001b2e:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]
 8001b34:	e00a      	b.n	8001b4c <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	68ba      	ldr	r2, [r7, #8]
 8001b3c:	441a      	add	r2, r3
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	6812      	ldr	r2, [r2, #0]
 8001b44:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	617b      	str	r3, [r7, #20]
 8001b4c:	697a      	ldr	r2, [r7, #20]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d3f0      	bcc.n	8001b36 <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8001b62:	693b      	ldr	r3, [r7, #16]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	371c      	adds	r7, #28
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001b82:	4b23      	ldr	r3, [pc, #140]	; (8001c10 <HAL_FLASH_Program+0xa0>)
 8001b84:	7e1b      	ldrb	r3, [r3, #24]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d101      	bne.n	8001b8e <HAL_FLASH_Program+0x1e>
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	e03b      	b.n	8001c06 <HAL_FLASH_Program+0x96>
 8001b8e:	4b20      	ldr	r3, [pc, #128]	; (8001c10 <HAL_FLASH_Program+0xa0>)
 8001b90:	2201      	movs	r2, #1
 8001b92:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001b94:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001b98:	f000 f89c 	bl	8001cd4 <FLASH_WaitForLastOperation>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001ba0:	7dfb      	ldrb	r3, [r7, #23]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d12b      	bne.n	8001bfe <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d105      	bne.n	8001bb8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001bac:	783b      	ldrb	r3, [r7, #0]
 8001bae:	4619      	mov	r1, r3
 8001bb0:	68b8      	ldr	r0, [r7, #8]
 8001bb2:	f000 f947 	bl	8001e44 <FLASH_Program_Byte>
 8001bb6:	e016      	b.n	8001be6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d105      	bne.n	8001bca <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001bbe:	883b      	ldrh	r3, [r7, #0]
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	68b8      	ldr	r0, [r7, #8]
 8001bc4:	f000 f91a 	bl	8001dfc <FLASH_Program_HalfWord>
 8001bc8:	e00d      	b.n	8001be6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d105      	bne.n	8001bdc <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	68b8      	ldr	r0, [r7, #8]
 8001bd6:	f000 f8ef 	bl	8001db8 <FLASH_Program_Word>
 8001bda:	e004      	b.n	8001be6 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001bdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001be0:	68b8      	ldr	r0, [r7, #8]
 8001be2:	f000 f8b7 	bl	8001d54 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001be6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001bea:	f000 f873 	bl	8001cd4 <FLASH_WaitForLastOperation>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001bf2:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <HAL_FLASH_Program+0xa4>)
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	4a07      	ldr	r2, [pc, #28]	; (8001c14 <HAL_FLASH_Program+0xa4>)
 8001bf8:	f023 0301 	bic.w	r3, r3, #1
 8001bfc:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001bfe:	4b04      	ldr	r3, [pc, #16]	; (8001c10 <HAL_FLASH_Program+0xa0>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001c04:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3718      	adds	r7, #24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	200001e0 	.word	0x200001e0
 8001c14:	40023c00 	.word	0x40023c00

08001c18 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001c22:	4b0b      	ldr	r3, [pc, #44]	; (8001c50 <HAL_FLASH_Unlock+0x38>)
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	da0b      	bge.n	8001c42 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001c2a:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <HAL_FLASH_Unlock+0x38>)
 8001c2c:	4a09      	ldr	r2, [pc, #36]	; (8001c54 <HAL_FLASH_Unlock+0x3c>)
 8001c2e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001c30:	4b07      	ldr	r3, [pc, #28]	; (8001c50 <HAL_FLASH_Unlock+0x38>)
 8001c32:	4a09      	ldr	r2, [pc, #36]	; (8001c58 <HAL_FLASH_Unlock+0x40>)
 8001c34:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001c36:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <HAL_FLASH_Unlock+0x38>)
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	da01      	bge.n	8001c42 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001c42:	79fb      	ldrb	r3, [r7, #7]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	40023c00 	.word	0x40023c00
 8001c54:	45670123 	.word	0x45670123
 8001c58:	cdef89ab 	.word	0xcdef89ab

08001c5c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001c60:	4b05      	ldr	r3, [pc, #20]	; (8001c78 <HAL_FLASH_Lock+0x1c>)
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	4a04      	ldr	r2, [pc, #16]	; (8001c78 <HAL_FLASH_Lock+0x1c>)
 8001c66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001c6a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	40023c00 	.word	0x40023c00

08001c7c <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 8001c80:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <HAL_FLASH_OB_Unlock+0x2c>)
 8001c82:	695b      	ldr	r3, [r3, #20]
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d007      	beq.n	8001c9c <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8001c8c:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <HAL_FLASH_OB_Unlock+0x2c>)
 8001c8e:	4a07      	ldr	r2, [pc, #28]	; (8001cac <HAL_FLASH_OB_Unlock+0x30>)
 8001c90:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 8001c92:	4b05      	ldr	r3, [pc, #20]	; (8001ca8 <HAL_FLASH_OB_Unlock+0x2c>)
 8001c94:	4a06      	ldr	r2, [pc, #24]	; (8001cb0 <HAL_FLASH_OB_Unlock+0x34>)
 8001c96:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8001c98:	2300      	movs	r3, #0
 8001c9a:	e000      	b.n	8001c9e <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	40023c00 	.word	0x40023c00
 8001cac:	08192a3b 	.word	0x08192a3b
 8001cb0:	4c5d6e7f 	.word	0x4c5d6e7f

08001cb4 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001cb8:	4b05      	ldr	r3, [pc, #20]	; (8001cd0 <HAL_FLASH_OB_Lock+0x1c>)
 8001cba:	695b      	ldr	r3, [r3, #20]
 8001cbc:	4a04      	ldr	r2, [pc, #16]	; (8001cd0 <HAL_FLASH_OB_Lock+0x1c>)
 8001cbe:	f043 0301 	orr.w	r3, r3, #1
 8001cc2:	6153      	str	r3, [r2, #20]
  
  return HAL_OK;  
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	40023c00 	.word	0x40023c00

08001cd4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001ce0:	4b1a      	ldr	r3, [pc, #104]	; (8001d4c <FLASH_WaitForLastOperation+0x78>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001ce6:	f7ff fe0b 	bl	8001900 <HAL_GetTick>
 8001cea:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001cec:	e010      	b.n	8001d10 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf4:	d00c      	beq.n	8001d10 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d007      	beq.n	8001d0c <FLASH_WaitForLastOperation+0x38>
 8001cfc:	f7ff fe00 	bl	8001900 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d201      	bcs.n	8001d10 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e019      	b.n	8001d44 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001d10:	4b0f      	ldr	r3, [pc, #60]	; (8001d50 <FLASH_WaitForLastOperation+0x7c>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d1e8      	bne.n	8001cee <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001d1c:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <FLASH_WaitForLastOperation+0x7c>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	f003 0301 	and.w	r3, r3, #1
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d002      	beq.n	8001d2e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001d28:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <FLASH_WaitForLastOperation+0x7c>)
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001d2e:	4b08      	ldr	r3, [pc, #32]	; (8001d50 <FLASH_WaitForLastOperation+0x7c>)
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001d3a:	f000 f8a5 	bl	8001e88 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e000      	b.n	8001d44 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
  
}  
 8001d44:	4618      	mov	r0, r3
 8001d46:	3710      	adds	r7, #16
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	200001e0 	.word	0x200001e0
 8001d50:	40023c00 	.word	0x40023c00

08001d54 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001d60:	4b14      	ldr	r3, [pc, #80]	; (8001db4 <FLASH_Program_DoubleWord+0x60>)
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	4a13      	ldr	r2, [pc, #76]	; (8001db4 <FLASH_Program_DoubleWord+0x60>)
 8001d66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d6a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001d6c:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <FLASH_Program_DoubleWord+0x60>)
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	4a10      	ldr	r2, [pc, #64]	; (8001db4 <FLASH_Program_DoubleWord+0x60>)
 8001d72:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001d76:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001d78:	4b0e      	ldr	r3, [pc, #56]	; (8001db4 <FLASH_Program_DoubleWord+0x60>)
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	4a0d      	ldr	r2, [pc, #52]	; (8001db4 <FLASH_Program_DoubleWord+0x60>)
 8001d7e:	f043 0301 	orr.w	r3, r3, #1
 8001d82:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001d8a:	f3bf 8f6f 	isb	sy
}
 8001d8e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001d90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d94:	f04f 0200 	mov.w	r2, #0
 8001d98:	f04f 0300 	mov.w	r3, #0
 8001d9c:	000a      	movs	r2, r1
 8001d9e:	2300      	movs	r3, #0
 8001da0:	68f9      	ldr	r1, [r7, #12]
 8001da2:	3104      	adds	r1, #4
 8001da4:	4613      	mov	r3, r2
 8001da6:	600b      	str	r3, [r1, #0]
}
 8001da8:	bf00      	nop
 8001daa:	3714      	adds	r7, #20
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr
 8001db4:	40023c00 	.word	0x40023c00

08001db8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001dc2:	4b0d      	ldr	r3, [pc, #52]	; (8001df8 <FLASH_Program_Word+0x40>)
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	4a0c      	ldr	r2, [pc, #48]	; (8001df8 <FLASH_Program_Word+0x40>)
 8001dc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dcc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001dce:	4b0a      	ldr	r3, [pc, #40]	; (8001df8 <FLASH_Program_Word+0x40>)
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	4a09      	ldr	r2, [pc, #36]	; (8001df8 <FLASH_Program_Word+0x40>)
 8001dd4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dd8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001dda:	4b07      	ldr	r3, [pc, #28]	; (8001df8 <FLASH_Program_Word+0x40>)
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	4a06      	ldr	r2, [pc, #24]	; (8001df8 <FLASH_Program_Word+0x40>)
 8001de0:	f043 0301 	orr.w	r3, r3, #1
 8001de4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	601a      	str	r2, [r3, #0]
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	40023c00 	.word	0x40023c00

08001dfc <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	460b      	mov	r3, r1
 8001e06:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e08:	4b0d      	ldr	r3, [pc, #52]	; (8001e40 <FLASH_Program_HalfWord+0x44>)
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	4a0c      	ldr	r2, [pc, #48]	; (8001e40 <FLASH_Program_HalfWord+0x44>)
 8001e0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e12:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001e14:	4b0a      	ldr	r3, [pc, #40]	; (8001e40 <FLASH_Program_HalfWord+0x44>)
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	4a09      	ldr	r2, [pc, #36]	; (8001e40 <FLASH_Program_HalfWord+0x44>)
 8001e1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e1e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001e20:	4b07      	ldr	r3, [pc, #28]	; (8001e40 <FLASH_Program_HalfWord+0x44>)
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	4a06      	ldr	r2, [pc, #24]	; (8001e40 <FLASH_Program_HalfWord+0x44>)
 8001e26:	f043 0301 	orr.w	r3, r3, #1
 8001e2a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	887a      	ldrh	r2, [r7, #2]
 8001e30:	801a      	strh	r2, [r3, #0]
}
 8001e32:	bf00      	nop
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	40023c00 	.word	0x40023c00

08001e44 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e50:	4b0c      	ldr	r3, [pc, #48]	; (8001e84 <FLASH_Program_Byte+0x40>)
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	4a0b      	ldr	r2, [pc, #44]	; (8001e84 <FLASH_Program_Byte+0x40>)
 8001e56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e5a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001e5c:	4b09      	ldr	r3, [pc, #36]	; (8001e84 <FLASH_Program_Byte+0x40>)
 8001e5e:	4a09      	ldr	r2, [pc, #36]	; (8001e84 <FLASH_Program_Byte+0x40>)
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001e64:	4b07      	ldr	r3, [pc, #28]	; (8001e84 <FLASH_Program_Byte+0x40>)
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	4a06      	ldr	r2, [pc, #24]	; (8001e84 <FLASH_Program_Byte+0x40>)
 8001e6a:	f043 0301 	orr.w	r3, r3, #1
 8001e6e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	78fa      	ldrb	r2, [r7, #3]
 8001e74:	701a      	strb	r2, [r3, #0]
}
 8001e76:	bf00      	nop
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	40023c00 	.word	0x40023c00

08001e88 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001e8c:	4b2f      	ldr	r3, [pc, #188]	; (8001f4c <FLASH_SetErrorCode+0xc4>)
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	f003 0310 	and.w	r3, r3, #16
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d008      	beq.n	8001eaa <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001e98:	4b2d      	ldr	r3, [pc, #180]	; (8001f50 <FLASH_SetErrorCode+0xc8>)
 8001e9a:	69db      	ldr	r3, [r3, #28]
 8001e9c:	f043 0310 	orr.w	r3, r3, #16
 8001ea0:	4a2b      	ldr	r2, [pc, #172]	; (8001f50 <FLASH_SetErrorCode+0xc8>)
 8001ea2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001ea4:	4b29      	ldr	r3, [pc, #164]	; (8001f4c <FLASH_SetErrorCode+0xc4>)
 8001ea6:	2210      	movs	r2, #16
 8001ea8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001eaa:	4b28      	ldr	r3, [pc, #160]	; (8001f4c <FLASH_SetErrorCode+0xc4>)
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	f003 0320 	and.w	r3, r3, #32
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d008      	beq.n	8001ec8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001eb6:	4b26      	ldr	r3, [pc, #152]	; (8001f50 <FLASH_SetErrorCode+0xc8>)
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	f043 0308 	orr.w	r3, r3, #8
 8001ebe:	4a24      	ldr	r2, [pc, #144]	; (8001f50 <FLASH_SetErrorCode+0xc8>)
 8001ec0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001ec2:	4b22      	ldr	r3, [pc, #136]	; (8001f4c <FLASH_SetErrorCode+0xc4>)
 8001ec4:	2220      	movs	r2, #32
 8001ec6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001ec8:	4b20      	ldr	r3, [pc, #128]	; (8001f4c <FLASH_SetErrorCode+0xc4>)
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d008      	beq.n	8001ee6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001ed4:	4b1e      	ldr	r3, [pc, #120]	; (8001f50 <FLASH_SetErrorCode+0xc8>)
 8001ed6:	69db      	ldr	r3, [r3, #28]
 8001ed8:	f043 0304 	orr.w	r3, r3, #4
 8001edc:	4a1c      	ldr	r2, [pc, #112]	; (8001f50 <FLASH_SetErrorCode+0xc8>)
 8001ede:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001ee0:	4b1a      	ldr	r3, [pc, #104]	; (8001f4c <FLASH_SetErrorCode+0xc4>)
 8001ee2:	2240      	movs	r2, #64	; 0x40
 8001ee4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001ee6:	4b19      	ldr	r3, [pc, #100]	; (8001f4c <FLASH_SetErrorCode+0xc4>)
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d008      	beq.n	8001f04 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001ef2:	4b17      	ldr	r3, [pc, #92]	; (8001f50 <FLASH_SetErrorCode+0xc8>)
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	f043 0302 	orr.w	r3, r3, #2
 8001efa:	4a15      	ldr	r2, [pc, #84]	; (8001f50 <FLASH_SetErrorCode+0xc8>)
 8001efc:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001efe:	4b13      	ldr	r3, [pc, #76]	; (8001f4c <FLASH_SetErrorCode+0xc4>)
 8001f00:	2280      	movs	r2, #128	; 0x80
 8001f02:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001f04:	4b11      	ldr	r3, [pc, #68]	; (8001f4c <FLASH_SetErrorCode+0xc4>)
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d009      	beq.n	8001f24 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001f10:	4b0f      	ldr	r3, [pc, #60]	; (8001f50 <FLASH_SetErrorCode+0xc8>)
 8001f12:	69db      	ldr	r3, [r3, #28]
 8001f14:	f043 0301 	orr.w	r3, r3, #1
 8001f18:	4a0d      	ldr	r2, [pc, #52]	; (8001f50 <FLASH_SetErrorCode+0xc8>)
 8001f1a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001f1c:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <FLASH_SetErrorCode+0xc4>)
 8001f1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f22:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001f24:	4b09      	ldr	r3, [pc, #36]	; (8001f4c <FLASH_SetErrorCode+0xc4>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d008      	beq.n	8001f42 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001f30:	4b07      	ldr	r3, [pc, #28]	; (8001f50 <FLASH_SetErrorCode+0xc8>)
 8001f32:	69db      	ldr	r3, [r3, #28]
 8001f34:	f043 0320 	orr.w	r3, r3, #32
 8001f38:	4a05      	ldr	r2, [pc, #20]	; (8001f50 <FLASH_SetErrorCode+0xc8>)
 8001f3a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001f3c:	4b03      	ldr	r3, [pc, #12]	; (8001f4c <FLASH_SetErrorCode+0xc4>)
 8001f3e:	2202      	movs	r2, #2
 8001f40:	60da      	str	r2, [r3, #12]
  }
}
 8001f42:	bf00      	nop
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	40023c00 	.word	0x40023c00
 8001f50:	200001e0 	.word	0x200001e0

08001f54 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001f62:	2300      	movs	r3, #0
 8001f64:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001f66:	4b31      	ldr	r3, [pc, #196]	; (800202c <HAL_FLASHEx_Erase+0xd8>)
 8001f68:	7e1b      	ldrb	r3, [r3, #24]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d101      	bne.n	8001f72 <HAL_FLASHEx_Erase+0x1e>
 8001f6e:	2302      	movs	r3, #2
 8001f70:	e058      	b.n	8002024 <HAL_FLASHEx_Erase+0xd0>
 8001f72:	4b2e      	ldr	r3, [pc, #184]	; (800202c <HAL_FLASHEx_Erase+0xd8>)
 8001f74:	2201      	movs	r2, #1
 8001f76:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001f78:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001f7c:	f7ff feaa 	bl	8001cd4 <FLASH_WaitForLastOperation>
 8001f80:	4603      	mov	r3, r0
 8001f82:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001f84:	7bfb      	ldrb	r3, [r7, #15]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d148      	bne.n	800201c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f90:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d115      	bne.n	8001fc6 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	b2da      	uxtb	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4610      	mov	r0, r2
 8001fa8:	f000 f868 	bl	800207c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001fac:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001fb0:	f7ff fe90 	bl	8001cd4 <FLASH_WaitForLastOperation>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001fb8:	4b1d      	ldr	r3, [pc, #116]	; (8002030 <HAL_FLASHEx_Erase+0xdc>)
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	4a1c      	ldr	r2, [pc, #112]	; (8002030 <HAL_FLASHEx_Erase+0xdc>)
 8001fbe:	f023 0304 	bic.w	r3, r3, #4
 8001fc2:	6113      	str	r3, [r2, #16]
 8001fc4:	e028      	b.n	8002018 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	60bb      	str	r3, [r7, #8]
 8001fcc:	e01c      	b.n	8002008 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	68b8      	ldr	r0, [r7, #8]
 8001fd8:	f000 f874 	bl	80020c4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001fdc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001fe0:	f7ff fe78 	bl	8001cd4 <FLASH_WaitForLastOperation>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001fe8:	4b11      	ldr	r3, [pc, #68]	; (8002030 <HAL_FLASHEx_Erase+0xdc>)
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	4a10      	ldr	r2, [pc, #64]	; (8002030 <HAL_FLASHEx_Erase+0xdc>)
 8001fee:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001ff2:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001ff4:	7bfb      	ldrb	r3, [r7, #15]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	68ba      	ldr	r2, [r7, #8]
 8001ffe:	601a      	str	r2, [r3, #0]
          break;
 8002000:	e00a      	b.n	8002018 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	3301      	adds	r3, #1
 8002006:	60bb      	str	r3, [r7, #8]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	68da      	ldr	r2, [r3, #12]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	4413      	add	r3, r2
 8002012:	68ba      	ldr	r2, [r7, #8]
 8002014:	429a      	cmp	r2, r3
 8002016:	d3da      	bcc.n	8001fce <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002018:	f000 f8e8 	bl	80021ec <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800201c:	4b03      	ldr	r3, [pc, #12]	; (800202c <HAL_FLASHEx_Erase+0xd8>)
 800201e:	2200      	movs	r2, #0
 8002020:	761a      	strb	r2, [r3, #24]

  return status;
 8002022:	7bfb      	ldrb	r3, [r7, #15]
}
 8002024:	4618      	mov	r0, r3
 8002026:	3710      	adds	r7, #16
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	200001e0 	.word	0x200001e0
 8002030:	40023c00 	.word	0x40023c00

08002034 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	220f      	movs	r2, #15
 8002040:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 8002042:	f000 f897 	bl	8002174 <FLASH_OB_GetWRP>
 8002046:	4603      	mov	r3, r0
 8002048:	461a      	mov	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 800204e:	f000 f89d 	bl	800218c <FLASH_OB_GetRDP>
 8002052:	4603      	mov	r3, r0
 8002054:	461a      	mov	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 800205a:	f000 f87b 	bl	8002154 <FLASH_OB_GetUser>
 800205e:	4603      	mov	r3, r0
 8002060:	461a      	mov	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 8002066:	f000 f8b1 	bl	80021cc <FLASH_OB_GetBOR>
 800206a:	4603      	mov	r3, r0
 800206c:	461a      	mov	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	615a      	str	r2, [r3, #20]
}
 8002072:	bf00      	nop
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
	...

0800207c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	6039      	str	r1, [r7, #0]
 8002086:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002088:	4b0d      	ldr	r3, [pc, #52]	; (80020c0 <FLASH_MassErase+0x44>)
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	4a0c      	ldr	r2, [pc, #48]	; (80020c0 <FLASH_MassErase+0x44>)
 800208e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002092:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8002094:	4b0a      	ldr	r3, [pc, #40]	; (80020c0 <FLASH_MassErase+0x44>)
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	4a09      	ldr	r2, [pc, #36]	; (80020c0 <FLASH_MassErase+0x44>)
 800209a:	f043 0304 	orr.w	r3, r3, #4
 800209e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80020a0:	4b07      	ldr	r3, [pc, #28]	; (80020c0 <FLASH_MassErase+0x44>)
 80020a2:	691a      	ldr	r2, [r3, #16]
 80020a4:	79fb      	ldrb	r3, [r7, #7]
 80020a6:	021b      	lsls	r3, r3, #8
 80020a8:	4313      	orrs	r3, r2
 80020aa:	4a05      	ldr	r2, [pc, #20]	; (80020c0 <FLASH_MassErase+0x44>)
 80020ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020b0:	6113      	str	r3, [r2, #16]
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	40023c00 	.word	0x40023c00

080020c4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	460b      	mov	r3, r1
 80020ce:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80020d0:	2300      	movs	r3, #0
 80020d2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80020d4:	78fb      	ldrb	r3, [r7, #3]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d102      	bne.n	80020e0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80020da:	2300      	movs	r3, #0
 80020dc:	60fb      	str	r3, [r7, #12]
 80020de:	e010      	b.n	8002102 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80020e0:	78fb      	ldrb	r3, [r7, #3]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d103      	bne.n	80020ee <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80020e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	e009      	b.n	8002102 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80020ee:	78fb      	ldrb	r3, [r7, #3]
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d103      	bne.n	80020fc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80020f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	e002      	b.n	8002102 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80020fc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002100:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002102:	4b13      	ldr	r3, [pc, #76]	; (8002150 <FLASH_Erase_Sector+0x8c>)
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	4a12      	ldr	r2, [pc, #72]	; (8002150 <FLASH_Erase_Sector+0x8c>)
 8002108:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800210c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800210e:	4b10      	ldr	r3, [pc, #64]	; (8002150 <FLASH_Erase_Sector+0x8c>)
 8002110:	691a      	ldr	r2, [r3, #16]
 8002112:	490f      	ldr	r1, [pc, #60]	; (8002150 <FLASH_Erase_Sector+0x8c>)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	4313      	orrs	r3, r2
 8002118:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800211a:	4b0d      	ldr	r3, [pc, #52]	; (8002150 <FLASH_Erase_Sector+0x8c>)
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	4a0c      	ldr	r2, [pc, #48]	; (8002150 <FLASH_Erase_Sector+0x8c>)
 8002120:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002124:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002126:	4b0a      	ldr	r3, [pc, #40]	; (8002150 <FLASH_Erase_Sector+0x8c>)
 8002128:	691a      	ldr	r2, [r3, #16]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	4313      	orrs	r3, r2
 8002130:	4a07      	ldr	r2, [pc, #28]	; (8002150 <FLASH_Erase_Sector+0x8c>)
 8002132:	f043 0302 	orr.w	r3, r3, #2
 8002136:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002138:	4b05      	ldr	r3, [pc, #20]	; (8002150 <FLASH_Erase_Sector+0x8c>)
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	4a04      	ldr	r2, [pc, #16]	; (8002150 <FLASH_Erase_Sector+0x8c>)
 800213e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002142:	6113      	str	r3, [r2, #16]
}
 8002144:	bf00      	nop
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	40023c00 	.word	0x40023c00

08002154 <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 8002158:	4b05      	ldr	r3, [pc, #20]	; (8002170 <FLASH_OB_GetUser+0x1c>)
 800215a:	695b      	ldr	r3, [r3, #20]
 800215c:	b2db      	uxtb	r3, r3
 800215e:	f023 031f 	bic.w	r3, r3, #31
 8002162:	b2db      	uxtb	r3, r3
}
 8002164:	4618      	mov	r0, r3
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	40023c00 	.word	0x40023c00

08002174 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 8002178:	4b03      	ldr	r3, [pc, #12]	; (8002188 <FLASH_OB_GetWRP+0x14>)
 800217a:	881b      	ldrh	r3, [r3, #0]
 800217c:	b29b      	uxth	r3, r3
}
 800217e:	4618      	mov	r0, r3
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	40023c16 	.word	0x40023c16

0800218c <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 8002192:	23aa      	movs	r3, #170	; 0xaa
 8002194:	71fb      	strb	r3, [r7, #7]

  if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2)
 8002196:	4b0c      	ldr	r3, [pc, #48]	; (80021c8 <FLASH_OB_GetRDP+0x3c>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	b2db      	uxtb	r3, r3
 800219c:	2bcc      	cmp	r3, #204	; 0xcc
 800219e:	d102      	bne.n	80021a6 <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 80021a0:	23cc      	movs	r3, #204	; 0xcc
 80021a2:	71fb      	strb	r3, [r7, #7]
 80021a4:	e009      	b.n	80021ba <FLASH_OB_GetRDP+0x2e>
  }
  else if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0)
 80021a6:	4b08      	ldr	r3, [pc, #32]	; (80021c8 <FLASH_OB_GetRDP+0x3c>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	2baa      	cmp	r3, #170	; 0xaa
 80021ae:	d102      	bne.n	80021b6 <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 80021b0:	23aa      	movs	r3, #170	; 0xaa
 80021b2:	71fb      	strb	r3, [r7, #7]
 80021b4:	e001      	b.n	80021ba <FLASH_OB_GetRDP+0x2e>
  }
  else
  {
    readstatus = OB_RDP_LEVEL_1;
 80021b6:	2355      	movs	r3, #85	; 0x55
 80021b8:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 80021ba:	79fb      	ldrb	r3, [r7, #7]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	40023c15 	.word	0x40023c15

080021cc <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 80021d0:	4b05      	ldr	r3, [pc, #20]	; (80021e8 <FLASH_OB_GetBOR+0x1c>)
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	f003 030c 	and.w	r3, r3, #12
 80021da:	b2db      	uxtb	r3, r3
}
 80021dc:	4618      	mov	r0, r3
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	40023c14 	.word	0x40023c14

080021ec <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80021f0:	4b20      	ldr	r3, [pc, #128]	; (8002274 <FLASH_FlushCaches+0x88>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d017      	beq.n	800222c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80021fc:	4b1d      	ldr	r3, [pc, #116]	; (8002274 <FLASH_FlushCaches+0x88>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a1c      	ldr	r2, [pc, #112]	; (8002274 <FLASH_FlushCaches+0x88>)
 8002202:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002206:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002208:	4b1a      	ldr	r3, [pc, #104]	; (8002274 <FLASH_FlushCaches+0x88>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a19      	ldr	r2, [pc, #100]	; (8002274 <FLASH_FlushCaches+0x88>)
 800220e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002212:	6013      	str	r3, [r2, #0]
 8002214:	4b17      	ldr	r3, [pc, #92]	; (8002274 <FLASH_FlushCaches+0x88>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a16      	ldr	r2, [pc, #88]	; (8002274 <FLASH_FlushCaches+0x88>)
 800221a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800221e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002220:	4b14      	ldr	r3, [pc, #80]	; (8002274 <FLASH_FlushCaches+0x88>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a13      	ldr	r2, [pc, #76]	; (8002274 <FLASH_FlushCaches+0x88>)
 8002226:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800222a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800222c:	4b11      	ldr	r3, [pc, #68]	; (8002274 <FLASH_FlushCaches+0x88>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002234:	2b00      	cmp	r3, #0
 8002236:	d017      	beq.n	8002268 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002238:	4b0e      	ldr	r3, [pc, #56]	; (8002274 <FLASH_FlushCaches+0x88>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a0d      	ldr	r2, [pc, #52]	; (8002274 <FLASH_FlushCaches+0x88>)
 800223e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002242:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002244:	4b0b      	ldr	r3, [pc, #44]	; (8002274 <FLASH_FlushCaches+0x88>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a0a      	ldr	r2, [pc, #40]	; (8002274 <FLASH_FlushCaches+0x88>)
 800224a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800224e:	6013      	str	r3, [r2, #0]
 8002250:	4b08      	ldr	r3, [pc, #32]	; (8002274 <FLASH_FlushCaches+0x88>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a07      	ldr	r2, [pc, #28]	; (8002274 <FLASH_FlushCaches+0x88>)
 8002256:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800225a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800225c:	4b05      	ldr	r3, [pc, #20]	; (8002274 <FLASH_FlushCaches+0x88>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a04      	ldr	r2, [pc, #16]	; (8002274 <FLASH_FlushCaches+0x88>)
 8002262:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002266:	6013      	str	r3, [r2, #0]
  }
}
 8002268:	bf00      	nop
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	40023c00 	.word	0x40023c00

08002278 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002278:	b480      	push	{r7}
 800227a:	b089      	sub	sp, #36	; 0x24
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002282:	2300      	movs	r3, #0
 8002284:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002286:	2300      	movs	r3, #0
 8002288:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800228a:	2300      	movs	r3, #0
 800228c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800228e:	2300      	movs	r3, #0
 8002290:	61fb      	str	r3, [r7, #28]
 8002292:	e165      	b.n	8002560 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002294:	2201      	movs	r2, #1
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	697a      	ldr	r2, [r7, #20]
 80022a4:	4013      	ands	r3, r2
 80022a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022a8:	693a      	ldr	r2, [r7, #16]
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	f040 8154 	bne.w	800255a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f003 0303 	and.w	r3, r3, #3
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d005      	beq.n	80022ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d130      	bne.n	800232c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	2203      	movs	r2, #3
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	43db      	mvns	r3, r3
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4013      	ands	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	68da      	ldr	r2, [r3, #12]
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002300:	2201      	movs	r2, #1
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	43db      	mvns	r3, r3
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4013      	ands	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	091b      	lsrs	r3, r3, #4
 8002316:	f003 0201 	and.w	r2, r3, #1
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4313      	orrs	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f003 0303 	and.w	r3, r3, #3
 8002334:	2b03      	cmp	r3, #3
 8002336:	d017      	beq.n	8002368 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	2203      	movs	r2, #3
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	43db      	mvns	r3, r3
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4013      	ands	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4313      	orrs	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f003 0303 	and.w	r3, r3, #3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d123      	bne.n	80023bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	08da      	lsrs	r2, r3, #3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3208      	adds	r2, #8
 800237c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002380:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	f003 0307 	and.w	r3, r3, #7
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	220f      	movs	r2, #15
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	43db      	mvns	r3, r3
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	4013      	ands	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	691a      	ldr	r2, [r3, #16]
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	f003 0307 	and.w	r3, r3, #7
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	08da      	lsrs	r2, r3, #3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	3208      	adds	r2, #8
 80023b6:	69b9      	ldr	r1, [r7, #24]
 80023b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	2203      	movs	r2, #3
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	43db      	mvns	r3, r3
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	4013      	ands	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f003 0203 	and.w	r2, r3, #3
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	f000 80ae 	beq.w	800255a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023fe:	2300      	movs	r3, #0
 8002400:	60fb      	str	r3, [r7, #12]
 8002402:	4b5d      	ldr	r3, [pc, #372]	; (8002578 <HAL_GPIO_Init+0x300>)
 8002404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002406:	4a5c      	ldr	r2, [pc, #368]	; (8002578 <HAL_GPIO_Init+0x300>)
 8002408:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800240c:	6453      	str	r3, [r2, #68]	; 0x44
 800240e:	4b5a      	ldr	r3, [pc, #360]	; (8002578 <HAL_GPIO_Init+0x300>)
 8002410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002412:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002416:	60fb      	str	r3, [r7, #12]
 8002418:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800241a:	4a58      	ldr	r2, [pc, #352]	; (800257c <HAL_GPIO_Init+0x304>)
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	089b      	lsrs	r3, r3, #2
 8002420:	3302      	adds	r3, #2
 8002422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002426:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	f003 0303 	and.w	r3, r3, #3
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	220f      	movs	r2, #15
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	43db      	mvns	r3, r3
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	4013      	ands	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a4f      	ldr	r2, [pc, #316]	; (8002580 <HAL_GPIO_Init+0x308>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d025      	beq.n	8002492 <HAL_GPIO_Init+0x21a>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a4e      	ldr	r2, [pc, #312]	; (8002584 <HAL_GPIO_Init+0x30c>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d01f      	beq.n	800248e <HAL_GPIO_Init+0x216>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a4d      	ldr	r2, [pc, #308]	; (8002588 <HAL_GPIO_Init+0x310>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d019      	beq.n	800248a <HAL_GPIO_Init+0x212>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a4c      	ldr	r2, [pc, #304]	; (800258c <HAL_GPIO_Init+0x314>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d013      	beq.n	8002486 <HAL_GPIO_Init+0x20e>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a4b      	ldr	r2, [pc, #300]	; (8002590 <HAL_GPIO_Init+0x318>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d00d      	beq.n	8002482 <HAL_GPIO_Init+0x20a>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a4a      	ldr	r2, [pc, #296]	; (8002594 <HAL_GPIO_Init+0x31c>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d007      	beq.n	800247e <HAL_GPIO_Init+0x206>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a49      	ldr	r2, [pc, #292]	; (8002598 <HAL_GPIO_Init+0x320>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d101      	bne.n	800247a <HAL_GPIO_Init+0x202>
 8002476:	2306      	movs	r3, #6
 8002478:	e00c      	b.n	8002494 <HAL_GPIO_Init+0x21c>
 800247a:	2307      	movs	r3, #7
 800247c:	e00a      	b.n	8002494 <HAL_GPIO_Init+0x21c>
 800247e:	2305      	movs	r3, #5
 8002480:	e008      	b.n	8002494 <HAL_GPIO_Init+0x21c>
 8002482:	2304      	movs	r3, #4
 8002484:	e006      	b.n	8002494 <HAL_GPIO_Init+0x21c>
 8002486:	2303      	movs	r3, #3
 8002488:	e004      	b.n	8002494 <HAL_GPIO_Init+0x21c>
 800248a:	2302      	movs	r3, #2
 800248c:	e002      	b.n	8002494 <HAL_GPIO_Init+0x21c>
 800248e:	2301      	movs	r3, #1
 8002490:	e000      	b.n	8002494 <HAL_GPIO_Init+0x21c>
 8002492:	2300      	movs	r3, #0
 8002494:	69fa      	ldr	r2, [r7, #28]
 8002496:	f002 0203 	and.w	r2, r2, #3
 800249a:	0092      	lsls	r2, r2, #2
 800249c:	4093      	lsls	r3, r2
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024a4:	4935      	ldr	r1, [pc, #212]	; (800257c <HAL_GPIO_Init+0x304>)
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	089b      	lsrs	r3, r3, #2
 80024aa:	3302      	adds	r3, #2
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024b2:	4b3a      	ldr	r3, [pc, #232]	; (800259c <HAL_GPIO_Init+0x324>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	43db      	mvns	r3, r3
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	4013      	ands	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d003      	beq.n	80024d6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024d6:	4a31      	ldr	r2, [pc, #196]	; (800259c <HAL_GPIO_Init+0x324>)
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024dc:	4b2f      	ldr	r3, [pc, #188]	; (800259c <HAL_GPIO_Init+0x324>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	43db      	mvns	r3, r3
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	4013      	ands	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d003      	beq.n	8002500 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002500:	4a26      	ldr	r2, [pc, #152]	; (800259c <HAL_GPIO_Init+0x324>)
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002506:	4b25      	ldr	r3, [pc, #148]	; (800259c <HAL_GPIO_Init+0x324>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	43db      	mvns	r3, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4013      	ands	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	4313      	orrs	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800252a:	4a1c      	ldr	r2, [pc, #112]	; (800259c <HAL_GPIO_Init+0x324>)
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002530:	4b1a      	ldr	r3, [pc, #104]	; (800259c <HAL_GPIO_Init+0x324>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	43db      	mvns	r3, r3
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4013      	ands	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d003      	beq.n	8002554 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	4313      	orrs	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002554:	4a11      	ldr	r2, [pc, #68]	; (800259c <HAL_GPIO_Init+0x324>)
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	3301      	adds	r3, #1
 800255e:	61fb      	str	r3, [r7, #28]
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	2b0f      	cmp	r3, #15
 8002564:	f67f ae96 	bls.w	8002294 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002568:	bf00      	nop
 800256a:	bf00      	nop
 800256c:	3724      	adds	r7, #36	; 0x24
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	40023800 	.word	0x40023800
 800257c:	40013800 	.word	0x40013800
 8002580:	40020000 	.word	0x40020000
 8002584:	40020400 	.word	0x40020400
 8002588:	40020800 	.word	0x40020800
 800258c:	40020c00 	.word	0x40020c00
 8002590:	40021000 	.word	0x40021000
 8002594:	40021400 	.word	0x40021400
 8002598:	40021800 	.word	0x40021800
 800259c:	40013c00 	.word	0x40013c00

080025a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	460b      	mov	r3, r1
 80025aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	691a      	ldr	r2, [r3, #16]
 80025b0:	887b      	ldrh	r3, [r7, #2]
 80025b2:	4013      	ands	r3, r2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d002      	beq.n	80025be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025b8:	2301      	movs	r3, #1
 80025ba:	73fb      	strb	r3, [r7, #15]
 80025bc:	e001      	b.n	80025c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025be:	2300      	movs	r3, #0
 80025c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3714      	adds	r7, #20
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	460b      	mov	r3, r1
 80025da:	807b      	strh	r3, [r7, #2]
 80025dc:	4613      	mov	r3, r2
 80025de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025e0:	787b      	ldrb	r3, [r7, #1]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d003      	beq.n	80025ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025e6:	887a      	ldrh	r2, [r7, #2]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025ec:	e003      	b.n	80025f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025ee:	887b      	ldrh	r3, [r7, #2]
 80025f0:	041a      	lsls	r2, r3, #16
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	619a      	str	r2, [r3, #24]
}
 80025f6:	bf00      	nop
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
	...

08002604 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d101      	bne.n	8002618 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e0cc      	b.n	80027b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002618:	4b68      	ldr	r3, [pc, #416]	; (80027bc <HAL_RCC_ClockConfig+0x1b8>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 030f 	and.w	r3, r3, #15
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	429a      	cmp	r2, r3
 8002624:	d90c      	bls.n	8002640 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002626:	4b65      	ldr	r3, [pc, #404]	; (80027bc <HAL_RCC_ClockConfig+0x1b8>)
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	b2d2      	uxtb	r2, r2
 800262c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800262e:	4b63      	ldr	r3, [pc, #396]	; (80027bc <HAL_RCC_ClockConfig+0x1b8>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 030f 	and.w	r3, r3, #15
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	429a      	cmp	r2, r3
 800263a:	d001      	beq.n	8002640 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e0b8      	b.n	80027b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d020      	beq.n	800268e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	2b00      	cmp	r3, #0
 8002656:	d005      	beq.n	8002664 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002658:	4b59      	ldr	r3, [pc, #356]	; (80027c0 <HAL_RCC_ClockConfig+0x1bc>)
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	4a58      	ldr	r2, [pc, #352]	; (80027c0 <HAL_RCC_ClockConfig+0x1bc>)
 800265e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002662:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0308 	and.w	r3, r3, #8
 800266c:	2b00      	cmp	r3, #0
 800266e:	d005      	beq.n	800267c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002670:	4b53      	ldr	r3, [pc, #332]	; (80027c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	4a52      	ldr	r2, [pc, #328]	; (80027c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002676:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800267a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800267c:	4b50      	ldr	r3, [pc, #320]	; (80027c0 <HAL_RCC_ClockConfig+0x1bc>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	494d      	ldr	r1, [pc, #308]	; (80027c0 <HAL_RCC_ClockConfig+0x1bc>)
 800268a:	4313      	orrs	r3, r2
 800268c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b00      	cmp	r3, #0
 8002698:	d044      	beq.n	8002724 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d107      	bne.n	80026b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026a2:	4b47      	ldr	r3, [pc, #284]	; (80027c0 <HAL_RCC_ClockConfig+0x1bc>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d119      	bne.n	80026e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e07f      	b.n	80027b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d003      	beq.n	80026c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026be:	2b03      	cmp	r3, #3
 80026c0:	d107      	bne.n	80026d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026c2:	4b3f      	ldr	r3, [pc, #252]	; (80027c0 <HAL_RCC_ClockConfig+0x1bc>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d109      	bne.n	80026e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e06f      	b.n	80027b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026d2:	4b3b      	ldr	r3, [pc, #236]	; (80027c0 <HAL_RCC_ClockConfig+0x1bc>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e067      	b.n	80027b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026e2:	4b37      	ldr	r3, [pc, #220]	; (80027c0 <HAL_RCC_ClockConfig+0x1bc>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f023 0203 	bic.w	r2, r3, #3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	4934      	ldr	r1, [pc, #208]	; (80027c0 <HAL_RCC_ClockConfig+0x1bc>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026f4:	f7ff f904 	bl	8001900 <HAL_GetTick>
 80026f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026fa:	e00a      	b.n	8002712 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026fc:	f7ff f900 	bl	8001900 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	f241 3288 	movw	r2, #5000	; 0x1388
 800270a:	4293      	cmp	r3, r2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e04f      	b.n	80027b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002712:	4b2b      	ldr	r3, [pc, #172]	; (80027c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 020c 	and.w	r2, r3, #12
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	429a      	cmp	r2, r3
 8002722:	d1eb      	bne.n	80026fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002724:	4b25      	ldr	r3, [pc, #148]	; (80027bc <HAL_RCC_ClockConfig+0x1b8>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 030f 	and.w	r3, r3, #15
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	429a      	cmp	r2, r3
 8002730:	d20c      	bcs.n	800274c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002732:	4b22      	ldr	r3, [pc, #136]	; (80027bc <HAL_RCC_ClockConfig+0x1b8>)
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	b2d2      	uxtb	r2, r2
 8002738:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800273a:	4b20      	ldr	r3, [pc, #128]	; (80027bc <HAL_RCC_ClockConfig+0x1b8>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 030f 	and.w	r3, r3, #15
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	429a      	cmp	r2, r3
 8002746:	d001      	beq.n	800274c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e032      	b.n	80027b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	2b00      	cmp	r3, #0
 8002756:	d008      	beq.n	800276a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002758:	4b19      	ldr	r3, [pc, #100]	; (80027c0 <HAL_RCC_ClockConfig+0x1bc>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	4916      	ldr	r1, [pc, #88]	; (80027c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002766:	4313      	orrs	r3, r2
 8002768:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0308 	and.w	r3, r3, #8
 8002772:	2b00      	cmp	r3, #0
 8002774:	d009      	beq.n	800278a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002776:	4b12      	ldr	r3, [pc, #72]	; (80027c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	490e      	ldr	r1, [pc, #56]	; (80027c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002786:	4313      	orrs	r3, r2
 8002788:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800278a:	f000 f855 	bl	8002838 <HAL_RCC_GetSysClockFreq>
 800278e:	4602      	mov	r2, r0
 8002790:	4b0b      	ldr	r3, [pc, #44]	; (80027c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	091b      	lsrs	r3, r3, #4
 8002796:	f003 030f 	and.w	r3, r3, #15
 800279a:	490a      	ldr	r1, [pc, #40]	; (80027c4 <HAL_RCC_ClockConfig+0x1c0>)
 800279c:	5ccb      	ldrb	r3, [r1, r3]
 800279e:	fa22 f303 	lsr.w	r3, r2, r3
 80027a2:	4a09      	ldr	r2, [pc, #36]	; (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 80027a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027a6:	4b09      	ldr	r3, [pc, #36]	; (80027cc <HAL_RCC_ClockConfig+0x1c8>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff f864 	bl	8001878 <HAL_InitTick>

  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	40023c00 	.word	0x40023c00
 80027c0:	40023800 	.word	0x40023800
 80027c4:	08004990 	.word	0x08004990
 80027c8:	20000008 	.word	0x20000008
 80027cc:	2000000c 	.word	0x2000000c

080027d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027d4:	4b03      	ldr	r3, [pc, #12]	; (80027e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80027d6:	681b      	ldr	r3, [r3, #0]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	20000008 	.word	0x20000008

080027e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80027ec:	f7ff fff0 	bl	80027d0 <HAL_RCC_GetHCLKFreq>
 80027f0:	4602      	mov	r2, r0
 80027f2:	4b05      	ldr	r3, [pc, #20]	; (8002808 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	0a9b      	lsrs	r3, r3, #10
 80027f8:	f003 0307 	and.w	r3, r3, #7
 80027fc:	4903      	ldr	r1, [pc, #12]	; (800280c <HAL_RCC_GetPCLK1Freq+0x24>)
 80027fe:	5ccb      	ldrb	r3, [r1, r3]
 8002800:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002804:	4618      	mov	r0, r3
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40023800 	.word	0x40023800
 800280c:	080049a0 	.word	0x080049a0

08002810 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002814:	f7ff ffdc 	bl	80027d0 <HAL_RCC_GetHCLKFreq>
 8002818:	4602      	mov	r2, r0
 800281a:	4b05      	ldr	r3, [pc, #20]	; (8002830 <HAL_RCC_GetPCLK2Freq+0x20>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	0b5b      	lsrs	r3, r3, #13
 8002820:	f003 0307 	and.w	r3, r3, #7
 8002824:	4903      	ldr	r1, [pc, #12]	; (8002834 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002826:	5ccb      	ldrb	r3, [r1, r3]
 8002828:	fa22 f303 	lsr.w	r3, r2, r3
}
 800282c:	4618      	mov	r0, r3
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40023800 	.word	0x40023800
 8002834:	080049a0 	.word	0x080049a0

08002838 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002838:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800283c:	b0ae      	sub	sp, #184	; 0xb8
 800283e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002840:	2300      	movs	r3, #0
 8002842:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002846:	2300      	movs	r3, #0
 8002848:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800284c:	2300      	movs	r3, #0
 800284e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002852:	2300      	movs	r3, #0
 8002854:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002858:	2300      	movs	r3, #0
 800285a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800285e:	4bcb      	ldr	r3, [pc, #812]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x354>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f003 030c 	and.w	r3, r3, #12
 8002866:	2b0c      	cmp	r3, #12
 8002868:	f200 8206 	bhi.w	8002c78 <HAL_RCC_GetSysClockFreq+0x440>
 800286c:	a201      	add	r2, pc, #4	; (adr r2, 8002874 <HAL_RCC_GetSysClockFreq+0x3c>)
 800286e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002872:	bf00      	nop
 8002874:	080028a9 	.word	0x080028a9
 8002878:	08002c79 	.word	0x08002c79
 800287c:	08002c79 	.word	0x08002c79
 8002880:	08002c79 	.word	0x08002c79
 8002884:	080028b1 	.word	0x080028b1
 8002888:	08002c79 	.word	0x08002c79
 800288c:	08002c79 	.word	0x08002c79
 8002890:	08002c79 	.word	0x08002c79
 8002894:	080028b9 	.word	0x080028b9
 8002898:	08002c79 	.word	0x08002c79
 800289c:	08002c79 	.word	0x08002c79
 80028a0:	08002c79 	.word	0x08002c79
 80028a4:	08002aa9 	.word	0x08002aa9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028a8:	4bb9      	ldr	r3, [pc, #740]	; (8002b90 <HAL_RCC_GetSysClockFreq+0x358>)
 80028aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80028ae:	e1e7      	b.n	8002c80 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028b0:	4bb8      	ldr	r3, [pc, #736]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x35c>)
 80028b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80028b6:	e1e3      	b.n	8002c80 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028b8:	4bb4      	ldr	r3, [pc, #720]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x354>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028c4:	4bb1      	ldr	r3, [pc, #708]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x354>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d071      	beq.n	80029b4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028d0:	4bae      	ldr	r3, [pc, #696]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x354>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	099b      	lsrs	r3, r3, #6
 80028d6:	2200      	movs	r2, #0
 80028d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80028dc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80028e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80028ec:	2300      	movs	r3, #0
 80028ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80028f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80028f6:	4622      	mov	r2, r4
 80028f8:	462b      	mov	r3, r5
 80028fa:	f04f 0000 	mov.w	r0, #0
 80028fe:	f04f 0100 	mov.w	r1, #0
 8002902:	0159      	lsls	r1, r3, #5
 8002904:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002908:	0150      	lsls	r0, r2, #5
 800290a:	4602      	mov	r2, r0
 800290c:	460b      	mov	r3, r1
 800290e:	4621      	mov	r1, r4
 8002910:	1a51      	subs	r1, r2, r1
 8002912:	6439      	str	r1, [r7, #64]	; 0x40
 8002914:	4629      	mov	r1, r5
 8002916:	eb63 0301 	sbc.w	r3, r3, r1
 800291a:	647b      	str	r3, [r7, #68]	; 0x44
 800291c:	f04f 0200 	mov.w	r2, #0
 8002920:	f04f 0300 	mov.w	r3, #0
 8002924:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002928:	4649      	mov	r1, r9
 800292a:	018b      	lsls	r3, r1, #6
 800292c:	4641      	mov	r1, r8
 800292e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002932:	4641      	mov	r1, r8
 8002934:	018a      	lsls	r2, r1, #6
 8002936:	4641      	mov	r1, r8
 8002938:	1a51      	subs	r1, r2, r1
 800293a:	63b9      	str	r1, [r7, #56]	; 0x38
 800293c:	4649      	mov	r1, r9
 800293e:	eb63 0301 	sbc.w	r3, r3, r1
 8002942:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002944:	f04f 0200 	mov.w	r2, #0
 8002948:	f04f 0300 	mov.w	r3, #0
 800294c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002950:	4649      	mov	r1, r9
 8002952:	00cb      	lsls	r3, r1, #3
 8002954:	4641      	mov	r1, r8
 8002956:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800295a:	4641      	mov	r1, r8
 800295c:	00ca      	lsls	r2, r1, #3
 800295e:	4610      	mov	r0, r2
 8002960:	4619      	mov	r1, r3
 8002962:	4603      	mov	r3, r0
 8002964:	4622      	mov	r2, r4
 8002966:	189b      	adds	r3, r3, r2
 8002968:	633b      	str	r3, [r7, #48]	; 0x30
 800296a:	462b      	mov	r3, r5
 800296c:	460a      	mov	r2, r1
 800296e:	eb42 0303 	adc.w	r3, r2, r3
 8002972:	637b      	str	r3, [r7, #52]	; 0x34
 8002974:	f04f 0200 	mov.w	r2, #0
 8002978:	f04f 0300 	mov.w	r3, #0
 800297c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002980:	4629      	mov	r1, r5
 8002982:	024b      	lsls	r3, r1, #9
 8002984:	4621      	mov	r1, r4
 8002986:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800298a:	4621      	mov	r1, r4
 800298c:	024a      	lsls	r2, r1, #9
 800298e:	4610      	mov	r0, r2
 8002990:	4619      	mov	r1, r3
 8002992:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002996:	2200      	movs	r2, #0
 8002998:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800299c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80029a0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80029a4:	f7fd fc8c 	bl	80002c0 <__aeabi_uldivmod>
 80029a8:	4602      	mov	r2, r0
 80029aa:	460b      	mov	r3, r1
 80029ac:	4613      	mov	r3, r2
 80029ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80029b2:	e067      	b.n	8002a84 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029b4:	4b75      	ldr	r3, [pc, #468]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x354>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	099b      	lsrs	r3, r3, #6
 80029ba:	2200      	movs	r2, #0
 80029bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80029c0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80029c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80029ce:	2300      	movs	r3, #0
 80029d0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80029d2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80029d6:	4622      	mov	r2, r4
 80029d8:	462b      	mov	r3, r5
 80029da:	f04f 0000 	mov.w	r0, #0
 80029de:	f04f 0100 	mov.w	r1, #0
 80029e2:	0159      	lsls	r1, r3, #5
 80029e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029e8:	0150      	lsls	r0, r2, #5
 80029ea:	4602      	mov	r2, r0
 80029ec:	460b      	mov	r3, r1
 80029ee:	4621      	mov	r1, r4
 80029f0:	1a51      	subs	r1, r2, r1
 80029f2:	62b9      	str	r1, [r7, #40]	; 0x28
 80029f4:	4629      	mov	r1, r5
 80029f6:	eb63 0301 	sbc.w	r3, r3, r1
 80029fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029fc:	f04f 0200 	mov.w	r2, #0
 8002a00:	f04f 0300 	mov.w	r3, #0
 8002a04:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002a08:	4649      	mov	r1, r9
 8002a0a:	018b      	lsls	r3, r1, #6
 8002a0c:	4641      	mov	r1, r8
 8002a0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a12:	4641      	mov	r1, r8
 8002a14:	018a      	lsls	r2, r1, #6
 8002a16:	4641      	mov	r1, r8
 8002a18:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a1c:	4649      	mov	r1, r9
 8002a1e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a22:	f04f 0200 	mov.w	r2, #0
 8002a26:	f04f 0300 	mov.w	r3, #0
 8002a2a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a2e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a32:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a36:	4692      	mov	sl, r2
 8002a38:	469b      	mov	fp, r3
 8002a3a:	4623      	mov	r3, r4
 8002a3c:	eb1a 0303 	adds.w	r3, sl, r3
 8002a40:	623b      	str	r3, [r7, #32]
 8002a42:	462b      	mov	r3, r5
 8002a44:	eb4b 0303 	adc.w	r3, fp, r3
 8002a48:	627b      	str	r3, [r7, #36]	; 0x24
 8002a4a:	f04f 0200 	mov.w	r2, #0
 8002a4e:	f04f 0300 	mov.w	r3, #0
 8002a52:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002a56:	4629      	mov	r1, r5
 8002a58:	028b      	lsls	r3, r1, #10
 8002a5a:	4621      	mov	r1, r4
 8002a5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a60:	4621      	mov	r1, r4
 8002a62:	028a      	lsls	r2, r1, #10
 8002a64:	4610      	mov	r0, r2
 8002a66:	4619      	mov	r1, r3
 8002a68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	673b      	str	r3, [r7, #112]	; 0x70
 8002a70:	677a      	str	r2, [r7, #116]	; 0x74
 8002a72:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002a76:	f7fd fc23 	bl	80002c0 <__aeabi_uldivmod>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	4613      	mov	r3, r2
 8002a80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a84:	4b41      	ldr	r3, [pc, #260]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x354>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	0c1b      	lsrs	r3, r3, #16
 8002a8a:	f003 0303 	and.w	r3, r3, #3
 8002a8e:	3301      	adds	r3, #1
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002a96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002a9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002aa6:	e0eb      	b.n	8002c80 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002aa8:	4b38      	ldr	r3, [pc, #224]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x354>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ab0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ab4:	4b35      	ldr	r3, [pc, #212]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x354>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d06b      	beq.n	8002b98 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ac0:	4b32      	ldr	r3, [pc, #200]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x354>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	099b      	lsrs	r3, r3, #6
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	66bb      	str	r3, [r7, #104]	; 0x68
 8002aca:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002acc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ad2:	663b      	str	r3, [r7, #96]	; 0x60
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	667b      	str	r3, [r7, #100]	; 0x64
 8002ad8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002adc:	4622      	mov	r2, r4
 8002ade:	462b      	mov	r3, r5
 8002ae0:	f04f 0000 	mov.w	r0, #0
 8002ae4:	f04f 0100 	mov.w	r1, #0
 8002ae8:	0159      	lsls	r1, r3, #5
 8002aea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002aee:	0150      	lsls	r0, r2, #5
 8002af0:	4602      	mov	r2, r0
 8002af2:	460b      	mov	r3, r1
 8002af4:	4621      	mov	r1, r4
 8002af6:	1a51      	subs	r1, r2, r1
 8002af8:	61b9      	str	r1, [r7, #24]
 8002afa:	4629      	mov	r1, r5
 8002afc:	eb63 0301 	sbc.w	r3, r3, r1
 8002b00:	61fb      	str	r3, [r7, #28]
 8002b02:	f04f 0200 	mov.w	r2, #0
 8002b06:	f04f 0300 	mov.w	r3, #0
 8002b0a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002b0e:	4659      	mov	r1, fp
 8002b10:	018b      	lsls	r3, r1, #6
 8002b12:	4651      	mov	r1, sl
 8002b14:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b18:	4651      	mov	r1, sl
 8002b1a:	018a      	lsls	r2, r1, #6
 8002b1c:	4651      	mov	r1, sl
 8002b1e:	ebb2 0801 	subs.w	r8, r2, r1
 8002b22:	4659      	mov	r1, fp
 8002b24:	eb63 0901 	sbc.w	r9, r3, r1
 8002b28:	f04f 0200 	mov.w	r2, #0
 8002b2c:	f04f 0300 	mov.w	r3, #0
 8002b30:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b34:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b38:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b3c:	4690      	mov	r8, r2
 8002b3e:	4699      	mov	r9, r3
 8002b40:	4623      	mov	r3, r4
 8002b42:	eb18 0303 	adds.w	r3, r8, r3
 8002b46:	613b      	str	r3, [r7, #16]
 8002b48:	462b      	mov	r3, r5
 8002b4a:	eb49 0303 	adc.w	r3, r9, r3
 8002b4e:	617b      	str	r3, [r7, #20]
 8002b50:	f04f 0200 	mov.w	r2, #0
 8002b54:	f04f 0300 	mov.w	r3, #0
 8002b58:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002b5c:	4629      	mov	r1, r5
 8002b5e:	024b      	lsls	r3, r1, #9
 8002b60:	4621      	mov	r1, r4
 8002b62:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b66:	4621      	mov	r1, r4
 8002b68:	024a      	lsls	r2, r1, #9
 8002b6a:	4610      	mov	r0, r2
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b72:	2200      	movs	r2, #0
 8002b74:	65bb      	str	r3, [r7, #88]	; 0x58
 8002b76:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002b78:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002b7c:	f7fd fba0 	bl	80002c0 <__aeabi_uldivmod>
 8002b80:	4602      	mov	r2, r0
 8002b82:	460b      	mov	r3, r1
 8002b84:	4613      	mov	r3, r2
 8002b86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b8a:	e065      	b.n	8002c58 <HAL_RCC_GetSysClockFreq+0x420>
 8002b8c:	40023800 	.word	0x40023800
 8002b90:	00f42400 	.word	0x00f42400
 8002b94:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b98:	4b3d      	ldr	r3, [pc, #244]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x458>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	099b      	lsrs	r3, r3, #6
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	4611      	mov	r1, r2
 8002ba4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ba8:	653b      	str	r3, [r7, #80]	; 0x50
 8002baa:	2300      	movs	r3, #0
 8002bac:	657b      	str	r3, [r7, #84]	; 0x54
 8002bae:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002bb2:	4642      	mov	r2, r8
 8002bb4:	464b      	mov	r3, r9
 8002bb6:	f04f 0000 	mov.w	r0, #0
 8002bba:	f04f 0100 	mov.w	r1, #0
 8002bbe:	0159      	lsls	r1, r3, #5
 8002bc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bc4:	0150      	lsls	r0, r2, #5
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	460b      	mov	r3, r1
 8002bca:	4641      	mov	r1, r8
 8002bcc:	1a51      	subs	r1, r2, r1
 8002bce:	60b9      	str	r1, [r7, #8]
 8002bd0:	4649      	mov	r1, r9
 8002bd2:	eb63 0301 	sbc.w	r3, r3, r1
 8002bd6:	60fb      	str	r3, [r7, #12]
 8002bd8:	f04f 0200 	mov.w	r2, #0
 8002bdc:	f04f 0300 	mov.w	r3, #0
 8002be0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002be4:	4659      	mov	r1, fp
 8002be6:	018b      	lsls	r3, r1, #6
 8002be8:	4651      	mov	r1, sl
 8002bea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bee:	4651      	mov	r1, sl
 8002bf0:	018a      	lsls	r2, r1, #6
 8002bf2:	4651      	mov	r1, sl
 8002bf4:	1a54      	subs	r4, r2, r1
 8002bf6:	4659      	mov	r1, fp
 8002bf8:	eb63 0501 	sbc.w	r5, r3, r1
 8002bfc:	f04f 0200 	mov.w	r2, #0
 8002c00:	f04f 0300 	mov.w	r3, #0
 8002c04:	00eb      	lsls	r3, r5, #3
 8002c06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c0a:	00e2      	lsls	r2, r4, #3
 8002c0c:	4614      	mov	r4, r2
 8002c0e:	461d      	mov	r5, r3
 8002c10:	4643      	mov	r3, r8
 8002c12:	18e3      	adds	r3, r4, r3
 8002c14:	603b      	str	r3, [r7, #0]
 8002c16:	464b      	mov	r3, r9
 8002c18:	eb45 0303 	adc.w	r3, r5, r3
 8002c1c:	607b      	str	r3, [r7, #4]
 8002c1e:	f04f 0200 	mov.w	r2, #0
 8002c22:	f04f 0300 	mov.w	r3, #0
 8002c26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c2a:	4629      	mov	r1, r5
 8002c2c:	028b      	lsls	r3, r1, #10
 8002c2e:	4621      	mov	r1, r4
 8002c30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c34:	4621      	mov	r1, r4
 8002c36:	028a      	lsls	r2, r1, #10
 8002c38:	4610      	mov	r0, r2
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c40:	2200      	movs	r2, #0
 8002c42:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c44:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002c46:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002c4a:	f7fd fb39 	bl	80002c0 <__aeabi_uldivmod>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	460b      	mov	r3, r1
 8002c52:	4613      	mov	r3, r2
 8002c54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002c58:	4b0d      	ldr	r3, [pc, #52]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x458>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	0f1b      	lsrs	r3, r3, #28
 8002c5e:	f003 0307 	and.w	r3, r3, #7
 8002c62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002c66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002c6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002c76:	e003      	b.n	8002c80 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c78:	4b06      	ldr	r3, [pc, #24]	; (8002c94 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002c7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002c7e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	37b8      	adds	r7, #184	; 0xb8
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c8e:	bf00      	nop
 8002c90:	40023800 	.word	0x40023800
 8002c94:	00f42400 	.word	0x00f42400

08002c98 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e28d      	b.n	80031c6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f000 8083 	beq.w	8002dbe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002cb8:	4b94      	ldr	r3, [pc, #592]	; (8002f0c <HAL_RCC_OscConfig+0x274>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f003 030c 	and.w	r3, r3, #12
 8002cc0:	2b04      	cmp	r3, #4
 8002cc2:	d019      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002cc4:	4b91      	ldr	r3, [pc, #580]	; (8002f0c <HAL_RCC_OscConfig+0x274>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ccc:	2b08      	cmp	r3, #8
 8002cce:	d106      	bne.n	8002cde <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002cd0:	4b8e      	ldr	r3, [pc, #568]	; (8002f0c <HAL_RCC_OscConfig+0x274>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cdc:	d00c      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cde:	4b8b      	ldr	r3, [pc, #556]	; (8002f0c <HAL_RCC_OscConfig+0x274>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002ce6:	2b0c      	cmp	r3, #12
 8002ce8:	d112      	bne.n	8002d10 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cea:	4b88      	ldr	r3, [pc, #544]	; (8002f0c <HAL_RCC_OscConfig+0x274>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cf2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cf6:	d10b      	bne.n	8002d10 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cf8:	4b84      	ldr	r3, [pc, #528]	; (8002f0c <HAL_RCC_OscConfig+0x274>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d05b      	beq.n	8002dbc <HAL_RCC_OscConfig+0x124>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d157      	bne.n	8002dbc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e25a      	b.n	80031c6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d18:	d106      	bne.n	8002d28 <HAL_RCC_OscConfig+0x90>
 8002d1a:	4b7c      	ldr	r3, [pc, #496]	; (8002f0c <HAL_RCC_OscConfig+0x274>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a7b      	ldr	r2, [pc, #492]	; (8002f0c <HAL_RCC_OscConfig+0x274>)
 8002d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d24:	6013      	str	r3, [r2, #0]
 8002d26:	e01d      	b.n	8002d64 <HAL_RCC_OscConfig+0xcc>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d30:	d10c      	bne.n	8002d4c <HAL_RCC_OscConfig+0xb4>
 8002d32:	4b76      	ldr	r3, [pc, #472]	; (8002f0c <HAL_RCC_OscConfig+0x274>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a75      	ldr	r2, [pc, #468]	; (8002f0c <HAL_RCC_OscConfig+0x274>)
 8002d38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d3c:	6013      	str	r3, [r2, #0]
 8002d3e:	4b73      	ldr	r3, [pc, #460]	; (8002f0c <HAL_RCC_OscConfig+0x274>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a72      	ldr	r2, [pc, #456]	; (8002f0c <HAL_RCC_OscConfig+0x274>)
 8002d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d48:	6013      	str	r3, [r2, #0]
 8002d4a:	e00b      	b.n	8002d64 <HAL_RCC_OscConfig+0xcc>
 8002d4c:	4b6f      	ldr	r3, [pc, #444]	; (8002f0c <HAL_RCC_OscConfig+0x274>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a6e      	ldr	r2, [pc, #440]	; (8002f0c <HAL_RCC_OscConfig+0x274>)
 8002d52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d56:	6013      	str	r3, [r2, #0]
 8002d58:	4b6c      	ldr	r3, [pc, #432]	; (8002f0c <HAL_RCC_OscConfig+0x274>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a6b      	ldr	r2, [pc, #428]	; (8002f0c <HAL_RCC_OscConfig+0x274>)
 8002d5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d013      	beq.n	8002d94 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6c:	f7fe fdc8 	bl	8001900 <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d74:	f7fe fdc4 	bl	8001900 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b64      	cmp	r3, #100	; 0x64
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e21f      	b.n	80031c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d86:	4b61      	ldr	r3, [pc, #388]	; (8002f0c <HAL_RCC_OscConfig+0x274>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d0f0      	beq.n	8002d74 <HAL_RCC_OscConfig+0xdc>
 8002d92:	e014      	b.n	8002dbe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d94:	f7fe fdb4 	bl	8001900 <HAL_GetTick>
 8002d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d9c:	f7fe fdb0 	bl	8001900 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b64      	cmp	r3, #100	; 0x64
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e20b      	b.n	80031c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dae:	4b57      	ldr	r3, [pc, #348]	; (8002f0c <HAL_RCC_OscConfig+0x274>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1f0      	bne.n	8002d9c <HAL_RCC_OscConfig+0x104>
 8002dba:	e000      	b.n	8002dbe <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d06f      	beq.n	8002eaa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002dca:	4b50      	ldr	r3, [pc, #320]	; (8002f0c <HAL_RCC_OscConfig+0x274>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f003 030c 	and.w	r3, r3, #12
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d017      	beq.n	8002e06 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002dd6:	4b4d      	ldr	r3, [pc, #308]	; (8002f0c <HAL_RCC_OscConfig+0x274>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002dde:	2b08      	cmp	r3, #8
 8002de0:	d105      	bne.n	8002dee <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002de2:	4b4a      	ldr	r3, [pc, #296]	; (8002f0c <HAL_RCC_OscConfig+0x274>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00b      	beq.n	8002e06 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dee:	4b47      	ldr	r3, [pc, #284]	; (8002f0c <HAL_RCC_OscConfig+0x274>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002df6:	2b0c      	cmp	r3, #12
 8002df8:	d11c      	bne.n	8002e34 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dfa:	4b44      	ldr	r3, [pc, #272]	; (8002f0c <HAL_RCC_OscConfig+0x274>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d116      	bne.n	8002e34 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e06:	4b41      	ldr	r3, [pc, #260]	; (8002f0c <HAL_RCC_OscConfig+0x274>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d005      	beq.n	8002e1e <HAL_RCC_OscConfig+0x186>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d001      	beq.n	8002e1e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e1d3      	b.n	80031c6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e1e:	4b3b      	ldr	r3, [pc, #236]	; (8002f0c <HAL_RCC_OscConfig+0x274>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	4937      	ldr	r1, [pc, #220]	; (8002f0c <HAL_RCC_OscConfig+0x274>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e32:	e03a      	b.n	8002eaa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d020      	beq.n	8002e7e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e3c:	4b34      	ldr	r3, [pc, #208]	; (8002f10 <HAL_RCC_OscConfig+0x278>)
 8002e3e:	2201      	movs	r2, #1
 8002e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e42:	f7fe fd5d 	bl	8001900 <HAL_GetTick>
 8002e46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e48:	e008      	b.n	8002e5c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e4a:	f7fe fd59 	bl	8001900 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e1b4      	b.n	80031c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e5c:	4b2b      	ldr	r3, [pc, #172]	; (8002f0c <HAL_RCC_OscConfig+0x274>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0f0      	beq.n	8002e4a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e68:	4b28      	ldr	r3, [pc, #160]	; (8002f0c <HAL_RCC_OscConfig+0x274>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	4925      	ldr	r1, [pc, #148]	; (8002f0c <HAL_RCC_OscConfig+0x274>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	600b      	str	r3, [r1, #0]
 8002e7c:	e015      	b.n	8002eaa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e7e:	4b24      	ldr	r3, [pc, #144]	; (8002f10 <HAL_RCC_OscConfig+0x278>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e84:	f7fe fd3c 	bl	8001900 <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e8c:	f7fe fd38 	bl	8001900 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e193      	b.n	80031c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e9e:	4b1b      	ldr	r3, [pc, #108]	; (8002f0c <HAL_RCC_OscConfig+0x274>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1f0      	bne.n	8002e8c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0308 	and.w	r3, r3, #8
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d036      	beq.n	8002f24 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d016      	beq.n	8002eec <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ebe:	4b15      	ldr	r3, [pc, #84]	; (8002f14 <HAL_RCC_OscConfig+0x27c>)
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec4:	f7fe fd1c 	bl	8001900 <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ecc:	f7fe fd18 	bl	8001900 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e173      	b.n	80031c6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ede:	4b0b      	ldr	r3, [pc, #44]	; (8002f0c <HAL_RCC_OscConfig+0x274>)
 8002ee0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d0f0      	beq.n	8002ecc <HAL_RCC_OscConfig+0x234>
 8002eea:	e01b      	b.n	8002f24 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eec:	4b09      	ldr	r3, [pc, #36]	; (8002f14 <HAL_RCC_OscConfig+0x27c>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef2:	f7fe fd05 	bl	8001900 <HAL_GetTick>
 8002ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ef8:	e00e      	b.n	8002f18 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002efa:	f7fe fd01 	bl	8001900 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d907      	bls.n	8002f18 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e15c      	b.n	80031c6 <HAL_RCC_OscConfig+0x52e>
 8002f0c:	40023800 	.word	0x40023800
 8002f10:	42470000 	.word	0x42470000
 8002f14:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f18:	4b8a      	ldr	r3, [pc, #552]	; (8003144 <HAL_RCC_OscConfig+0x4ac>)
 8002f1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1ea      	bne.n	8002efa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0304 	and.w	r3, r3, #4
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f000 8097 	beq.w	8003060 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f32:	2300      	movs	r3, #0
 8002f34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f36:	4b83      	ldr	r3, [pc, #524]	; (8003144 <HAL_RCC_OscConfig+0x4ac>)
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d10f      	bne.n	8002f62 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f42:	2300      	movs	r3, #0
 8002f44:	60bb      	str	r3, [r7, #8]
 8002f46:	4b7f      	ldr	r3, [pc, #508]	; (8003144 <HAL_RCC_OscConfig+0x4ac>)
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	4a7e      	ldr	r2, [pc, #504]	; (8003144 <HAL_RCC_OscConfig+0x4ac>)
 8002f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f50:	6413      	str	r3, [r2, #64]	; 0x40
 8002f52:	4b7c      	ldr	r3, [pc, #496]	; (8003144 <HAL_RCC_OscConfig+0x4ac>)
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f5a:	60bb      	str	r3, [r7, #8]
 8002f5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f62:	4b79      	ldr	r3, [pc, #484]	; (8003148 <HAL_RCC_OscConfig+0x4b0>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d118      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f6e:	4b76      	ldr	r3, [pc, #472]	; (8003148 <HAL_RCC_OscConfig+0x4b0>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a75      	ldr	r2, [pc, #468]	; (8003148 <HAL_RCC_OscConfig+0x4b0>)
 8002f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f7a:	f7fe fcc1 	bl	8001900 <HAL_GetTick>
 8002f7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f80:	e008      	b.n	8002f94 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f82:	f7fe fcbd 	bl	8001900 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e118      	b.n	80031c6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f94:	4b6c      	ldr	r3, [pc, #432]	; (8003148 <HAL_RCC_OscConfig+0x4b0>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d0f0      	beq.n	8002f82 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d106      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x31e>
 8002fa8:	4b66      	ldr	r3, [pc, #408]	; (8003144 <HAL_RCC_OscConfig+0x4ac>)
 8002faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fac:	4a65      	ldr	r2, [pc, #404]	; (8003144 <HAL_RCC_OscConfig+0x4ac>)
 8002fae:	f043 0301 	orr.w	r3, r3, #1
 8002fb2:	6713      	str	r3, [r2, #112]	; 0x70
 8002fb4:	e01c      	b.n	8002ff0 <HAL_RCC_OscConfig+0x358>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	2b05      	cmp	r3, #5
 8002fbc:	d10c      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x340>
 8002fbe:	4b61      	ldr	r3, [pc, #388]	; (8003144 <HAL_RCC_OscConfig+0x4ac>)
 8002fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc2:	4a60      	ldr	r2, [pc, #384]	; (8003144 <HAL_RCC_OscConfig+0x4ac>)
 8002fc4:	f043 0304 	orr.w	r3, r3, #4
 8002fc8:	6713      	str	r3, [r2, #112]	; 0x70
 8002fca:	4b5e      	ldr	r3, [pc, #376]	; (8003144 <HAL_RCC_OscConfig+0x4ac>)
 8002fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fce:	4a5d      	ldr	r2, [pc, #372]	; (8003144 <HAL_RCC_OscConfig+0x4ac>)
 8002fd0:	f043 0301 	orr.w	r3, r3, #1
 8002fd4:	6713      	str	r3, [r2, #112]	; 0x70
 8002fd6:	e00b      	b.n	8002ff0 <HAL_RCC_OscConfig+0x358>
 8002fd8:	4b5a      	ldr	r3, [pc, #360]	; (8003144 <HAL_RCC_OscConfig+0x4ac>)
 8002fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fdc:	4a59      	ldr	r2, [pc, #356]	; (8003144 <HAL_RCC_OscConfig+0x4ac>)
 8002fde:	f023 0301 	bic.w	r3, r3, #1
 8002fe2:	6713      	str	r3, [r2, #112]	; 0x70
 8002fe4:	4b57      	ldr	r3, [pc, #348]	; (8003144 <HAL_RCC_OscConfig+0x4ac>)
 8002fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe8:	4a56      	ldr	r2, [pc, #344]	; (8003144 <HAL_RCC_OscConfig+0x4ac>)
 8002fea:	f023 0304 	bic.w	r3, r3, #4
 8002fee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d015      	beq.n	8003024 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff8:	f7fe fc82 	bl	8001900 <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ffe:	e00a      	b.n	8003016 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003000:	f7fe fc7e 	bl	8001900 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	f241 3288 	movw	r2, #5000	; 0x1388
 800300e:	4293      	cmp	r3, r2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e0d7      	b.n	80031c6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003016:	4b4b      	ldr	r3, [pc, #300]	; (8003144 <HAL_RCC_OscConfig+0x4ac>)
 8003018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d0ee      	beq.n	8003000 <HAL_RCC_OscConfig+0x368>
 8003022:	e014      	b.n	800304e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003024:	f7fe fc6c 	bl	8001900 <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800302a:	e00a      	b.n	8003042 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800302c:	f7fe fc68 	bl	8001900 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	f241 3288 	movw	r2, #5000	; 0x1388
 800303a:	4293      	cmp	r3, r2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e0c1      	b.n	80031c6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003042:	4b40      	ldr	r3, [pc, #256]	; (8003144 <HAL_RCC_OscConfig+0x4ac>)
 8003044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1ee      	bne.n	800302c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800304e:	7dfb      	ldrb	r3, [r7, #23]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d105      	bne.n	8003060 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003054:	4b3b      	ldr	r3, [pc, #236]	; (8003144 <HAL_RCC_OscConfig+0x4ac>)
 8003056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003058:	4a3a      	ldr	r2, [pc, #232]	; (8003144 <HAL_RCC_OscConfig+0x4ac>)
 800305a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800305e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	2b00      	cmp	r3, #0
 8003066:	f000 80ad 	beq.w	80031c4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800306a:	4b36      	ldr	r3, [pc, #216]	; (8003144 <HAL_RCC_OscConfig+0x4ac>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 030c 	and.w	r3, r3, #12
 8003072:	2b08      	cmp	r3, #8
 8003074:	d060      	beq.n	8003138 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	2b02      	cmp	r3, #2
 800307c:	d145      	bne.n	800310a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800307e:	4b33      	ldr	r3, [pc, #204]	; (800314c <HAL_RCC_OscConfig+0x4b4>)
 8003080:	2200      	movs	r2, #0
 8003082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003084:	f7fe fc3c 	bl	8001900 <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800308c:	f7fe fc38 	bl	8001900 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e093      	b.n	80031c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800309e:	4b29      	ldr	r3, [pc, #164]	; (8003144 <HAL_RCC_OscConfig+0x4ac>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1f0      	bne.n	800308c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	69da      	ldr	r2, [r3, #28]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	431a      	orrs	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b8:	019b      	lsls	r3, r3, #6
 80030ba:	431a      	orrs	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c0:	085b      	lsrs	r3, r3, #1
 80030c2:	3b01      	subs	r3, #1
 80030c4:	041b      	lsls	r3, r3, #16
 80030c6:	431a      	orrs	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030cc:	061b      	lsls	r3, r3, #24
 80030ce:	431a      	orrs	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d4:	071b      	lsls	r3, r3, #28
 80030d6:	491b      	ldr	r1, [pc, #108]	; (8003144 <HAL_RCC_OscConfig+0x4ac>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030dc:	4b1b      	ldr	r3, [pc, #108]	; (800314c <HAL_RCC_OscConfig+0x4b4>)
 80030de:	2201      	movs	r2, #1
 80030e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e2:	f7fe fc0d 	bl	8001900 <HAL_GetTick>
 80030e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030e8:	e008      	b.n	80030fc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ea:	f7fe fc09 	bl	8001900 <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d901      	bls.n	80030fc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e064      	b.n	80031c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030fc:	4b11      	ldr	r3, [pc, #68]	; (8003144 <HAL_RCC_OscConfig+0x4ac>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d0f0      	beq.n	80030ea <HAL_RCC_OscConfig+0x452>
 8003108:	e05c      	b.n	80031c4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800310a:	4b10      	ldr	r3, [pc, #64]	; (800314c <HAL_RCC_OscConfig+0x4b4>)
 800310c:	2200      	movs	r2, #0
 800310e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003110:	f7fe fbf6 	bl	8001900 <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003118:	f7fe fbf2 	bl	8001900 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e04d      	b.n	80031c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800312a:	4b06      	ldr	r3, [pc, #24]	; (8003144 <HAL_RCC_OscConfig+0x4ac>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1f0      	bne.n	8003118 <HAL_RCC_OscConfig+0x480>
 8003136:	e045      	b.n	80031c4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d107      	bne.n	8003150 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e040      	b.n	80031c6 <HAL_RCC_OscConfig+0x52e>
 8003144:	40023800 	.word	0x40023800
 8003148:	40007000 	.word	0x40007000
 800314c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003150:	4b1f      	ldr	r3, [pc, #124]	; (80031d0 <HAL_RCC_OscConfig+0x538>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d030      	beq.n	80031c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003168:	429a      	cmp	r2, r3
 800316a:	d129      	bne.n	80031c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003176:	429a      	cmp	r2, r3
 8003178:	d122      	bne.n	80031c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003180:	4013      	ands	r3, r2
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003186:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003188:	4293      	cmp	r3, r2
 800318a:	d119      	bne.n	80031c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003196:	085b      	lsrs	r3, r3, #1
 8003198:	3b01      	subs	r3, #1
 800319a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800319c:	429a      	cmp	r2, r3
 800319e:	d10f      	bne.n	80031c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d107      	bne.n	80031c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ba:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031bc:	429a      	cmp	r2, r3
 80031be:	d001      	beq.n	80031c4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e000      	b.n	80031c6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3718      	adds	r7, #24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	40023800 	.word	0x40023800

080031d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e03f      	b.n	8003266 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d106      	bne.n	8003200 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f7fe fa00 	bl	8001600 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2224      	movs	r2, #36	; 0x24
 8003204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68da      	ldr	r2, [r3, #12]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003216:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f000 f9cb 	bl	80035b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	691a      	ldr	r2, [r3, #16]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800322c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	695a      	ldr	r2, [r3, #20]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800323c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68da      	ldr	r2, [r3, #12]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800324c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2220      	movs	r2, #32
 8003258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2220      	movs	r2, #32
 8003260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800326e:	b580      	push	{r7, lr}
 8003270:	b08a      	sub	sp, #40	; 0x28
 8003272:	af02      	add	r7, sp, #8
 8003274:	60f8      	str	r0, [r7, #12]
 8003276:	60b9      	str	r1, [r7, #8]
 8003278:	603b      	str	r3, [r7, #0]
 800327a:	4613      	mov	r3, r2
 800327c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800327e:	2300      	movs	r3, #0
 8003280:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b20      	cmp	r3, #32
 800328c:	d17c      	bne.n	8003388 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d002      	beq.n	800329a <HAL_UART_Transmit+0x2c>
 8003294:	88fb      	ldrh	r3, [r7, #6]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e075      	b.n	800338a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d101      	bne.n	80032ac <HAL_UART_Transmit+0x3e>
 80032a8:	2302      	movs	r3, #2
 80032aa:	e06e      	b.n	800338a <HAL_UART_Transmit+0x11c>
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2221      	movs	r2, #33	; 0x21
 80032be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032c2:	f7fe fb1d 	bl	8001900 <HAL_GetTick>
 80032c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	88fa      	ldrh	r2, [r7, #6]
 80032cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	88fa      	ldrh	r2, [r7, #6]
 80032d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032dc:	d108      	bne.n	80032f0 <HAL_UART_Transmit+0x82>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d104      	bne.n	80032f0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80032e6:	2300      	movs	r3, #0
 80032e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	61bb      	str	r3, [r7, #24]
 80032ee:	e003      	b.n	80032f8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032f4:	2300      	movs	r3, #0
 80032f6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003300:	e02a      	b.n	8003358 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	9300      	str	r3, [sp, #0]
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	2200      	movs	r2, #0
 800330a:	2180      	movs	r1, #128	; 0x80
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f000 f8e2 	bl	80034d6 <UART_WaitOnFlagUntilTimeout>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d001      	beq.n	800331c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e036      	b.n	800338a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10b      	bne.n	800333a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	881b      	ldrh	r3, [r3, #0]
 8003326:	461a      	mov	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003330:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	3302      	adds	r3, #2
 8003336:	61bb      	str	r3, [r7, #24]
 8003338:	e007      	b.n	800334a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	781a      	ldrb	r2, [r3, #0]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	3301      	adds	r3, #1
 8003348:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800334e:	b29b      	uxth	r3, r3
 8003350:	3b01      	subs	r3, #1
 8003352:	b29a      	uxth	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800335c:	b29b      	uxth	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1cf      	bne.n	8003302 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	9300      	str	r3, [sp, #0]
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	2200      	movs	r2, #0
 800336a:	2140      	movs	r1, #64	; 0x40
 800336c:	68f8      	ldr	r0, [r7, #12]
 800336e:	f000 f8b2 	bl	80034d6 <UART_WaitOnFlagUntilTimeout>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d001      	beq.n	800337c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e006      	b.n	800338a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2220      	movs	r2, #32
 8003380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003384:	2300      	movs	r3, #0
 8003386:	e000      	b.n	800338a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003388:	2302      	movs	r3, #2
  }
}
 800338a:	4618      	mov	r0, r3
 800338c:	3720      	adds	r7, #32
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b08a      	sub	sp, #40	; 0x28
 8003396:	af02      	add	r7, sp, #8
 8003398:	60f8      	str	r0, [r7, #12]
 800339a:	60b9      	str	r1, [r7, #8]
 800339c:	603b      	str	r3, [r7, #0]
 800339e:	4613      	mov	r3, r2
 80033a0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80033a2:	2300      	movs	r3, #0
 80033a4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b20      	cmp	r3, #32
 80033b0:	f040 808c 	bne.w	80034cc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d002      	beq.n	80033c0 <HAL_UART_Receive+0x2e>
 80033ba:	88fb      	ldrh	r3, [r7, #6]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d101      	bne.n	80033c4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e084      	b.n	80034ce <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d101      	bne.n	80033d2 <HAL_UART_Receive+0x40>
 80033ce:	2302      	movs	r3, #2
 80033d0:	e07d      	b.n	80034ce <HAL_UART_Receive+0x13c>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2222      	movs	r2, #34	; 0x22
 80033e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033ee:	f7fe fa87 	bl	8001900 <HAL_GetTick>
 80033f2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	88fa      	ldrh	r2, [r7, #6]
 80033f8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	88fa      	ldrh	r2, [r7, #6]
 80033fe:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003408:	d108      	bne.n	800341c <HAL_UART_Receive+0x8a>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d104      	bne.n	800341c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003412:	2300      	movs	r3, #0
 8003414:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	61bb      	str	r3, [r7, #24]
 800341a:	e003      	b.n	8003424 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003420:	2300      	movs	r3, #0
 8003422:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800342c:	e043      	b.n	80034b6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	9300      	str	r3, [sp, #0]
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	2200      	movs	r2, #0
 8003436:	2120      	movs	r1, #32
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	f000 f84c 	bl	80034d6 <UART_WaitOnFlagUntilTimeout>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d001      	beq.n	8003448 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e042      	b.n	80034ce <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10c      	bne.n	8003468 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	b29b      	uxth	r3, r3
 8003456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800345a:	b29a      	uxth	r2, r3
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	3302      	adds	r3, #2
 8003464:	61bb      	str	r3, [r7, #24]
 8003466:	e01f      	b.n	80034a8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003470:	d007      	beq.n	8003482 <HAL_UART_Receive+0xf0>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10a      	bne.n	8003490 <HAL_UART_Receive+0xfe>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d106      	bne.n	8003490 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	b2da      	uxtb	r2, r3
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	701a      	strb	r2, [r3, #0]
 800348e:	e008      	b.n	80034a2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	b2db      	uxtb	r3, r3
 8003498:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800349c:	b2da      	uxtb	r2, r3
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	3301      	adds	r3, #1
 80034a6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	3b01      	subs	r3, #1
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d1b6      	bne.n	800342e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2220      	movs	r2, #32
 80034c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80034c8:	2300      	movs	r3, #0
 80034ca:	e000      	b.n	80034ce <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80034cc:	2302      	movs	r3, #2
  }
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3720      	adds	r7, #32
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b090      	sub	sp, #64	; 0x40
 80034da:	af00      	add	r7, sp, #0
 80034dc:	60f8      	str	r0, [r7, #12]
 80034de:	60b9      	str	r1, [r7, #8]
 80034e0:	603b      	str	r3, [r7, #0]
 80034e2:	4613      	mov	r3, r2
 80034e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034e6:	e050      	b.n	800358a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ee:	d04c      	beq.n	800358a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80034f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d007      	beq.n	8003506 <UART_WaitOnFlagUntilTimeout+0x30>
 80034f6:	f7fe fa03 	bl	8001900 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003502:	429a      	cmp	r2, r3
 8003504:	d241      	bcs.n	800358a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	330c      	adds	r3, #12
 800350c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800350e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003510:	e853 3f00 	ldrex	r3, [r3]
 8003514:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003518:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800351c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	330c      	adds	r3, #12
 8003524:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003526:	637a      	str	r2, [r7, #52]	; 0x34
 8003528:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800352a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800352c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800352e:	e841 2300 	strex	r3, r2, [r1]
 8003532:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1e5      	bne.n	8003506 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	3314      	adds	r3, #20
 8003540:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	e853 3f00 	ldrex	r3, [r3]
 8003548:	613b      	str	r3, [r7, #16]
   return(result);
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	f023 0301 	bic.w	r3, r3, #1
 8003550:	63bb      	str	r3, [r7, #56]	; 0x38
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	3314      	adds	r3, #20
 8003558:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800355a:	623a      	str	r2, [r7, #32]
 800355c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800355e:	69f9      	ldr	r1, [r7, #28]
 8003560:	6a3a      	ldr	r2, [r7, #32]
 8003562:	e841 2300 	strex	r3, r2, [r1]
 8003566:	61bb      	str	r3, [r7, #24]
   return(result);
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1e5      	bne.n	800353a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2220      	movs	r2, #32
 8003572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2220      	movs	r2, #32
 800357a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e00f      	b.n	80035aa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	4013      	ands	r3, r2
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	429a      	cmp	r2, r3
 8003598:	bf0c      	ite	eq
 800359a:	2301      	moveq	r3, #1
 800359c:	2300      	movne	r3, #0
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	461a      	mov	r2, r3
 80035a2:	79fb      	ldrb	r3, [r7, #7]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d09f      	beq.n	80034e8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3740      	adds	r7, #64	; 0x40
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
	...

080035b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035b8:	b0c0      	sub	sp, #256	; 0x100
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80035cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d0:	68d9      	ldr	r1, [r3, #12]
 80035d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	ea40 0301 	orr.w	r3, r0, r1
 80035dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035e2:	689a      	ldr	r2, [r3, #8]
 80035e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	431a      	orrs	r2, r3
 80035ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	431a      	orrs	r2, r3
 80035f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035f8:	69db      	ldr	r3, [r3, #28]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800360c:	f021 010c 	bic.w	r1, r1, #12
 8003610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800361a:	430b      	orrs	r3, r1
 800361c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800361e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800362a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800362e:	6999      	ldr	r1, [r3, #24]
 8003630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	ea40 0301 	orr.w	r3, r0, r1
 800363a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800363c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	4b8f      	ldr	r3, [pc, #572]	; (8003880 <UART_SetConfig+0x2cc>)
 8003644:	429a      	cmp	r2, r3
 8003646:	d005      	beq.n	8003654 <UART_SetConfig+0xa0>
 8003648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	4b8d      	ldr	r3, [pc, #564]	; (8003884 <UART_SetConfig+0x2d0>)
 8003650:	429a      	cmp	r2, r3
 8003652:	d104      	bne.n	800365e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003654:	f7ff f8dc 	bl	8002810 <HAL_RCC_GetPCLK2Freq>
 8003658:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800365c:	e003      	b.n	8003666 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800365e:	f7ff f8c3 	bl	80027e8 <HAL_RCC_GetPCLK1Freq>
 8003662:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800366a:	69db      	ldr	r3, [r3, #28]
 800366c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003670:	f040 810c 	bne.w	800388c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003674:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003678:	2200      	movs	r2, #0
 800367a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800367e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003682:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003686:	4622      	mov	r2, r4
 8003688:	462b      	mov	r3, r5
 800368a:	1891      	adds	r1, r2, r2
 800368c:	65b9      	str	r1, [r7, #88]	; 0x58
 800368e:	415b      	adcs	r3, r3
 8003690:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003692:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003696:	4621      	mov	r1, r4
 8003698:	eb12 0801 	adds.w	r8, r2, r1
 800369c:	4629      	mov	r1, r5
 800369e:	eb43 0901 	adc.w	r9, r3, r1
 80036a2:	f04f 0200 	mov.w	r2, #0
 80036a6:	f04f 0300 	mov.w	r3, #0
 80036aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036b6:	4690      	mov	r8, r2
 80036b8:	4699      	mov	r9, r3
 80036ba:	4623      	mov	r3, r4
 80036bc:	eb18 0303 	adds.w	r3, r8, r3
 80036c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80036c4:	462b      	mov	r3, r5
 80036c6:	eb49 0303 	adc.w	r3, r9, r3
 80036ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80036ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80036da:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80036de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80036e2:	460b      	mov	r3, r1
 80036e4:	18db      	adds	r3, r3, r3
 80036e6:	653b      	str	r3, [r7, #80]	; 0x50
 80036e8:	4613      	mov	r3, r2
 80036ea:	eb42 0303 	adc.w	r3, r2, r3
 80036ee:	657b      	str	r3, [r7, #84]	; 0x54
 80036f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80036f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80036f8:	f7fc fde2 	bl	80002c0 <__aeabi_uldivmod>
 80036fc:	4602      	mov	r2, r0
 80036fe:	460b      	mov	r3, r1
 8003700:	4b61      	ldr	r3, [pc, #388]	; (8003888 <UART_SetConfig+0x2d4>)
 8003702:	fba3 2302 	umull	r2, r3, r3, r2
 8003706:	095b      	lsrs	r3, r3, #5
 8003708:	011c      	lsls	r4, r3, #4
 800370a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800370e:	2200      	movs	r2, #0
 8003710:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003714:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003718:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800371c:	4642      	mov	r2, r8
 800371e:	464b      	mov	r3, r9
 8003720:	1891      	adds	r1, r2, r2
 8003722:	64b9      	str	r1, [r7, #72]	; 0x48
 8003724:	415b      	adcs	r3, r3
 8003726:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003728:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800372c:	4641      	mov	r1, r8
 800372e:	eb12 0a01 	adds.w	sl, r2, r1
 8003732:	4649      	mov	r1, r9
 8003734:	eb43 0b01 	adc.w	fp, r3, r1
 8003738:	f04f 0200 	mov.w	r2, #0
 800373c:	f04f 0300 	mov.w	r3, #0
 8003740:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003744:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003748:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800374c:	4692      	mov	sl, r2
 800374e:	469b      	mov	fp, r3
 8003750:	4643      	mov	r3, r8
 8003752:	eb1a 0303 	adds.w	r3, sl, r3
 8003756:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800375a:	464b      	mov	r3, r9
 800375c:	eb4b 0303 	adc.w	r3, fp, r3
 8003760:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003770:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003774:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003778:	460b      	mov	r3, r1
 800377a:	18db      	adds	r3, r3, r3
 800377c:	643b      	str	r3, [r7, #64]	; 0x40
 800377e:	4613      	mov	r3, r2
 8003780:	eb42 0303 	adc.w	r3, r2, r3
 8003784:	647b      	str	r3, [r7, #68]	; 0x44
 8003786:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800378a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800378e:	f7fc fd97 	bl	80002c0 <__aeabi_uldivmod>
 8003792:	4602      	mov	r2, r0
 8003794:	460b      	mov	r3, r1
 8003796:	4611      	mov	r1, r2
 8003798:	4b3b      	ldr	r3, [pc, #236]	; (8003888 <UART_SetConfig+0x2d4>)
 800379a:	fba3 2301 	umull	r2, r3, r3, r1
 800379e:	095b      	lsrs	r3, r3, #5
 80037a0:	2264      	movs	r2, #100	; 0x64
 80037a2:	fb02 f303 	mul.w	r3, r2, r3
 80037a6:	1acb      	subs	r3, r1, r3
 80037a8:	00db      	lsls	r3, r3, #3
 80037aa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80037ae:	4b36      	ldr	r3, [pc, #216]	; (8003888 <UART_SetConfig+0x2d4>)
 80037b0:	fba3 2302 	umull	r2, r3, r3, r2
 80037b4:	095b      	lsrs	r3, r3, #5
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80037bc:	441c      	add	r4, r3
 80037be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037c2:	2200      	movs	r2, #0
 80037c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80037c8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80037cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80037d0:	4642      	mov	r2, r8
 80037d2:	464b      	mov	r3, r9
 80037d4:	1891      	adds	r1, r2, r2
 80037d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80037d8:	415b      	adcs	r3, r3
 80037da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80037e0:	4641      	mov	r1, r8
 80037e2:	1851      	adds	r1, r2, r1
 80037e4:	6339      	str	r1, [r7, #48]	; 0x30
 80037e6:	4649      	mov	r1, r9
 80037e8:	414b      	adcs	r3, r1
 80037ea:	637b      	str	r3, [r7, #52]	; 0x34
 80037ec:	f04f 0200 	mov.w	r2, #0
 80037f0:	f04f 0300 	mov.w	r3, #0
 80037f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80037f8:	4659      	mov	r1, fp
 80037fa:	00cb      	lsls	r3, r1, #3
 80037fc:	4651      	mov	r1, sl
 80037fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003802:	4651      	mov	r1, sl
 8003804:	00ca      	lsls	r2, r1, #3
 8003806:	4610      	mov	r0, r2
 8003808:	4619      	mov	r1, r3
 800380a:	4603      	mov	r3, r0
 800380c:	4642      	mov	r2, r8
 800380e:	189b      	adds	r3, r3, r2
 8003810:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003814:	464b      	mov	r3, r9
 8003816:	460a      	mov	r2, r1
 8003818:	eb42 0303 	adc.w	r3, r2, r3
 800381c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800382c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003830:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003834:	460b      	mov	r3, r1
 8003836:	18db      	adds	r3, r3, r3
 8003838:	62bb      	str	r3, [r7, #40]	; 0x28
 800383a:	4613      	mov	r3, r2
 800383c:	eb42 0303 	adc.w	r3, r2, r3
 8003840:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003842:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003846:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800384a:	f7fc fd39 	bl	80002c0 <__aeabi_uldivmod>
 800384e:	4602      	mov	r2, r0
 8003850:	460b      	mov	r3, r1
 8003852:	4b0d      	ldr	r3, [pc, #52]	; (8003888 <UART_SetConfig+0x2d4>)
 8003854:	fba3 1302 	umull	r1, r3, r3, r2
 8003858:	095b      	lsrs	r3, r3, #5
 800385a:	2164      	movs	r1, #100	; 0x64
 800385c:	fb01 f303 	mul.w	r3, r1, r3
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	00db      	lsls	r3, r3, #3
 8003864:	3332      	adds	r3, #50	; 0x32
 8003866:	4a08      	ldr	r2, [pc, #32]	; (8003888 <UART_SetConfig+0x2d4>)
 8003868:	fba2 2303 	umull	r2, r3, r2, r3
 800386c:	095b      	lsrs	r3, r3, #5
 800386e:	f003 0207 	and.w	r2, r3, #7
 8003872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4422      	add	r2, r4
 800387a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800387c:	e106      	b.n	8003a8c <UART_SetConfig+0x4d8>
 800387e:	bf00      	nop
 8003880:	40011000 	.word	0x40011000
 8003884:	40011400 	.word	0x40011400
 8003888:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800388c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003890:	2200      	movs	r2, #0
 8003892:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003896:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800389a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800389e:	4642      	mov	r2, r8
 80038a0:	464b      	mov	r3, r9
 80038a2:	1891      	adds	r1, r2, r2
 80038a4:	6239      	str	r1, [r7, #32]
 80038a6:	415b      	adcs	r3, r3
 80038a8:	627b      	str	r3, [r7, #36]	; 0x24
 80038aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80038ae:	4641      	mov	r1, r8
 80038b0:	1854      	adds	r4, r2, r1
 80038b2:	4649      	mov	r1, r9
 80038b4:	eb43 0501 	adc.w	r5, r3, r1
 80038b8:	f04f 0200 	mov.w	r2, #0
 80038bc:	f04f 0300 	mov.w	r3, #0
 80038c0:	00eb      	lsls	r3, r5, #3
 80038c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038c6:	00e2      	lsls	r2, r4, #3
 80038c8:	4614      	mov	r4, r2
 80038ca:	461d      	mov	r5, r3
 80038cc:	4643      	mov	r3, r8
 80038ce:	18e3      	adds	r3, r4, r3
 80038d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80038d4:	464b      	mov	r3, r9
 80038d6:	eb45 0303 	adc.w	r3, r5, r3
 80038da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80038de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80038ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80038ee:	f04f 0200 	mov.w	r2, #0
 80038f2:	f04f 0300 	mov.w	r3, #0
 80038f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80038fa:	4629      	mov	r1, r5
 80038fc:	008b      	lsls	r3, r1, #2
 80038fe:	4621      	mov	r1, r4
 8003900:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003904:	4621      	mov	r1, r4
 8003906:	008a      	lsls	r2, r1, #2
 8003908:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800390c:	f7fc fcd8 	bl	80002c0 <__aeabi_uldivmod>
 8003910:	4602      	mov	r2, r0
 8003912:	460b      	mov	r3, r1
 8003914:	4b60      	ldr	r3, [pc, #384]	; (8003a98 <UART_SetConfig+0x4e4>)
 8003916:	fba3 2302 	umull	r2, r3, r3, r2
 800391a:	095b      	lsrs	r3, r3, #5
 800391c:	011c      	lsls	r4, r3, #4
 800391e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003922:	2200      	movs	r2, #0
 8003924:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003928:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800392c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003930:	4642      	mov	r2, r8
 8003932:	464b      	mov	r3, r9
 8003934:	1891      	adds	r1, r2, r2
 8003936:	61b9      	str	r1, [r7, #24]
 8003938:	415b      	adcs	r3, r3
 800393a:	61fb      	str	r3, [r7, #28]
 800393c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003940:	4641      	mov	r1, r8
 8003942:	1851      	adds	r1, r2, r1
 8003944:	6139      	str	r1, [r7, #16]
 8003946:	4649      	mov	r1, r9
 8003948:	414b      	adcs	r3, r1
 800394a:	617b      	str	r3, [r7, #20]
 800394c:	f04f 0200 	mov.w	r2, #0
 8003950:	f04f 0300 	mov.w	r3, #0
 8003954:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003958:	4659      	mov	r1, fp
 800395a:	00cb      	lsls	r3, r1, #3
 800395c:	4651      	mov	r1, sl
 800395e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003962:	4651      	mov	r1, sl
 8003964:	00ca      	lsls	r2, r1, #3
 8003966:	4610      	mov	r0, r2
 8003968:	4619      	mov	r1, r3
 800396a:	4603      	mov	r3, r0
 800396c:	4642      	mov	r2, r8
 800396e:	189b      	adds	r3, r3, r2
 8003970:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003974:	464b      	mov	r3, r9
 8003976:	460a      	mov	r2, r1
 8003978:	eb42 0303 	adc.w	r3, r2, r3
 800397c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	67bb      	str	r3, [r7, #120]	; 0x78
 800398a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800398c:	f04f 0200 	mov.w	r2, #0
 8003990:	f04f 0300 	mov.w	r3, #0
 8003994:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003998:	4649      	mov	r1, r9
 800399a:	008b      	lsls	r3, r1, #2
 800399c:	4641      	mov	r1, r8
 800399e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039a2:	4641      	mov	r1, r8
 80039a4:	008a      	lsls	r2, r1, #2
 80039a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80039aa:	f7fc fc89 	bl	80002c0 <__aeabi_uldivmod>
 80039ae:	4602      	mov	r2, r0
 80039b0:	460b      	mov	r3, r1
 80039b2:	4611      	mov	r1, r2
 80039b4:	4b38      	ldr	r3, [pc, #224]	; (8003a98 <UART_SetConfig+0x4e4>)
 80039b6:	fba3 2301 	umull	r2, r3, r3, r1
 80039ba:	095b      	lsrs	r3, r3, #5
 80039bc:	2264      	movs	r2, #100	; 0x64
 80039be:	fb02 f303 	mul.w	r3, r2, r3
 80039c2:	1acb      	subs	r3, r1, r3
 80039c4:	011b      	lsls	r3, r3, #4
 80039c6:	3332      	adds	r3, #50	; 0x32
 80039c8:	4a33      	ldr	r2, [pc, #204]	; (8003a98 <UART_SetConfig+0x4e4>)
 80039ca:	fba2 2303 	umull	r2, r3, r2, r3
 80039ce:	095b      	lsrs	r3, r3, #5
 80039d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039d4:	441c      	add	r4, r3
 80039d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039da:	2200      	movs	r2, #0
 80039dc:	673b      	str	r3, [r7, #112]	; 0x70
 80039de:	677a      	str	r2, [r7, #116]	; 0x74
 80039e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80039e4:	4642      	mov	r2, r8
 80039e6:	464b      	mov	r3, r9
 80039e8:	1891      	adds	r1, r2, r2
 80039ea:	60b9      	str	r1, [r7, #8]
 80039ec:	415b      	adcs	r3, r3
 80039ee:	60fb      	str	r3, [r7, #12]
 80039f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039f4:	4641      	mov	r1, r8
 80039f6:	1851      	adds	r1, r2, r1
 80039f8:	6039      	str	r1, [r7, #0]
 80039fa:	4649      	mov	r1, r9
 80039fc:	414b      	adcs	r3, r1
 80039fe:	607b      	str	r3, [r7, #4]
 8003a00:	f04f 0200 	mov.w	r2, #0
 8003a04:	f04f 0300 	mov.w	r3, #0
 8003a08:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003a0c:	4659      	mov	r1, fp
 8003a0e:	00cb      	lsls	r3, r1, #3
 8003a10:	4651      	mov	r1, sl
 8003a12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a16:	4651      	mov	r1, sl
 8003a18:	00ca      	lsls	r2, r1, #3
 8003a1a:	4610      	mov	r0, r2
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	4603      	mov	r3, r0
 8003a20:	4642      	mov	r2, r8
 8003a22:	189b      	adds	r3, r3, r2
 8003a24:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a26:	464b      	mov	r3, r9
 8003a28:	460a      	mov	r2, r1
 8003a2a:	eb42 0303 	adc.w	r3, r2, r3
 8003a2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	663b      	str	r3, [r7, #96]	; 0x60
 8003a3a:	667a      	str	r2, [r7, #100]	; 0x64
 8003a3c:	f04f 0200 	mov.w	r2, #0
 8003a40:	f04f 0300 	mov.w	r3, #0
 8003a44:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003a48:	4649      	mov	r1, r9
 8003a4a:	008b      	lsls	r3, r1, #2
 8003a4c:	4641      	mov	r1, r8
 8003a4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a52:	4641      	mov	r1, r8
 8003a54:	008a      	lsls	r2, r1, #2
 8003a56:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003a5a:	f7fc fc31 	bl	80002c0 <__aeabi_uldivmod>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	460b      	mov	r3, r1
 8003a62:	4b0d      	ldr	r3, [pc, #52]	; (8003a98 <UART_SetConfig+0x4e4>)
 8003a64:	fba3 1302 	umull	r1, r3, r3, r2
 8003a68:	095b      	lsrs	r3, r3, #5
 8003a6a:	2164      	movs	r1, #100	; 0x64
 8003a6c:	fb01 f303 	mul.w	r3, r1, r3
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	011b      	lsls	r3, r3, #4
 8003a74:	3332      	adds	r3, #50	; 0x32
 8003a76:	4a08      	ldr	r2, [pc, #32]	; (8003a98 <UART_SetConfig+0x4e4>)
 8003a78:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7c:	095b      	lsrs	r3, r3, #5
 8003a7e:	f003 020f 	and.w	r2, r3, #15
 8003a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4422      	add	r2, r4
 8003a8a:	609a      	str	r2, [r3, #8]
}
 8003a8c:	bf00      	nop
 8003a8e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003a92:	46bd      	mov	sp, r7
 8003a94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a98:	51eb851f 	.word	0x51eb851f

08003a9c <_vsiprintf_r>:
 8003a9c:	b500      	push	{lr}
 8003a9e:	b09b      	sub	sp, #108	; 0x6c
 8003aa0:	9100      	str	r1, [sp, #0]
 8003aa2:	9104      	str	r1, [sp, #16]
 8003aa4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003aa8:	9105      	str	r1, [sp, #20]
 8003aaa:	9102      	str	r1, [sp, #8]
 8003aac:	4905      	ldr	r1, [pc, #20]	; (8003ac4 <_vsiprintf_r+0x28>)
 8003aae:	9103      	str	r1, [sp, #12]
 8003ab0:	4669      	mov	r1, sp
 8003ab2:	f000 f999 	bl	8003de8 <_svfiprintf_r>
 8003ab6:	9b00      	ldr	r3, [sp, #0]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	701a      	strb	r2, [r3, #0]
 8003abc:	b01b      	add	sp, #108	; 0x6c
 8003abe:	f85d fb04 	ldr.w	pc, [sp], #4
 8003ac2:	bf00      	nop
 8003ac4:	ffff0208 	.word	0xffff0208

08003ac8 <vsiprintf>:
 8003ac8:	4613      	mov	r3, r2
 8003aca:	460a      	mov	r2, r1
 8003acc:	4601      	mov	r1, r0
 8003ace:	4802      	ldr	r0, [pc, #8]	; (8003ad8 <vsiprintf+0x10>)
 8003ad0:	6800      	ldr	r0, [r0, #0]
 8003ad2:	f7ff bfe3 	b.w	8003a9c <_vsiprintf_r>
 8003ad6:	bf00      	nop
 8003ad8:	20000060 	.word	0x20000060

08003adc <memset>:
 8003adc:	4402      	add	r2, r0
 8003ade:	4603      	mov	r3, r0
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d100      	bne.n	8003ae6 <memset+0xa>
 8003ae4:	4770      	bx	lr
 8003ae6:	f803 1b01 	strb.w	r1, [r3], #1
 8003aea:	e7f9      	b.n	8003ae0 <memset+0x4>

08003aec <__errno>:
 8003aec:	4b01      	ldr	r3, [pc, #4]	; (8003af4 <__errno+0x8>)
 8003aee:	6818      	ldr	r0, [r3, #0]
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	20000060 	.word	0x20000060

08003af8 <__libc_init_array>:
 8003af8:	b570      	push	{r4, r5, r6, lr}
 8003afa:	4d0d      	ldr	r5, [pc, #52]	; (8003b30 <__libc_init_array+0x38>)
 8003afc:	4c0d      	ldr	r4, [pc, #52]	; (8003b34 <__libc_init_array+0x3c>)
 8003afe:	1b64      	subs	r4, r4, r5
 8003b00:	10a4      	asrs	r4, r4, #2
 8003b02:	2600      	movs	r6, #0
 8003b04:	42a6      	cmp	r6, r4
 8003b06:	d109      	bne.n	8003b1c <__libc_init_array+0x24>
 8003b08:	4d0b      	ldr	r5, [pc, #44]	; (8003b38 <__libc_init_array+0x40>)
 8003b0a:	4c0c      	ldr	r4, [pc, #48]	; (8003b3c <__libc_init_array+0x44>)
 8003b0c:	f000 fc6a 	bl	80043e4 <_init>
 8003b10:	1b64      	subs	r4, r4, r5
 8003b12:	10a4      	asrs	r4, r4, #2
 8003b14:	2600      	movs	r6, #0
 8003b16:	42a6      	cmp	r6, r4
 8003b18:	d105      	bne.n	8003b26 <__libc_init_array+0x2e>
 8003b1a:	bd70      	pop	{r4, r5, r6, pc}
 8003b1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b20:	4798      	blx	r3
 8003b22:	3601      	adds	r6, #1
 8003b24:	e7ee      	b.n	8003b04 <__libc_init_array+0xc>
 8003b26:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b2a:	4798      	blx	r3
 8003b2c:	3601      	adds	r6, #1
 8003b2e:	e7f2      	b.n	8003b16 <__libc_init_array+0x1e>
 8003b30:	080049e4 	.word	0x080049e4
 8003b34:	080049e4 	.word	0x080049e4
 8003b38:	080049e4 	.word	0x080049e4
 8003b3c:	080049e8 	.word	0x080049e8

08003b40 <__retarget_lock_acquire_recursive>:
 8003b40:	4770      	bx	lr

08003b42 <__retarget_lock_release_recursive>:
 8003b42:	4770      	bx	lr

08003b44 <_free_r>:
 8003b44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b46:	2900      	cmp	r1, #0
 8003b48:	d044      	beq.n	8003bd4 <_free_r+0x90>
 8003b4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b4e:	9001      	str	r0, [sp, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f1a1 0404 	sub.w	r4, r1, #4
 8003b56:	bfb8      	it	lt
 8003b58:	18e4      	addlt	r4, r4, r3
 8003b5a:	f000 f8df 	bl	8003d1c <__malloc_lock>
 8003b5e:	4a1e      	ldr	r2, [pc, #120]	; (8003bd8 <_free_r+0x94>)
 8003b60:	9801      	ldr	r0, [sp, #4]
 8003b62:	6813      	ldr	r3, [r2, #0]
 8003b64:	b933      	cbnz	r3, 8003b74 <_free_r+0x30>
 8003b66:	6063      	str	r3, [r4, #4]
 8003b68:	6014      	str	r4, [r2, #0]
 8003b6a:	b003      	add	sp, #12
 8003b6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003b70:	f000 b8da 	b.w	8003d28 <__malloc_unlock>
 8003b74:	42a3      	cmp	r3, r4
 8003b76:	d908      	bls.n	8003b8a <_free_r+0x46>
 8003b78:	6825      	ldr	r5, [r4, #0]
 8003b7a:	1961      	adds	r1, r4, r5
 8003b7c:	428b      	cmp	r3, r1
 8003b7e:	bf01      	itttt	eq
 8003b80:	6819      	ldreq	r1, [r3, #0]
 8003b82:	685b      	ldreq	r3, [r3, #4]
 8003b84:	1949      	addeq	r1, r1, r5
 8003b86:	6021      	streq	r1, [r4, #0]
 8003b88:	e7ed      	b.n	8003b66 <_free_r+0x22>
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	b10b      	cbz	r3, 8003b94 <_free_r+0x50>
 8003b90:	42a3      	cmp	r3, r4
 8003b92:	d9fa      	bls.n	8003b8a <_free_r+0x46>
 8003b94:	6811      	ldr	r1, [r2, #0]
 8003b96:	1855      	adds	r5, r2, r1
 8003b98:	42a5      	cmp	r5, r4
 8003b9a:	d10b      	bne.n	8003bb4 <_free_r+0x70>
 8003b9c:	6824      	ldr	r4, [r4, #0]
 8003b9e:	4421      	add	r1, r4
 8003ba0:	1854      	adds	r4, r2, r1
 8003ba2:	42a3      	cmp	r3, r4
 8003ba4:	6011      	str	r1, [r2, #0]
 8003ba6:	d1e0      	bne.n	8003b6a <_free_r+0x26>
 8003ba8:	681c      	ldr	r4, [r3, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	6053      	str	r3, [r2, #4]
 8003bae:	440c      	add	r4, r1
 8003bb0:	6014      	str	r4, [r2, #0]
 8003bb2:	e7da      	b.n	8003b6a <_free_r+0x26>
 8003bb4:	d902      	bls.n	8003bbc <_free_r+0x78>
 8003bb6:	230c      	movs	r3, #12
 8003bb8:	6003      	str	r3, [r0, #0]
 8003bba:	e7d6      	b.n	8003b6a <_free_r+0x26>
 8003bbc:	6825      	ldr	r5, [r4, #0]
 8003bbe:	1961      	adds	r1, r4, r5
 8003bc0:	428b      	cmp	r3, r1
 8003bc2:	bf04      	itt	eq
 8003bc4:	6819      	ldreq	r1, [r3, #0]
 8003bc6:	685b      	ldreq	r3, [r3, #4]
 8003bc8:	6063      	str	r3, [r4, #4]
 8003bca:	bf04      	itt	eq
 8003bcc:	1949      	addeq	r1, r1, r5
 8003bce:	6021      	streq	r1, [r4, #0]
 8003bd0:	6054      	str	r4, [r2, #4]
 8003bd2:	e7ca      	b.n	8003b6a <_free_r+0x26>
 8003bd4:	b003      	add	sp, #12
 8003bd6:	bd30      	pop	{r4, r5, pc}
 8003bd8:	20000340 	.word	0x20000340

08003bdc <sbrk_aligned>:
 8003bdc:	b570      	push	{r4, r5, r6, lr}
 8003bde:	4e0e      	ldr	r6, [pc, #56]	; (8003c18 <sbrk_aligned+0x3c>)
 8003be0:	460c      	mov	r4, r1
 8003be2:	6831      	ldr	r1, [r6, #0]
 8003be4:	4605      	mov	r5, r0
 8003be6:	b911      	cbnz	r1, 8003bee <sbrk_aligned+0x12>
 8003be8:	f000 fba6 	bl	8004338 <_sbrk_r>
 8003bec:	6030      	str	r0, [r6, #0]
 8003bee:	4621      	mov	r1, r4
 8003bf0:	4628      	mov	r0, r5
 8003bf2:	f000 fba1 	bl	8004338 <_sbrk_r>
 8003bf6:	1c43      	adds	r3, r0, #1
 8003bf8:	d00a      	beq.n	8003c10 <sbrk_aligned+0x34>
 8003bfa:	1cc4      	adds	r4, r0, #3
 8003bfc:	f024 0403 	bic.w	r4, r4, #3
 8003c00:	42a0      	cmp	r0, r4
 8003c02:	d007      	beq.n	8003c14 <sbrk_aligned+0x38>
 8003c04:	1a21      	subs	r1, r4, r0
 8003c06:	4628      	mov	r0, r5
 8003c08:	f000 fb96 	bl	8004338 <_sbrk_r>
 8003c0c:	3001      	adds	r0, #1
 8003c0e:	d101      	bne.n	8003c14 <sbrk_aligned+0x38>
 8003c10:	f04f 34ff 	mov.w	r4, #4294967295
 8003c14:	4620      	mov	r0, r4
 8003c16:	bd70      	pop	{r4, r5, r6, pc}
 8003c18:	20000344 	.word	0x20000344

08003c1c <_malloc_r>:
 8003c1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c20:	1ccd      	adds	r5, r1, #3
 8003c22:	f025 0503 	bic.w	r5, r5, #3
 8003c26:	3508      	adds	r5, #8
 8003c28:	2d0c      	cmp	r5, #12
 8003c2a:	bf38      	it	cc
 8003c2c:	250c      	movcc	r5, #12
 8003c2e:	2d00      	cmp	r5, #0
 8003c30:	4607      	mov	r7, r0
 8003c32:	db01      	blt.n	8003c38 <_malloc_r+0x1c>
 8003c34:	42a9      	cmp	r1, r5
 8003c36:	d905      	bls.n	8003c44 <_malloc_r+0x28>
 8003c38:	230c      	movs	r3, #12
 8003c3a:	603b      	str	r3, [r7, #0]
 8003c3c:	2600      	movs	r6, #0
 8003c3e:	4630      	mov	r0, r6
 8003c40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c44:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003d18 <_malloc_r+0xfc>
 8003c48:	f000 f868 	bl	8003d1c <__malloc_lock>
 8003c4c:	f8d8 3000 	ldr.w	r3, [r8]
 8003c50:	461c      	mov	r4, r3
 8003c52:	bb5c      	cbnz	r4, 8003cac <_malloc_r+0x90>
 8003c54:	4629      	mov	r1, r5
 8003c56:	4638      	mov	r0, r7
 8003c58:	f7ff ffc0 	bl	8003bdc <sbrk_aligned>
 8003c5c:	1c43      	adds	r3, r0, #1
 8003c5e:	4604      	mov	r4, r0
 8003c60:	d155      	bne.n	8003d0e <_malloc_r+0xf2>
 8003c62:	f8d8 4000 	ldr.w	r4, [r8]
 8003c66:	4626      	mov	r6, r4
 8003c68:	2e00      	cmp	r6, #0
 8003c6a:	d145      	bne.n	8003cf8 <_malloc_r+0xdc>
 8003c6c:	2c00      	cmp	r4, #0
 8003c6e:	d048      	beq.n	8003d02 <_malloc_r+0xe6>
 8003c70:	6823      	ldr	r3, [r4, #0]
 8003c72:	4631      	mov	r1, r6
 8003c74:	4638      	mov	r0, r7
 8003c76:	eb04 0903 	add.w	r9, r4, r3
 8003c7a:	f000 fb5d 	bl	8004338 <_sbrk_r>
 8003c7e:	4581      	cmp	r9, r0
 8003c80:	d13f      	bne.n	8003d02 <_malloc_r+0xe6>
 8003c82:	6821      	ldr	r1, [r4, #0]
 8003c84:	1a6d      	subs	r5, r5, r1
 8003c86:	4629      	mov	r1, r5
 8003c88:	4638      	mov	r0, r7
 8003c8a:	f7ff ffa7 	bl	8003bdc <sbrk_aligned>
 8003c8e:	3001      	adds	r0, #1
 8003c90:	d037      	beq.n	8003d02 <_malloc_r+0xe6>
 8003c92:	6823      	ldr	r3, [r4, #0]
 8003c94:	442b      	add	r3, r5
 8003c96:	6023      	str	r3, [r4, #0]
 8003c98:	f8d8 3000 	ldr.w	r3, [r8]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d038      	beq.n	8003d12 <_malloc_r+0xf6>
 8003ca0:	685a      	ldr	r2, [r3, #4]
 8003ca2:	42a2      	cmp	r2, r4
 8003ca4:	d12b      	bne.n	8003cfe <_malloc_r+0xe2>
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	605a      	str	r2, [r3, #4]
 8003caa:	e00f      	b.n	8003ccc <_malloc_r+0xb0>
 8003cac:	6822      	ldr	r2, [r4, #0]
 8003cae:	1b52      	subs	r2, r2, r5
 8003cb0:	d41f      	bmi.n	8003cf2 <_malloc_r+0xd6>
 8003cb2:	2a0b      	cmp	r2, #11
 8003cb4:	d917      	bls.n	8003ce6 <_malloc_r+0xca>
 8003cb6:	1961      	adds	r1, r4, r5
 8003cb8:	42a3      	cmp	r3, r4
 8003cba:	6025      	str	r5, [r4, #0]
 8003cbc:	bf18      	it	ne
 8003cbe:	6059      	strne	r1, [r3, #4]
 8003cc0:	6863      	ldr	r3, [r4, #4]
 8003cc2:	bf08      	it	eq
 8003cc4:	f8c8 1000 	streq.w	r1, [r8]
 8003cc8:	5162      	str	r2, [r4, r5]
 8003cca:	604b      	str	r3, [r1, #4]
 8003ccc:	4638      	mov	r0, r7
 8003cce:	f104 060b 	add.w	r6, r4, #11
 8003cd2:	f000 f829 	bl	8003d28 <__malloc_unlock>
 8003cd6:	f026 0607 	bic.w	r6, r6, #7
 8003cda:	1d23      	adds	r3, r4, #4
 8003cdc:	1af2      	subs	r2, r6, r3
 8003cde:	d0ae      	beq.n	8003c3e <_malloc_r+0x22>
 8003ce0:	1b9b      	subs	r3, r3, r6
 8003ce2:	50a3      	str	r3, [r4, r2]
 8003ce4:	e7ab      	b.n	8003c3e <_malloc_r+0x22>
 8003ce6:	42a3      	cmp	r3, r4
 8003ce8:	6862      	ldr	r2, [r4, #4]
 8003cea:	d1dd      	bne.n	8003ca8 <_malloc_r+0x8c>
 8003cec:	f8c8 2000 	str.w	r2, [r8]
 8003cf0:	e7ec      	b.n	8003ccc <_malloc_r+0xb0>
 8003cf2:	4623      	mov	r3, r4
 8003cf4:	6864      	ldr	r4, [r4, #4]
 8003cf6:	e7ac      	b.n	8003c52 <_malloc_r+0x36>
 8003cf8:	4634      	mov	r4, r6
 8003cfa:	6876      	ldr	r6, [r6, #4]
 8003cfc:	e7b4      	b.n	8003c68 <_malloc_r+0x4c>
 8003cfe:	4613      	mov	r3, r2
 8003d00:	e7cc      	b.n	8003c9c <_malloc_r+0x80>
 8003d02:	230c      	movs	r3, #12
 8003d04:	603b      	str	r3, [r7, #0]
 8003d06:	4638      	mov	r0, r7
 8003d08:	f000 f80e 	bl	8003d28 <__malloc_unlock>
 8003d0c:	e797      	b.n	8003c3e <_malloc_r+0x22>
 8003d0e:	6025      	str	r5, [r4, #0]
 8003d10:	e7dc      	b.n	8003ccc <_malloc_r+0xb0>
 8003d12:	605b      	str	r3, [r3, #4]
 8003d14:	deff      	udf	#255	; 0xff
 8003d16:	bf00      	nop
 8003d18:	20000340 	.word	0x20000340

08003d1c <__malloc_lock>:
 8003d1c:	4801      	ldr	r0, [pc, #4]	; (8003d24 <__malloc_lock+0x8>)
 8003d1e:	f7ff bf0f 	b.w	8003b40 <__retarget_lock_acquire_recursive>
 8003d22:	bf00      	nop
 8003d24:	2000033c 	.word	0x2000033c

08003d28 <__malloc_unlock>:
 8003d28:	4801      	ldr	r0, [pc, #4]	; (8003d30 <__malloc_unlock+0x8>)
 8003d2a:	f7ff bf0a 	b.w	8003b42 <__retarget_lock_release_recursive>
 8003d2e:	bf00      	nop
 8003d30:	2000033c 	.word	0x2000033c

08003d34 <__ssputs_r>:
 8003d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d38:	688e      	ldr	r6, [r1, #8]
 8003d3a:	461f      	mov	r7, r3
 8003d3c:	42be      	cmp	r6, r7
 8003d3e:	680b      	ldr	r3, [r1, #0]
 8003d40:	4682      	mov	sl, r0
 8003d42:	460c      	mov	r4, r1
 8003d44:	4690      	mov	r8, r2
 8003d46:	d82c      	bhi.n	8003da2 <__ssputs_r+0x6e>
 8003d48:	898a      	ldrh	r2, [r1, #12]
 8003d4a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003d4e:	d026      	beq.n	8003d9e <__ssputs_r+0x6a>
 8003d50:	6965      	ldr	r5, [r4, #20]
 8003d52:	6909      	ldr	r1, [r1, #16]
 8003d54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d58:	eba3 0901 	sub.w	r9, r3, r1
 8003d5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003d60:	1c7b      	adds	r3, r7, #1
 8003d62:	444b      	add	r3, r9
 8003d64:	106d      	asrs	r5, r5, #1
 8003d66:	429d      	cmp	r5, r3
 8003d68:	bf38      	it	cc
 8003d6a:	461d      	movcc	r5, r3
 8003d6c:	0553      	lsls	r3, r2, #21
 8003d6e:	d527      	bpl.n	8003dc0 <__ssputs_r+0x8c>
 8003d70:	4629      	mov	r1, r5
 8003d72:	f7ff ff53 	bl	8003c1c <_malloc_r>
 8003d76:	4606      	mov	r6, r0
 8003d78:	b360      	cbz	r0, 8003dd4 <__ssputs_r+0xa0>
 8003d7a:	6921      	ldr	r1, [r4, #16]
 8003d7c:	464a      	mov	r2, r9
 8003d7e:	f000 faeb 	bl	8004358 <memcpy>
 8003d82:	89a3      	ldrh	r3, [r4, #12]
 8003d84:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d8c:	81a3      	strh	r3, [r4, #12]
 8003d8e:	6126      	str	r6, [r4, #16]
 8003d90:	6165      	str	r5, [r4, #20]
 8003d92:	444e      	add	r6, r9
 8003d94:	eba5 0509 	sub.w	r5, r5, r9
 8003d98:	6026      	str	r6, [r4, #0]
 8003d9a:	60a5      	str	r5, [r4, #8]
 8003d9c:	463e      	mov	r6, r7
 8003d9e:	42be      	cmp	r6, r7
 8003da0:	d900      	bls.n	8003da4 <__ssputs_r+0x70>
 8003da2:	463e      	mov	r6, r7
 8003da4:	6820      	ldr	r0, [r4, #0]
 8003da6:	4632      	mov	r2, r6
 8003da8:	4641      	mov	r1, r8
 8003daa:	f000 faab 	bl	8004304 <memmove>
 8003dae:	68a3      	ldr	r3, [r4, #8]
 8003db0:	1b9b      	subs	r3, r3, r6
 8003db2:	60a3      	str	r3, [r4, #8]
 8003db4:	6823      	ldr	r3, [r4, #0]
 8003db6:	4433      	add	r3, r6
 8003db8:	6023      	str	r3, [r4, #0]
 8003dba:	2000      	movs	r0, #0
 8003dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dc0:	462a      	mov	r2, r5
 8003dc2:	f000 fad7 	bl	8004374 <_realloc_r>
 8003dc6:	4606      	mov	r6, r0
 8003dc8:	2800      	cmp	r0, #0
 8003dca:	d1e0      	bne.n	8003d8e <__ssputs_r+0x5a>
 8003dcc:	6921      	ldr	r1, [r4, #16]
 8003dce:	4650      	mov	r0, sl
 8003dd0:	f7ff feb8 	bl	8003b44 <_free_r>
 8003dd4:	230c      	movs	r3, #12
 8003dd6:	f8ca 3000 	str.w	r3, [sl]
 8003dda:	89a3      	ldrh	r3, [r4, #12]
 8003ddc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003de0:	81a3      	strh	r3, [r4, #12]
 8003de2:	f04f 30ff 	mov.w	r0, #4294967295
 8003de6:	e7e9      	b.n	8003dbc <__ssputs_r+0x88>

08003de8 <_svfiprintf_r>:
 8003de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dec:	4698      	mov	r8, r3
 8003dee:	898b      	ldrh	r3, [r1, #12]
 8003df0:	061b      	lsls	r3, r3, #24
 8003df2:	b09d      	sub	sp, #116	; 0x74
 8003df4:	4607      	mov	r7, r0
 8003df6:	460d      	mov	r5, r1
 8003df8:	4614      	mov	r4, r2
 8003dfa:	d50e      	bpl.n	8003e1a <_svfiprintf_r+0x32>
 8003dfc:	690b      	ldr	r3, [r1, #16]
 8003dfe:	b963      	cbnz	r3, 8003e1a <_svfiprintf_r+0x32>
 8003e00:	2140      	movs	r1, #64	; 0x40
 8003e02:	f7ff ff0b 	bl	8003c1c <_malloc_r>
 8003e06:	6028      	str	r0, [r5, #0]
 8003e08:	6128      	str	r0, [r5, #16]
 8003e0a:	b920      	cbnz	r0, 8003e16 <_svfiprintf_r+0x2e>
 8003e0c:	230c      	movs	r3, #12
 8003e0e:	603b      	str	r3, [r7, #0]
 8003e10:	f04f 30ff 	mov.w	r0, #4294967295
 8003e14:	e0d0      	b.n	8003fb8 <_svfiprintf_r+0x1d0>
 8003e16:	2340      	movs	r3, #64	; 0x40
 8003e18:	616b      	str	r3, [r5, #20]
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	9309      	str	r3, [sp, #36]	; 0x24
 8003e1e:	2320      	movs	r3, #32
 8003e20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e24:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e28:	2330      	movs	r3, #48	; 0x30
 8003e2a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003fd0 <_svfiprintf_r+0x1e8>
 8003e2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e32:	f04f 0901 	mov.w	r9, #1
 8003e36:	4623      	mov	r3, r4
 8003e38:	469a      	mov	sl, r3
 8003e3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e3e:	b10a      	cbz	r2, 8003e44 <_svfiprintf_r+0x5c>
 8003e40:	2a25      	cmp	r2, #37	; 0x25
 8003e42:	d1f9      	bne.n	8003e38 <_svfiprintf_r+0x50>
 8003e44:	ebba 0b04 	subs.w	fp, sl, r4
 8003e48:	d00b      	beq.n	8003e62 <_svfiprintf_r+0x7a>
 8003e4a:	465b      	mov	r3, fp
 8003e4c:	4622      	mov	r2, r4
 8003e4e:	4629      	mov	r1, r5
 8003e50:	4638      	mov	r0, r7
 8003e52:	f7ff ff6f 	bl	8003d34 <__ssputs_r>
 8003e56:	3001      	adds	r0, #1
 8003e58:	f000 80a9 	beq.w	8003fae <_svfiprintf_r+0x1c6>
 8003e5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e5e:	445a      	add	r2, fp
 8003e60:	9209      	str	r2, [sp, #36]	; 0x24
 8003e62:	f89a 3000 	ldrb.w	r3, [sl]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	f000 80a1 	beq.w	8003fae <_svfiprintf_r+0x1c6>
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e76:	f10a 0a01 	add.w	sl, sl, #1
 8003e7a:	9304      	str	r3, [sp, #16]
 8003e7c:	9307      	str	r3, [sp, #28]
 8003e7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e82:	931a      	str	r3, [sp, #104]	; 0x68
 8003e84:	4654      	mov	r4, sl
 8003e86:	2205      	movs	r2, #5
 8003e88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e8c:	4850      	ldr	r0, [pc, #320]	; (8003fd0 <_svfiprintf_r+0x1e8>)
 8003e8e:	f7fc f9c7 	bl	8000220 <memchr>
 8003e92:	9a04      	ldr	r2, [sp, #16]
 8003e94:	b9d8      	cbnz	r0, 8003ece <_svfiprintf_r+0xe6>
 8003e96:	06d0      	lsls	r0, r2, #27
 8003e98:	bf44      	itt	mi
 8003e9a:	2320      	movmi	r3, #32
 8003e9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ea0:	0711      	lsls	r1, r2, #28
 8003ea2:	bf44      	itt	mi
 8003ea4:	232b      	movmi	r3, #43	; 0x2b
 8003ea6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003eaa:	f89a 3000 	ldrb.w	r3, [sl]
 8003eae:	2b2a      	cmp	r3, #42	; 0x2a
 8003eb0:	d015      	beq.n	8003ede <_svfiprintf_r+0xf6>
 8003eb2:	9a07      	ldr	r2, [sp, #28]
 8003eb4:	4654      	mov	r4, sl
 8003eb6:	2000      	movs	r0, #0
 8003eb8:	f04f 0c0a 	mov.w	ip, #10
 8003ebc:	4621      	mov	r1, r4
 8003ebe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ec2:	3b30      	subs	r3, #48	; 0x30
 8003ec4:	2b09      	cmp	r3, #9
 8003ec6:	d94d      	bls.n	8003f64 <_svfiprintf_r+0x17c>
 8003ec8:	b1b0      	cbz	r0, 8003ef8 <_svfiprintf_r+0x110>
 8003eca:	9207      	str	r2, [sp, #28]
 8003ecc:	e014      	b.n	8003ef8 <_svfiprintf_r+0x110>
 8003ece:	eba0 0308 	sub.w	r3, r0, r8
 8003ed2:	fa09 f303 	lsl.w	r3, r9, r3
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	9304      	str	r3, [sp, #16]
 8003eda:	46a2      	mov	sl, r4
 8003edc:	e7d2      	b.n	8003e84 <_svfiprintf_r+0x9c>
 8003ede:	9b03      	ldr	r3, [sp, #12]
 8003ee0:	1d19      	adds	r1, r3, #4
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	9103      	str	r1, [sp, #12]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	bfbb      	ittet	lt
 8003eea:	425b      	neglt	r3, r3
 8003eec:	f042 0202 	orrlt.w	r2, r2, #2
 8003ef0:	9307      	strge	r3, [sp, #28]
 8003ef2:	9307      	strlt	r3, [sp, #28]
 8003ef4:	bfb8      	it	lt
 8003ef6:	9204      	strlt	r2, [sp, #16]
 8003ef8:	7823      	ldrb	r3, [r4, #0]
 8003efa:	2b2e      	cmp	r3, #46	; 0x2e
 8003efc:	d10c      	bne.n	8003f18 <_svfiprintf_r+0x130>
 8003efe:	7863      	ldrb	r3, [r4, #1]
 8003f00:	2b2a      	cmp	r3, #42	; 0x2a
 8003f02:	d134      	bne.n	8003f6e <_svfiprintf_r+0x186>
 8003f04:	9b03      	ldr	r3, [sp, #12]
 8003f06:	1d1a      	adds	r2, r3, #4
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	9203      	str	r2, [sp, #12]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	bfb8      	it	lt
 8003f10:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f14:	3402      	adds	r4, #2
 8003f16:	9305      	str	r3, [sp, #20]
 8003f18:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003fe0 <_svfiprintf_r+0x1f8>
 8003f1c:	7821      	ldrb	r1, [r4, #0]
 8003f1e:	2203      	movs	r2, #3
 8003f20:	4650      	mov	r0, sl
 8003f22:	f7fc f97d 	bl	8000220 <memchr>
 8003f26:	b138      	cbz	r0, 8003f38 <_svfiprintf_r+0x150>
 8003f28:	9b04      	ldr	r3, [sp, #16]
 8003f2a:	eba0 000a 	sub.w	r0, r0, sl
 8003f2e:	2240      	movs	r2, #64	; 0x40
 8003f30:	4082      	lsls	r2, r0
 8003f32:	4313      	orrs	r3, r2
 8003f34:	3401      	adds	r4, #1
 8003f36:	9304      	str	r3, [sp, #16]
 8003f38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f3c:	4825      	ldr	r0, [pc, #148]	; (8003fd4 <_svfiprintf_r+0x1ec>)
 8003f3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f42:	2206      	movs	r2, #6
 8003f44:	f7fc f96c 	bl	8000220 <memchr>
 8003f48:	2800      	cmp	r0, #0
 8003f4a:	d038      	beq.n	8003fbe <_svfiprintf_r+0x1d6>
 8003f4c:	4b22      	ldr	r3, [pc, #136]	; (8003fd8 <_svfiprintf_r+0x1f0>)
 8003f4e:	bb1b      	cbnz	r3, 8003f98 <_svfiprintf_r+0x1b0>
 8003f50:	9b03      	ldr	r3, [sp, #12]
 8003f52:	3307      	adds	r3, #7
 8003f54:	f023 0307 	bic.w	r3, r3, #7
 8003f58:	3308      	adds	r3, #8
 8003f5a:	9303      	str	r3, [sp, #12]
 8003f5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f5e:	4433      	add	r3, r6
 8003f60:	9309      	str	r3, [sp, #36]	; 0x24
 8003f62:	e768      	b.n	8003e36 <_svfiprintf_r+0x4e>
 8003f64:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f68:	460c      	mov	r4, r1
 8003f6a:	2001      	movs	r0, #1
 8003f6c:	e7a6      	b.n	8003ebc <_svfiprintf_r+0xd4>
 8003f6e:	2300      	movs	r3, #0
 8003f70:	3401      	adds	r4, #1
 8003f72:	9305      	str	r3, [sp, #20]
 8003f74:	4619      	mov	r1, r3
 8003f76:	f04f 0c0a 	mov.w	ip, #10
 8003f7a:	4620      	mov	r0, r4
 8003f7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f80:	3a30      	subs	r2, #48	; 0x30
 8003f82:	2a09      	cmp	r2, #9
 8003f84:	d903      	bls.n	8003f8e <_svfiprintf_r+0x1a6>
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d0c6      	beq.n	8003f18 <_svfiprintf_r+0x130>
 8003f8a:	9105      	str	r1, [sp, #20]
 8003f8c:	e7c4      	b.n	8003f18 <_svfiprintf_r+0x130>
 8003f8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f92:	4604      	mov	r4, r0
 8003f94:	2301      	movs	r3, #1
 8003f96:	e7f0      	b.n	8003f7a <_svfiprintf_r+0x192>
 8003f98:	ab03      	add	r3, sp, #12
 8003f9a:	9300      	str	r3, [sp, #0]
 8003f9c:	462a      	mov	r2, r5
 8003f9e:	4b0f      	ldr	r3, [pc, #60]	; (8003fdc <_svfiprintf_r+0x1f4>)
 8003fa0:	a904      	add	r1, sp, #16
 8003fa2:	4638      	mov	r0, r7
 8003fa4:	f3af 8000 	nop.w
 8003fa8:	1c42      	adds	r2, r0, #1
 8003faa:	4606      	mov	r6, r0
 8003fac:	d1d6      	bne.n	8003f5c <_svfiprintf_r+0x174>
 8003fae:	89ab      	ldrh	r3, [r5, #12]
 8003fb0:	065b      	lsls	r3, r3, #25
 8003fb2:	f53f af2d 	bmi.w	8003e10 <_svfiprintf_r+0x28>
 8003fb6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003fb8:	b01d      	add	sp, #116	; 0x74
 8003fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fbe:	ab03      	add	r3, sp, #12
 8003fc0:	9300      	str	r3, [sp, #0]
 8003fc2:	462a      	mov	r2, r5
 8003fc4:	4b05      	ldr	r3, [pc, #20]	; (8003fdc <_svfiprintf_r+0x1f4>)
 8003fc6:	a904      	add	r1, sp, #16
 8003fc8:	4638      	mov	r0, r7
 8003fca:	f000 f879 	bl	80040c0 <_printf_i>
 8003fce:	e7eb      	b.n	8003fa8 <_svfiprintf_r+0x1c0>
 8003fd0:	080049a8 	.word	0x080049a8
 8003fd4:	080049b2 	.word	0x080049b2
 8003fd8:	00000000 	.word	0x00000000
 8003fdc:	08003d35 	.word	0x08003d35
 8003fe0:	080049ae 	.word	0x080049ae

08003fe4 <_printf_common>:
 8003fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fe8:	4616      	mov	r6, r2
 8003fea:	4699      	mov	r9, r3
 8003fec:	688a      	ldr	r2, [r1, #8]
 8003fee:	690b      	ldr	r3, [r1, #16]
 8003ff0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	bfb8      	it	lt
 8003ff8:	4613      	movlt	r3, r2
 8003ffa:	6033      	str	r3, [r6, #0]
 8003ffc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004000:	4607      	mov	r7, r0
 8004002:	460c      	mov	r4, r1
 8004004:	b10a      	cbz	r2, 800400a <_printf_common+0x26>
 8004006:	3301      	adds	r3, #1
 8004008:	6033      	str	r3, [r6, #0]
 800400a:	6823      	ldr	r3, [r4, #0]
 800400c:	0699      	lsls	r1, r3, #26
 800400e:	bf42      	ittt	mi
 8004010:	6833      	ldrmi	r3, [r6, #0]
 8004012:	3302      	addmi	r3, #2
 8004014:	6033      	strmi	r3, [r6, #0]
 8004016:	6825      	ldr	r5, [r4, #0]
 8004018:	f015 0506 	ands.w	r5, r5, #6
 800401c:	d106      	bne.n	800402c <_printf_common+0x48>
 800401e:	f104 0a19 	add.w	sl, r4, #25
 8004022:	68e3      	ldr	r3, [r4, #12]
 8004024:	6832      	ldr	r2, [r6, #0]
 8004026:	1a9b      	subs	r3, r3, r2
 8004028:	42ab      	cmp	r3, r5
 800402a:	dc26      	bgt.n	800407a <_printf_common+0x96>
 800402c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004030:	1e13      	subs	r3, r2, #0
 8004032:	6822      	ldr	r2, [r4, #0]
 8004034:	bf18      	it	ne
 8004036:	2301      	movne	r3, #1
 8004038:	0692      	lsls	r2, r2, #26
 800403a:	d42b      	bmi.n	8004094 <_printf_common+0xb0>
 800403c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004040:	4649      	mov	r1, r9
 8004042:	4638      	mov	r0, r7
 8004044:	47c0      	blx	r8
 8004046:	3001      	adds	r0, #1
 8004048:	d01e      	beq.n	8004088 <_printf_common+0xa4>
 800404a:	6823      	ldr	r3, [r4, #0]
 800404c:	6922      	ldr	r2, [r4, #16]
 800404e:	f003 0306 	and.w	r3, r3, #6
 8004052:	2b04      	cmp	r3, #4
 8004054:	bf02      	ittt	eq
 8004056:	68e5      	ldreq	r5, [r4, #12]
 8004058:	6833      	ldreq	r3, [r6, #0]
 800405a:	1aed      	subeq	r5, r5, r3
 800405c:	68a3      	ldr	r3, [r4, #8]
 800405e:	bf0c      	ite	eq
 8004060:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004064:	2500      	movne	r5, #0
 8004066:	4293      	cmp	r3, r2
 8004068:	bfc4      	itt	gt
 800406a:	1a9b      	subgt	r3, r3, r2
 800406c:	18ed      	addgt	r5, r5, r3
 800406e:	2600      	movs	r6, #0
 8004070:	341a      	adds	r4, #26
 8004072:	42b5      	cmp	r5, r6
 8004074:	d11a      	bne.n	80040ac <_printf_common+0xc8>
 8004076:	2000      	movs	r0, #0
 8004078:	e008      	b.n	800408c <_printf_common+0xa8>
 800407a:	2301      	movs	r3, #1
 800407c:	4652      	mov	r2, sl
 800407e:	4649      	mov	r1, r9
 8004080:	4638      	mov	r0, r7
 8004082:	47c0      	blx	r8
 8004084:	3001      	adds	r0, #1
 8004086:	d103      	bne.n	8004090 <_printf_common+0xac>
 8004088:	f04f 30ff 	mov.w	r0, #4294967295
 800408c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004090:	3501      	adds	r5, #1
 8004092:	e7c6      	b.n	8004022 <_printf_common+0x3e>
 8004094:	18e1      	adds	r1, r4, r3
 8004096:	1c5a      	adds	r2, r3, #1
 8004098:	2030      	movs	r0, #48	; 0x30
 800409a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800409e:	4422      	add	r2, r4
 80040a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040a8:	3302      	adds	r3, #2
 80040aa:	e7c7      	b.n	800403c <_printf_common+0x58>
 80040ac:	2301      	movs	r3, #1
 80040ae:	4622      	mov	r2, r4
 80040b0:	4649      	mov	r1, r9
 80040b2:	4638      	mov	r0, r7
 80040b4:	47c0      	blx	r8
 80040b6:	3001      	adds	r0, #1
 80040b8:	d0e6      	beq.n	8004088 <_printf_common+0xa4>
 80040ba:	3601      	adds	r6, #1
 80040bc:	e7d9      	b.n	8004072 <_printf_common+0x8e>
	...

080040c0 <_printf_i>:
 80040c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040c4:	7e0f      	ldrb	r7, [r1, #24]
 80040c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80040c8:	2f78      	cmp	r7, #120	; 0x78
 80040ca:	4691      	mov	r9, r2
 80040cc:	4680      	mov	r8, r0
 80040ce:	460c      	mov	r4, r1
 80040d0:	469a      	mov	sl, r3
 80040d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80040d6:	d807      	bhi.n	80040e8 <_printf_i+0x28>
 80040d8:	2f62      	cmp	r7, #98	; 0x62
 80040da:	d80a      	bhi.n	80040f2 <_printf_i+0x32>
 80040dc:	2f00      	cmp	r7, #0
 80040de:	f000 80d4 	beq.w	800428a <_printf_i+0x1ca>
 80040e2:	2f58      	cmp	r7, #88	; 0x58
 80040e4:	f000 80c0 	beq.w	8004268 <_printf_i+0x1a8>
 80040e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80040f0:	e03a      	b.n	8004168 <_printf_i+0xa8>
 80040f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80040f6:	2b15      	cmp	r3, #21
 80040f8:	d8f6      	bhi.n	80040e8 <_printf_i+0x28>
 80040fa:	a101      	add	r1, pc, #4	; (adr r1, 8004100 <_printf_i+0x40>)
 80040fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004100:	08004159 	.word	0x08004159
 8004104:	0800416d 	.word	0x0800416d
 8004108:	080040e9 	.word	0x080040e9
 800410c:	080040e9 	.word	0x080040e9
 8004110:	080040e9 	.word	0x080040e9
 8004114:	080040e9 	.word	0x080040e9
 8004118:	0800416d 	.word	0x0800416d
 800411c:	080040e9 	.word	0x080040e9
 8004120:	080040e9 	.word	0x080040e9
 8004124:	080040e9 	.word	0x080040e9
 8004128:	080040e9 	.word	0x080040e9
 800412c:	08004271 	.word	0x08004271
 8004130:	08004199 	.word	0x08004199
 8004134:	0800422b 	.word	0x0800422b
 8004138:	080040e9 	.word	0x080040e9
 800413c:	080040e9 	.word	0x080040e9
 8004140:	08004293 	.word	0x08004293
 8004144:	080040e9 	.word	0x080040e9
 8004148:	08004199 	.word	0x08004199
 800414c:	080040e9 	.word	0x080040e9
 8004150:	080040e9 	.word	0x080040e9
 8004154:	08004233 	.word	0x08004233
 8004158:	682b      	ldr	r3, [r5, #0]
 800415a:	1d1a      	adds	r2, r3, #4
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	602a      	str	r2, [r5, #0]
 8004160:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004164:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004168:	2301      	movs	r3, #1
 800416a:	e09f      	b.n	80042ac <_printf_i+0x1ec>
 800416c:	6820      	ldr	r0, [r4, #0]
 800416e:	682b      	ldr	r3, [r5, #0]
 8004170:	0607      	lsls	r7, r0, #24
 8004172:	f103 0104 	add.w	r1, r3, #4
 8004176:	6029      	str	r1, [r5, #0]
 8004178:	d501      	bpl.n	800417e <_printf_i+0xbe>
 800417a:	681e      	ldr	r6, [r3, #0]
 800417c:	e003      	b.n	8004186 <_printf_i+0xc6>
 800417e:	0646      	lsls	r6, r0, #25
 8004180:	d5fb      	bpl.n	800417a <_printf_i+0xba>
 8004182:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004186:	2e00      	cmp	r6, #0
 8004188:	da03      	bge.n	8004192 <_printf_i+0xd2>
 800418a:	232d      	movs	r3, #45	; 0x2d
 800418c:	4276      	negs	r6, r6
 800418e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004192:	485a      	ldr	r0, [pc, #360]	; (80042fc <_printf_i+0x23c>)
 8004194:	230a      	movs	r3, #10
 8004196:	e012      	b.n	80041be <_printf_i+0xfe>
 8004198:	682b      	ldr	r3, [r5, #0]
 800419a:	6820      	ldr	r0, [r4, #0]
 800419c:	1d19      	adds	r1, r3, #4
 800419e:	6029      	str	r1, [r5, #0]
 80041a0:	0605      	lsls	r5, r0, #24
 80041a2:	d501      	bpl.n	80041a8 <_printf_i+0xe8>
 80041a4:	681e      	ldr	r6, [r3, #0]
 80041a6:	e002      	b.n	80041ae <_printf_i+0xee>
 80041a8:	0641      	lsls	r1, r0, #25
 80041aa:	d5fb      	bpl.n	80041a4 <_printf_i+0xe4>
 80041ac:	881e      	ldrh	r6, [r3, #0]
 80041ae:	4853      	ldr	r0, [pc, #332]	; (80042fc <_printf_i+0x23c>)
 80041b0:	2f6f      	cmp	r7, #111	; 0x6f
 80041b2:	bf0c      	ite	eq
 80041b4:	2308      	moveq	r3, #8
 80041b6:	230a      	movne	r3, #10
 80041b8:	2100      	movs	r1, #0
 80041ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80041be:	6865      	ldr	r5, [r4, #4]
 80041c0:	60a5      	str	r5, [r4, #8]
 80041c2:	2d00      	cmp	r5, #0
 80041c4:	bfa2      	ittt	ge
 80041c6:	6821      	ldrge	r1, [r4, #0]
 80041c8:	f021 0104 	bicge.w	r1, r1, #4
 80041cc:	6021      	strge	r1, [r4, #0]
 80041ce:	b90e      	cbnz	r6, 80041d4 <_printf_i+0x114>
 80041d0:	2d00      	cmp	r5, #0
 80041d2:	d04b      	beq.n	800426c <_printf_i+0x1ac>
 80041d4:	4615      	mov	r5, r2
 80041d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80041da:	fb03 6711 	mls	r7, r3, r1, r6
 80041de:	5dc7      	ldrb	r7, [r0, r7]
 80041e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80041e4:	4637      	mov	r7, r6
 80041e6:	42bb      	cmp	r3, r7
 80041e8:	460e      	mov	r6, r1
 80041ea:	d9f4      	bls.n	80041d6 <_printf_i+0x116>
 80041ec:	2b08      	cmp	r3, #8
 80041ee:	d10b      	bne.n	8004208 <_printf_i+0x148>
 80041f0:	6823      	ldr	r3, [r4, #0]
 80041f2:	07de      	lsls	r6, r3, #31
 80041f4:	d508      	bpl.n	8004208 <_printf_i+0x148>
 80041f6:	6923      	ldr	r3, [r4, #16]
 80041f8:	6861      	ldr	r1, [r4, #4]
 80041fa:	4299      	cmp	r1, r3
 80041fc:	bfde      	ittt	le
 80041fe:	2330      	movle	r3, #48	; 0x30
 8004200:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004204:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004208:	1b52      	subs	r2, r2, r5
 800420a:	6122      	str	r2, [r4, #16]
 800420c:	f8cd a000 	str.w	sl, [sp]
 8004210:	464b      	mov	r3, r9
 8004212:	aa03      	add	r2, sp, #12
 8004214:	4621      	mov	r1, r4
 8004216:	4640      	mov	r0, r8
 8004218:	f7ff fee4 	bl	8003fe4 <_printf_common>
 800421c:	3001      	adds	r0, #1
 800421e:	d14a      	bne.n	80042b6 <_printf_i+0x1f6>
 8004220:	f04f 30ff 	mov.w	r0, #4294967295
 8004224:	b004      	add	sp, #16
 8004226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800422a:	6823      	ldr	r3, [r4, #0]
 800422c:	f043 0320 	orr.w	r3, r3, #32
 8004230:	6023      	str	r3, [r4, #0]
 8004232:	4833      	ldr	r0, [pc, #204]	; (8004300 <_printf_i+0x240>)
 8004234:	2778      	movs	r7, #120	; 0x78
 8004236:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800423a:	6823      	ldr	r3, [r4, #0]
 800423c:	6829      	ldr	r1, [r5, #0]
 800423e:	061f      	lsls	r7, r3, #24
 8004240:	f851 6b04 	ldr.w	r6, [r1], #4
 8004244:	d402      	bmi.n	800424c <_printf_i+0x18c>
 8004246:	065f      	lsls	r7, r3, #25
 8004248:	bf48      	it	mi
 800424a:	b2b6      	uxthmi	r6, r6
 800424c:	07df      	lsls	r7, r3, #31
 800424e:	bf48      	it	mi
 8004250:	f043 0320 	orrmi.w	r3, r3, #32
 8004254:	6029      	str	r1, [r5, #0]
 8004256:	bf48      	it	mi
 8004258:	6023      	strmi	r3, [r4, #0]
 800425a:	b91e      	cbnz	r6, 8004264 <_printf_i+0x1a4>
 800425c:	6823      	ldr	r3, [r4, #0]
 800425e:	f023 0320 	bic.w	r3, r3, #32
 8004262:	6023      	str	r3, [r4, #0]
 8004264:	2310      	movs	r3, #16
 8004266:	e7a7      	b.n	80041b8 <_printf_i+0xf8>
 8004268:	4824      	ldr	r0, [pc, #144]	; (80042fc <_printf_i+0x23c>)
 800426a:	e7e4      	b.n	8004236 <_printf_i+0x176>
 800426c:	4615      	mov	r5, r2
 800426e:	e7bd      	b.n	80041ec <_printf_i+0x12c>
 8004270:	682b      	ldr	r3, [r5, #0]
 8004272:	6826      	ldr	r6, [r4, #0]
 8004274:	6961      	ldr	r1, [r4, #20]
 8004276:	1d18      	adds	r0, r3, #4
 8004278:	6028      	str	r0, [r5, #0]
 800427a:	0635      	lsls	r5, r6, #24
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	d501      	bpl.n	8004284 <_printf_i+0x1c4>
 8004280:	6019      	str	r1, [r3, #0]
 8004282:	e002      	b.n	800428a <_printf_i+0x1ca>
 8004284:	0670      	lsls	r0, r6, #25
 8004286:	d5fb      	bpl.n	8004280 <_printf_i+0x1c0>
 8004288:	8019      	strh	r1, [r3, #0]
 800428a:	2300      	movs	r3, #0
 800428c:	6123      	str	r3, [r4, #16]
 800428e:	4615      	mov	r5, r2
 8004290:	e7bc      	b.n	800420c <_printf_i+0x14c>
 8004292:	682b      	ldr	r3, [r5, #0]
 8004294:	1d1a      	adds	r2, r3, #4
 8004296:	602a      	str	r2, [r5, #0]
 8004298:	681d      	ldr	r5, [r3, #0]
 800429a:	6862      	ldr	r2, [r4, #4]
 800429c:	2100      	movs	r1, #0
 800429e:	4628      	mov	r0, r5
 80042a0:	f7fb ffbe 	bl	8000220 <memchr>
 80042a4:	b108      	cbz	r0, 80042aa <_printf_i+0x1ea>
 80042a6:	1b40      	subs	r0, r0, r5
 80042a8:	6060      	str	r0, [r4, #4]
 80042aa:	6863      	ldr	r3, [r4, #4]
 80042ac:	6123      	str	r3, [r4, #16]
 80042ae:	2300      	movs	r3, #0
 80042b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042b4:	e7aa      	b.n	800420c <_printf_i+0x14c>
 80042b6:	6923      	ldr	r3, [r4, #16]
 80042b8:	462a      	mov	r2, r5
 80042ba:	4649      	mov	r1, r9
 80042bc:	4640      	mov	r0, r8
 80042be:	47d0      	blx	sl
 80042c0:	3001      	adds	r0, #1
 80042c2:	d0ad      	beq.n	8004220 <_printf_i+0x160>
 80042c4:	6823      	ldr	r3, [r4, #0]
 80042c6:	079b      	lsls	r3, r3, #30
 80042c8:	d413      	bmi.n	80042f2 <_printf_i+0x232>
 80042ca:	68e0      	ldr	r0, [r4, #12]
 80042cc:	9b03      	ldr	r3, [sp, #12]
 80042ce:	4298      	cmp	r0, r3
 80042d0:	bfb8      	it	lt
 80042d2:	4618      	movlt	r0, r3
 80042d4:	e7a6      	b.n	8004224 <_printf_i+0x164>
 80042d6:	2301      	movs	r3, #1
 80042d8:	4632      	mov	r2, r6
 80042da:	4649      	mov	r1, r9
 80042dc:	4640      	mov	r0, r8
 80042de:	47d0      	blx	sl
 80042e0:	3001      	adds	r0, #1
 80042e2:	d09d      	beq.n	8004220 <_printf_i+0x160>
 80042e4:	3501      	adds	r5, #1
 80042e6:	68e3      	ldr	r3, [r4, #12]
 80042e8:	9903      	ldr	r1, [sp, #12]
 80042ea:	1a5b      	subs	r3, r3, r1
 80042ec:	42ab      	cmp	r3, r5
 80042ee:	dcf2      	bgt.n	80042d6 <_printf_i+0x216>
 80042f0:	e7eb      	b.n	80042ca <_printf_i+0x20a>
 80042f2:	2500      	movs	r5, #0
 80042f4:	f104 0619 	add.w	r6, r4, #25
 80042f8:	e7f5      	b.n	80042e6 <_printf_i+0x226>
 80042fa:	bf00      	nop
 80042fc:	080049b9 	.word	0x080049b9
 8004300:	080049ca 	.word	0x080049ca

08004304 <memmove>:
 8004304:	4288      	cmp	r0, r1
 8004306:	b510      	push	{r4, lr}
 8004308:	eb01 0402 	add.w	r4, r1, r2
 800430c:	d902      	bls.n	8004314 <memmove+0x10>
 800430e:	4284      	cmp	r4, r0
 8004310:	4623      	mov	r3, r4
 8004312:	d807      	bhi.n	8004324 <memmove+0x20>
 8004314:	1e43      	subs	r3, r0, #1
 8004316:	42a1      	cmp	r1, r4
 8004318:	d008      	beq.n	800432c <memmove+0x28>
 800431a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800431e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004322:	e7f8      	b.n	8004316 <memmove+0x12>
 8004324:	4402      	add	r2, r0
 8004326:	4601      	mov	r1, r0
 8004328:	428a      	cmp	r2, r1
 800432a:	d100      	bne.n	800432e <memmove+0x2a>
 800432c:	bd10      	pop	{r4, pc}
 800432e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004332:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004336:	e7f7      	b.n	8004328 <memmove+0x24>

08004338 <_sbrk_r>:
 8004338:	b538      	push	{r3, r4, r5, lr}
 800433a:	4d06      	ldr	r5, [pc, #24]	; (8004354 <_sbrk_r+0x1c>)
 800433c:	2300      	movs	r3, #0
 800433e:	4604      	mov	r4, r0
 8004340:	4608      	mov	r0, r1
 8004342:	602b      	str	r3, [r5, #0]
 8004344:	f7fd fa04 	bl	8001750 <_sbrk>
 8004348:	1c43      	adds	r3, r0, #1
 800434a:	d102      	bne.n	8004352 <_sbrk_r+0x1a>
 800434c:	682b      	ldr	r3, [r5, #0]
 800434e:	b103      	cbz	r3, 8004352 <_sbrk_r+0x1a>
 8004350:	6023      	str	r3, [r4, #0]
 8004352:	bd38      	pop	{r3, r4, r5, pc}
 8004354:	20000338 	.word	0x20000338

08004358 <memcpy>:
 8004358:	440a      	add	r2, r1
 800435a:	4291      	cmp	r1, r2
 800435c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004360:	d100      	bne.n	8004364 <memcpy+0xc>
 8004362:	4770      	bx	lr
 8004364:	b510      	push	{r4, lr}
 8004366:	f811 4b01 	ldrb.w	r4, [r1], #1
 800436a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800436e:	4291      	cmp	r1, r2
 8004370:	d1f9      	bne.n	8004366 <memcpy+0xe>
 8004372:	bd10      	pop	{r4, pc}

08004374 <_realloc_r>:
 8004374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004378:	4680      	mov	r8, r0
 800437a:	4614      	mov	r4, r2
 800437c:	460e      	mov	r6, r1
 800437e:	b921      	cbnz	r1, 800438a <_realloc_r+0x16>
 8004380:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004384:	4611      	mov	r1, r2
 8004386:	f7ff bc49 	b.w	8003c1c <_malloc_r>
 800438a:	b92a      	cbnz	r2, 8004398 <_realloc_r+0x24>
 800438c:	f7ff fbda 	bl	8003b44 <_free_r>
 8004390:	4625      	mov	r5, r4
 8004392:	4628      	mov	r0, r5
 8004394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004398:	f000 f81b 	bl	80043d2 <_malloc_usable_size_r>
 800439c:	4284      	cmp	r4, r0
 800439e:	4607      	mov	r7, r0
 80043a0:	d802      	bhi.n	80043a8 <_realloc_r+0x34>
 80043a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80043a6:	d812      	bhi.n	80043ce <_realloc_r+0x5a>
 80043a8:	4621      	mov	r1, r4
 80043aa:	4640      	mov	r0, r8
 80043ac:	f7ff fc36 	bl	8003c1c <_malloc_r>
 80043b0:	4605      	mov	r5, r0
 80043b2:	2800      	cmp	r0, #0
 80043b4:	d0ed      	beq.n	8004392 <_realloc_r+0x1e>
 80043b6:	42bc      	cmp	r4, r7
 80043b8:	4622      	mov	r2, r4
 80043ba:	4631      	mov	r1, r6
 80043bc:	bf28      	it	cs
 80043be:	463a      	movcs	r2, r7
 80043c0:	f7ff ffca 	bl	8004358 <memcpy>
 80043c4:	4631      	mov	r1, r6
 80043c6:	4640      	mov	r0, r8
 80043c8:	f7ff fbbc 	bl	8003b44 <_free_r>
 80043cc:	e7e1      	b.n	8004392 <_realloc_r+0x1e>
 80043ce:	4635      	mov	r5, r6
 80043d0:	e7df      	b.n	8004392 <_realloc_r+0x1e>

080043d2 <_malloc_usable_size_r>:
 80043d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043d6:	1f18      	subs	r0, r3, #4
 80043d8:	2b00      	cmp	r3, #0
 80043da:	bfbc      	itt	lt
 80043dc:	580b      	ldrlt	r3, [r1, r0]
 80043de:	18c0      	addlt	r0, r0, r3
 80043e0:	4770      	bx	lr
	...

080043e4 <_init>:
 80043e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043e6:	bf00      	nop
 80043e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ea:	bc08      	pop	{r3}
 80043ec:	469e      	mov	lr, r3
 80043ee:	4770      	bx	lr

080043f0 <_fini>:
 80043f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043f2:	bf00      	nop
 80043f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043f6:	bc08      	pop	{r3}
 80043f8:	469e      	mov	lr, r3
 80043fa:	4770      	bx	lr
